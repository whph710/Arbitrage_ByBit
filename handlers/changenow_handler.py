import aiohttp
import asyncio
from typing import Dict, List, Optional
from configs import REQUEST_TIMEOUT, MAX_RETRIES, RETRY_DELAY


class ChangeNowClientAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è ChangeNOW API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""

    def __init__(self, api_key: str = None):
        self.base_url = "https://api.changenow.io/v2"
        self.api_key = api_key
        self.headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (compatible; ArbitrageBot/4.0)'
        }
        if self.api_key:
            self.headers['x-changenow-api-key'] = self.api_key

        self.timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        self.session = None

        # –ö—ç—à –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –∏ –ø–∞—Ä
        self.available_currencies: Dict[str, Dict] = {}
        self.exchange_ranges: Dict[str, Dict] = {}
        self.failed_pairs: set = set()  # –ö—ç—à –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    async def __aenter__(self):
        await self.create_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()

    async def create_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession(headers=self.headers, timeout=self.timeout)

    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None

    async def _make_request(self, endpoint: str, params: Dict = None, retries: int = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        if self.session is None:
            await self.create_session()
        if retries is None:
            retries = MAX_RETRIES

        url = f"{self.base_url}/{endpoint}"

        for attempt in range(retries + 1):
            try:
                async with self.session.get(url, params=params) as response:
                    if response.status == 429:
                        wait_time = RETRY_DELAY * (2 ** attempt)
                        print(f"[ChangeNOW] ‚ö†Ô∏è Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å")
                        await asyncio.sleep(wait_time)
                        continue

                    if response.status == 400:
                        # –û—à–∏–±–∫–∞ 400 - –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                        error_text = await response.text()
                        # –ù–µ –≤—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É, —Ç–æ–ª—å–∫–æ —Å—É–º–º–∏—Ä—É–µ–º
                        return None

                    response.raise_for_status()
                    return await response.json()

            except aiohttp.ClientResponseError as e:
                if e.status == 429 and attempt < retries:
                    await asyncio.sleep(RETRY_DELAY * (2 ** attempt))
                    continue
                if e.status == 400:
                    # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    return None
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if attempt == retries:
                    print(f"[ChangeNOW] ‚ùå –û—à–∏–±–∫–∞ {e.status} –¥–ª—è {endpoint}")
                return None

            except asyncio.TimeoutError:
                if attempt < retries:
                    await asyncio.sleep(RETRY_DELAY)
                    continue
                return None

            except Exception as e:
                if attempt < retries:
                    await asyncio.sleep(RETRY_DELAY)
                    continue
                return None

        return None

    async def load_available_currencies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –æ–±–º–µ–Ω–∞"""
        print("[ChangeNOW] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç...")

        data = await self._make_request("exchange/currencies", params={'active': 'true'})

        if not data:
            print("[ChangeNOW] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–ª—é—Ç—ã")
            return

        self.available_currencies.clear()

        for currency in data:
            ticker = currency.get('ticker', '').upper()
            if ticker:
                self.available_currencies[ticker] = {
                    'ticker': ticker,
                    'name': currency.get('name', ''),
                    'network': currency.get('network', ''),
                    'has_external_id': currency.get('hasExternalId', False),
                    'is_stable': currency.get('isStable', False),
                    'supports_fixed_rate': currency.get('supportsFixedRate', False)
                }

        print(f"[ChangeNOW] ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.available_currencies)} –≤–∞–ª—é—Ç")

    async def get_exchange_range(self, from_currency: str, to_currency: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞"""
        pair_key = f"{from_currency}_{to_currency}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
        if pair_key in self.failed_pairs:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä
        if pair_key in self.exchange_ranges:
            return self.exchange_ranges[pair_key]

        from_info = self.available_currencies.get(from_currency, {})
        to_info = self.available_currencies.get(to_currency, {})

        data = await self._make_request(
            "exchange/range",
            params={
                'fromCurrency': from_currency.lower(),
                'toCurrency': to_currency.lower(),
                'fromNetwork': from_info.get('network', ''),
                'toNetwork': to_info.get('network', ''),
                'flow': 'standard'
            }
        )

        if data and 'minAmount' in data:
            range_info = {
                'min_amount': float(data.get('minAmount', 0)),
                'max_amount': float(data.get('maxAmount', 0)) if data.get('maxAmount') else 999999999
            }
            self.exchange_ranges[pair_key] = range_info
            return range_info
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
            self.failed_pairs.add(pair_key)
            return None

    async def get_estimated_amount(
            self,
            from_currency: str,
            to_currency: str,
            from_amount: float
    ) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—á—ë—Ç–Ω—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞

        Returns:
            {
                'to_amount': float,
                'rate': float,
                'from_amount': float
            }
        """
        pair_key = f"{from_currency}_{to_currency}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
        if pair_key in self.failed_pairs:
            return None

        from_info = self.available_currencies.get(from_currency, {})
        to_info = self.available_currencies.get(to_currency, {})

        params = {
            'fromCurrency': from_currency.lower(),
            'toCurrency': to_currency.lower(),
            'fromAmount': from_amount,
            'fromNetwork': from_info.get('network', ''),
            'toNetwork': to_info.get('network', ''),
            'flow': 'standard',
            'type': 'direct'
        }

        data = await self._make_request("exchange/estimated-amount", params=params)

        if data and 'toAmount' in data:
            try:
                to_amount = float(data['toAmount'])

                # –ù–ï —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º rate –∑–¥–µ—Å—å - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ analyzer
                # –ø–æ—Ç–æ–º—É —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –∫—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏

                return {
                    'to_amount': to_amount,
                    'from_amount': from_amount,
                    'from_currency': from_currency,
                    'to_currency': to_currency
                }
            except (ValueError, TypeError, ZeroDivisionError):
                self.failed_pairs.add(pair_key)
                return None
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
            self.failed_pairs.add(pair_key)
            return None

    async def check_pair_availability(self, from_currency: str, to_currency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø–∞—Ä–∞ –¥–ª—è –æ–±–º–µ–Ω–∞"""
        pair_key = f"{from_currency}_{to_currency}"

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
        if pair_key in self.failed_pairs:
            return False

        if from_currency not in self.available_currencies:
            return False
        if to_currency not in self.available_currencies:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞
        range_info = await self.get_exchange_range(from_currency, to_currency)
        return range_info is not None and range_info['min_amount'] > 0

    async def get_best_rate_batch(
            self,
            pairs: List[tuple],
            delay: float = 0.1
    ) -> Dict[str, Optional[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

        Returns:
            {'FROM_TO': {...}, ...}
        """
        results = {}

        for from_curr, to_curr, amount in pairs:
            pair_key = f"{from_curr}_{to_curr}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
            if pair_key in self.failed_pairs:
                results[pair_key] = None
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—ã
            if not await self.check_pair_availability(from_curr, to_curr):
                results[pair_key] = None
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
            rate_info = await self.get_estimated_amount(from_curr, to_curr, amount)
            results[pair_key] = rate_info

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(delay)

        return results

    def has_currency(self, currency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≤–∞–ª—é—Ç–∞"""
        return currency.upper() in self.available_currencies

    def get_common_currencies(self, bybit_coins: set) -> set:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç Bybit –∏ ChangeNOW"""
        changenow_coins = set(self.available_currencies.keys())
        common = bybit_coins & changenow_coins

        print(f"[ChangeNOW] üîç –û–±—â–∏—Ö –º–æ–Ω–µ—Ç —Å Bybit: {len(common)}")
        if common:
            preview = ', '.join(sorted(list(common)[:20]))
            more = f" –∏ –µ—â–µ {len(common) - 20}" if len(common) > 20 else ""
            print(f"[ChangeNOW]   –ü—Ä–∏–º–µ—Ä—ã: {preview}{more}")

        return common

    def get_failed_pairs_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä"""
        return len(self.failed_pairs)