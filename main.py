#!/usr/bin/env python3
"""
–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è Bybit - main.py
"""
import asyncio
import logging
import signal
import sys
from pathlib import Path
from config import *
from csv_manager import CSVManager
from api_client import BybitAPIClient
from arbitrage_logic import ArbitrageLogic
from utils import setup_logging, print_startup_info, check_dependencies
from trading import TradingManager


class BybitArbitrageBot:
    def __init__(self):
        self.api_client = BybitAPIClient()
        self.csv_manager = CSVManager()
        self.arbitrage_logic = ArbitrageLogic(self.api_client, self.csv_manager)
        self.trading_manager = TradingManager(self.api_client, self.csv_manager)
        self.shutdown_event = asyncio.Event()
        setup_logging()
        self.logger = logging.getLogger(__name__)

    async def start(self):
        await self.api_client.start()
        self.logger.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    async def close(self):
        try:
            await self.api_client.close()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        self.logger.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def run(self):
        await self.start()
        try:
            while not self.shutdown_event.is_set():
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Ä–Ω–µ–º –≤ try-except –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ StopIteration
                    try:
                        opportunities = await self.arbitrage_logic.scan_arbitrage_opportunities()
                    except StopIteration:
                        self.logger.debug("StopIteration –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤ scan_arbitrage_opportunities")
                        opportunities = []
                    except RuntimeError as e:
                        if "StopIteration" in str(e):
                            self.logger.debug("RuntimeError —Å–æ StopIteration –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω")
                            opportunities = []
                        else:
                            raise

                    if opportunities:
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!")
                        for i, opportunity in enumerate(opportunities[:MAX_OPPORTUNITIES_DISPLAY], 1):
                            try:
                                self.arbitrage_logic.print_opportunity(opportunity, i)
                                if ENABLE_LIVE_TRADING:
                                    await self.trading_manager.execute_trade(opportunity)
                            except (StopIteration, RuntimeError) as e:
                                if "StopIteration" in str(e):
                                    self.logger.debug(f"StopIteration –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ {i}")
                                    continue
                                else:
                                    raise
                    else:
                        self.logger.debug("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π sleep —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π shutdown
                    try:
                        await asyncio.wait_for(
                            asyncio.sleep(SCAN_INTERVAL),
                            timeout=SCAN_INTERVAL + 1
                        )
                    except asyncio.TimeoutError:
                        pass

                except KeyboardInterrupt:
                    self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (KeyboardInterrupt)...")
                    break
                except (StopIteration, RuntimeError) as e:
                    if "StopIteration" in str(e):
                        self.logger.warning(f"StopIteration –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                        continue
                    else:
                        self.logger.error(f"RuntimeError –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                        await asyncio.sleep(ERROR_RETRY_INTERVAL)
                except asyncio.CancelledError:
                    self.logger.info("–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    break
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                    await asyncio.sleep(ERROR_RETRY_INTERVAL)
        finally:
            await self.close()


def _setup_signal_handlers(loop, shutdown_event: asyncio.Event):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    def signal_handler(signame):
        def handler():
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signame}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            shutdown_event.set()

        return handler

    try:
        if hasattr(signal, 'SIGTERM'):
            loop.add_signal_handler(signal.SIGTERM, signal_handler('SIGTERM'))
        if hasattr(signal, 'SIGINT'):
            loop.add_signal_handler(signal.SIGINT, signal_handler('SIGINT'))
    except NotImplementedError:
        # Windows compatibility fallback
        def handle_exit(sig, frame):
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            shutdown_event.set()

        if hasattr(signal, 'SIGINT'):
            signal.signal(signal.SIGINT, handle_exit)
        if hasattr(signal, 'SIGTERM'):
            signal.signal(signal.SIGTERM, handle_exit)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not check_dependencies():
        sys.exit(1)

    print_startup_info()

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = BybitArbitrageBot()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_running_loop()
    _setup_signal_handlers(loop, bot.shutdown_event)

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await bot.run()
    except KeyboardInterrupt:
        bot.logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        bot.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        try:
            await bot.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    try:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        sys.exit(1)