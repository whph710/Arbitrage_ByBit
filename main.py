import asyncio
from datetime import datetime

from configs import (
    START_AMOUNT, MIN_SPREAD, SHOW_TOP,
    SWAPZONE_API_KEY,
    MAX_PAIRS_TO_CHECK, PARALLEL_EXCHANGE_REQUESTS
)
from bybit_handler import BybitClientAsync
from logs.swapzone_handler import SwapzoneClientAsync
from exchange_arbitrage_analyzer import SimpleExchangeAnalyzer
from results_saver import ResultsSaver


async def main():
    print("=" * 100)
    print("üöÄ CRYPTO ARBITRAGE BOT v4.0 ‚Äî –ê–†–ë–ò–¢–†–ê–ñ –ß–ï–†–ï–ó SWAPZONE")
    print("=" * 100)

    start_time = datetime.now()
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${START_AMOUNT}")
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {MIN_SPREAD}%")
    print(f"üéØ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø: {SHOW_TOP} —Å–≤—è–∑–æ–∫")
    print(f"üî¢ –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {MAX_PAIRS_TO_CHECK}")
    print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {PARALLEL_EXCHANGE_REQUESTS}")
    print(f"\nüîç –°—Ö–µ–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:")
    print(f"   1Ô∏è‚É£ –ö—É–ø–∏—Ç—å CoinA –∑–∞ USDT –Ω–∞ Bybit")
    print(f"   2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å CoinA –Ω–∞ Swapzone")
    print(f"   3Ô∏è‚É£ –û–±–º–µ–Ω—è—Ç—å CoinA ‚Üí CoinB –Ω–∞ Swapzone")
    print(f"   4Ô∏è‚É£ –ü—Ä–æ–¥–∞—Ç—å CoinB –∑–∞ USDT –Ω–∞ Bybit")
    print(f"   5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å!\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not SWAPZONE_API_KEY:
        print("\n‚ùå –û–®–ò–ë–ö–ê: SWAPZONE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω!")
        print("üí° –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ configs.py")
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Bybit
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    print("=" * 100)
    print("üìä –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° BYBIT")
    print("=" * 100)

    async with BybitClientAsync() as bybit:
        await bybit.load_usdt_pairs()

        print(f"\n[Bybit] ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bybit.usdt_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT")
        bybit_preview = ', '.join(sorted(list(bybit.coins)[:20]))
        more_bybit = f" –∏ –µ—â–µ {len(bybit.coins) - 20}" if len(bybit.coins) > 20 else ""
        print(f"[Bybit] ‚úì –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã ({len(bybit.coins)}): {bybit_preview}{more_bybit}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Swapzone
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        print("\n" + "=" * 100)
        print("üìä –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó SWAPZONE")
        print("=" * 100)

        all_opportunities = []

        try:
            swapzone = SwapzoneClientAsync(api_key=SWAPZONE_API_KEY)
            await swapzone.create_session()
            await swapzone.load_available_currencies()

            if len(swapzone.available_currencies) > 0:
                analyzer = SimpleExchangeAnalyzer(bybit, swapzone, "Swapzone")

                opportunities = await analyzer.find_opportunities(
                    start_amount=START_AMOUNT,
                    min_spread=MIN_SPREAD,
                    max_pairs=MAX_PAIRS_TO_CHECK,
                    parallel_requests=PARALLEL_EXCHANGE_REQUESTS
                )

                all_opportunities.extend(opportunities)

                print(f"\n[Swapzone] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} —Å–≤—è–∑–æ–∫")
            else:
                print(f"\n[Swapzone] ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç")

            await swapzone.close()

        except Exception as e:
            print(f"\n[Swapzone] ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –®–ê–ì 3: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if all_opportunities:
            print("\n" + "=" * 100)
            print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            print("=" * 100)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
            all_opportunities.sort(key=lambda x: x['spread'], reverse=True)

            print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–≤—è–∑–æ–∫: {len(all_opportunities)}")
            print(f"   ‚Ä¢ –û–±—â–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${sum(opp['profit'] for opp in all_opportunities):.2f}")
            print(
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {sum(opp['spread'] for opp in all_opportunities) / len(all_opportunities):.4f}%")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {all_opportunities[0]['spread']:.4f}%")

            # –¢–æ–ø –ª—É—á—à–∏—Ö
            print("\n" + "=" * 100)
            print(f"üèÜ –¢–û–ü-{min(SHOW_TOP, len(all_opportunities))} –õ–£–ß–®–ò–• –°–í–Ø–ó–û–ö:")
            print("=" * 100 + "\n")

            for idx, opp in enumerate(all_opportunities[:SHOW_TOP], 1):
                print(f"#{idx} | {opp['path']}")
                print(f"     üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
                print(f"     üìä –î–µ—Ç–∞–ª–∏:")
                for step in opp['steps']:
                    print(f"        {step}")
                print()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("=" * 100)
            print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
            print("=" * 100)

            end_time = datetime.now()
            elapsed = (end_time - start_time).total_seconds()

            saver = ResultsSaver()
            saved_files = saver.save_opportunities(
                opportunities=all_opportunities,
                start_amount=START_AMOUNT,
                min_spread=MIN_SPREAD,
                execution_time=elapsed,
                save_formats=['json', 'txt', 'csv', 'html']
            )

            print("\nüìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            for fmt, path in saved_files.items():
                print(f"   ‚Ä¢ {fmt.upper()} ‚Üí {path}")

        else:
            print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫ —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {MIN_SPREAD}% –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print(f"   - –£–º–µ–Ω—å—à–∏—Ç—å MIN_SPREAD –≤ configs.py")
            print(f"   - –£–≤–µ–ª–∏—á–∏—Ç—å MAX_PAIRS_TO_CHECK")
            print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á Swapzone")

    end_time = datetime.now()
    elapsed = (end_time - start_time).total_seconds()

    print("\n" + "=" * 100)
    print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù –ó–ê {elapsed:.2f} –°–ï–ö–£–ù–î")
    print("=" * 100)

    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:")
    print("   ‚Ä¢ –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç:")
    print("     - –ö–æ–º–∏—Å—Å–∏–∏ Bybit –∑–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É (~0.1%)")
    print("     - –ö–æ–º–∏—Å—Å–∏–∏ Swapzone –∑–∞ –æ–±–º–µ–Ω (–æ–±—ã—á–Ω–æ 0.5-2%)")
    print("     - –ö–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã")
    print("     - –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–∞—Ö")
    print("   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤—è–∑–∫–∏:")
    print("     - –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Bybit: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
    print("     - –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ Swapzone: 10-30 –º–∏–Ω—É—Ç")
    print("     - –û–±–º–µ–Ω –Ω–∞ Swapzone: 5-30 –º–∏–Ω—É—Ç")
    print("     - –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ Bybit: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
    print("   ‚Ä¢ –ó–∞ 40-60 –º–∏–Ω—É—Ç —Ü–µ–Ω—ã –º–æ–≥—É—Ç —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è!")
    print("   ‚Ä¢ –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±–º–µ–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π!")


async def test_swapzone():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Swapzone API"""
    print("=" * 100)
    print("üî¨ –¢–ï–°–¢ SWAPZONE API")
    print("=" * 100)

    if not SWAPZONE_API_KEY:
        print("\n‚ùå SWAPZONE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω!")
        return

    async with BybitClientAsync() as bybit:
        await bybit.load_usdt_pairs()

        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Swapzone...")
        swapzone = SwapzoneClientAsync(api_key=SWAPZONE_API_KEY)
        await swapzone.create_session()
        await swapzone.load_available_currencies()

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC ‚Üí ETH
        print("\nüß™ –¢–µ—Å—Ç: 0.01 BTC ‚Üí ETH")
        test_result = await swapzone.get_estimated_amount('BTC', 'ETH', 0.01)

        if test_result:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –û—Ç: {test_result['from_amount']} {test_result['from_currency']}")
            print(f"   –ö: {test_result['to_amount']} {test_result['to_currency']}")
            print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {test_result.get('exchange_name', 'N/A')}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")

        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –ø–∞—Ä—É
        print("\nüß™ –¢–µ—Å—Ç: 100 USDT ‚Üí BTC")
        test_result2 = await swapzone.get_estimated_amount('USDT', 'BTC', 100)

        if test_result2:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –û—Ç: {test_result2['from_amount']} {test_result2['from_currency']}")
            print(f"   –ö: {test_result2['to_amount']} {test_result2['to_currency']}")
            print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {test_result2.get('exchange_name', 'N/A')}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")

        await swapzone.close()


if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
        asyncio.run(main())

        # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # asyncio.run(test_swapzone())

    except KeyboardInterrupt:
        print("\n‚õî –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()