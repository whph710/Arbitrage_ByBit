import asyncio
from datetime import datetime
from configs import (
    START_AMOUNT, MIN_SPREAD, SHOW_TOP, MAX_REASONABLE_SPREAD,
    BESTCHANGE_API_KEY, WEBSOCKET_ENABLED, MONITORING_MODE,
    MONITORING_INTERVAL, AUTO_ALERT_THRESHOLD
)
from bybit_handler import BybitClientAsync
from bestchange_handler import BestChangeClientAsync
from exchange_arbitrage_analyzer import ExchangeArbitrageAnalyzer
from results_saver import ResultsSaver


class ArbitrageMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self, bybit_client, bestchange_client, analyzer):
        self.bybit = bybit_client
        self.bestchange = bestchange_client
        self.analyzer = analyzer
        self.running = False
        self.best_opportunities = []
        self.alert_count = 0

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.running = True
        print(f"\n{'='*100}")
        print("üî¥ –†–ï–ñ–ò–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        print(f"{'='*100}")
        print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {MONITORING_INTERVAL}—Å")
        print(f"üîî –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ø—Ä–µ–¥–µ > {AUTO_ALERT_THRESHOLD}%")
        print(f"‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

        iteration = 0

        while self.running:
            iteration += 1
            print(f"\n{'‚îÄ'*100}")
            print(f"üîÑ –ò–¢–ï–†–ê–¶–ò–Ø #{iteration} | {datetime.now().strftime('%H:%M:%S')}")
            print(f"{'‚îÄ'*100}")

            try:
                # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                opportunities = await self.analyzer.find_opportunities(
                    start_amount=START_AMOUNT,
                    min_spread=MIN_SPREAD,
                    max_spread=MAX_REASONABLE_SPREAD,
                    min_reserve=0,
                    parallel_requests=500
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–ª–µ—Ä—Ç—ã
                if opportunities:
                    top_opp = opportunities[0]
                    if top_opp['spread'] >= AUTO_ALERT_THRESHOLD:
                        self.alert_count += 1
                        print(f"\n{'üîî'*50}")
                        print(f"üö® –ê–õ–ï–†–¢ #{self.alert_count}: –í–´–°–û–ö–ò–ô –°–ü–†–ï–î {top_opp['spread']:.4f}% üö®")
                        print(f"   –ü—É—Ç—å: {top_opp['path']}")
                        print(f"   –ü—Ä–∏–±—ã–ª—å: ${top_opp['profit']:.4f}")
                        print(f"   –û–±–º–µ–Ω–Ω–∏–∫: {top_opp['exchanger']}")
                        print(f"{'üîî'*50}\n")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–µ
                    self.best_opportunities = opportunities[:5]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket
                if WEBSOCKET_ENABLED:
                    ws_stats = self.bybit.get_ws_statistics()
                    print(f"\nüì° WebSocket: {ws_stats['updates_count']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π | "
                          f"{ws_stats['last_updates']} –ø–∞—Ä –∞–∫—Ç–∏–≤–Ω—ã")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
                cache_stats = self.analyzer.get_pair_statistics()
                print(f"üî• –ì–æ—Ä—è—á–∏—Ö –ø–∞—Ä: {cache_stats['hot_pairs_cached']} | "
                      f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {cache_stats['total_pairs_checked']}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏: {e}")

            # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {MONITORING_INTERVAL}—Å...")
            await asyncio.sleep(MONITORING_INTERVAL)

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False
        print(f"\n{'='*100}")
        print("‚õî –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù")
        print(f"{'='*100}")
        print(f"–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {self.alert_count}")

        if self.best_opportunities:
            print(f"\nüèÜ –õ–£–ß–®–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ó–ê –°–ï–°–°–ò–Æ:")
            for idx, opp in enumerate(self.best_opportunities, 1):
                print(f"   {idx}. {opp['path']}: {opp['spread']:.4f}% (${opp['profit']:.4f})")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    print("=" * 100)
    print("üöÄ CRYPTO ARBITRAGE BOT v8.0 ‚Äî –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 100)

    start_time = datetime.now()
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${START_AMOUNT}")
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {MIN_SPREAD}%")
    print(f"üéØ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø: {SHOW_TOP} —Å–≤—è–∑–æ–∫")

    print(f"\nüîç –¢–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:")
    print(f"   üîÄ –ß–ï–†–ï–ó –û–ë–ú–ï–ù–ù–ò–ö–ò: Bybit ‚Üí BestChange ‚Üí Bybit (5 —à–∞–≥–æ–≤)")
    print(f"\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print(f"   ‚úì WebSocket –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print(f"   ‚úì –ú–∞—Å—Å–∏–≤–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è (–¥–æ 500 –∑–∞–ø—Ä–æ—Å–æ–≤)")
    print(f"   ‚úì –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –ø–∞—Ä")
    print(f"   ‚úì –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n")

    all_opportunities = []

    # ========================================================================
    # –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° BYBIT
    # ========================================================================
    print("=" * 100)
    print("üìä –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° BYBIT")
    print("=" * 100)

    async with BybitClientAsync() as bybit:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—ã
        await bybit.load_usdt_pairs()

        if len(bybit.usdt_pairs) == 0:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã!")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        ws_task = None
        if WEBSOCKET_ENABLED:
            print(f"\n{'='*100}")
            print("üì° –ó–ê–ü–£–°–ö WEBSOCKET –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò")
            print(f"{'='*100}")
            ws_task = asyncio.create_task(bybit.start_websocket())
            await asyncio.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

        # ====================================================================
        # –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° BESTCHANGE
        # ====================================================================
        if not BESTCHANGE_API_KEY:
            print("\n" + "=" * 100)
            print("‚ö†Ô∏è  BESTCHANGE API KEY –ù–ï –ó–ê–î–ê–ù")
            print("=" * 100)
            print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:")
            print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://www.bestchange.com/wiki/api.html")
            print("2. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: BESTCHANGE_API_KEY=–≤–∞—à_–∫–ª—é—á")
            return

        print("\n" + "=" * 100)
        print("üìä –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° BESTCHANGE")
        print("=" * 100)

        try:
            async with BestChangeClientAsync() as bestchange:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª—é—Ç –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
                await bestchange.load_currencies()
                await bestchange.load_exchangers()

                # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã
                common_coins = set(bybit.usdt_pairs.keys()) & set(bestchange.crypto_currencies.keys())
                print(f"\n[BestChange] ‚úì –û–±—â–∏—Ö –º–æ–Ω–µ—Ç —Å Bybit: {len(common_coins)}")

                if len(common_coins) == 0:
                    print(f"\n[BestChange] ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
                    return

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
                await bestchange.load_rates(list(common_coins), use_rankrate=True)

                # ============================================================
                # –®–ê–ì 3: –ü–û–ò–°–ö –ê–†–ë–ò–¢–†–ê–ñ–ê
                # ============================================================
                print("\n" + "=" * 100)
                print("üìä –®–ê–ì 3: –ü–û–ò–°–ö –ê–†–ë–ò–¢–†–ê–ñ–ê –ß–ï–†–ï–ó –û–ë–ú–ï–ù–ù–ò–ö–ò")
                print("=" * 100)

                exchange_analyzer = ExchangeArbitrageAnalyzer(bybit, bestchange)

                # –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                if MONITORING_MODE:
                    monitor = ArbitrageMonitor(bybit, bestchange, exchange_analyzer)
                    try:
                        await monitor.start_monitoring()
                    except KeyboardInterrupt:
                        monitor.stop_monitoring()
                else:
                    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                    exchange_opps = await exchange_analyzer.find_opportunities(
                        start_amount=START_AMOUNT,
                        min_spread=MIN_SPREAD,
                        max_spread=MAX_REASONABLE_SPREAD,
                        min_reserve=0,
                        parallel_requests=500
                    )

                    all_opportunities.extend(exchange_opps)
                    print(f"\n[BestChange Arbitrage] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(exchange_opps)} —Å–≤—è–∑–æ–∫")

                    # ========================================================
                    # –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´
                    # ========================================================
                    if all_opportunities:
                        all_opportunities.sort(key=lambda x: x['profit'], reverse=True)

                        print("\n" + "=" * 100)
                        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
                        print("=" * 100)

                        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_opportunities)} —Å–≤—è–∑–æ–∫")

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º
                        exchangers_stats = {}
                        for opp in all_opportunities:
                            ex = opp.get('exchanger', 'Unknown')
                            if ex not in exchangers_stats:
                                exchangers_stats[ex] = {'count': 0, 'total_profit': 0, 'max_spread': 0}
                            exchangers_stats[ex]['count'] += 1
                            exchangers_stats[ex]['total_profit'] += opp['profit']
                            exchangers_stats[ex]['max_spread'] = max(exchangers_stats[ex]['max_spread'], opp['spread'])

                        print(f"\nüìä –¢–æ–ø-5 –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:")
                        sorted_ex = sorted(exchangers_stats.items(), key=lambda x: x[1]['count'], reverse=True)[:5]
                        for ex, stats in sorted_ex:
                            print(f"   {ex}: {stats['count']} —Å–≤—è–∑–æ–∫, –º–∞–∫—Å. —Å–ø—Ä–µ–¥ {stats['max_spread']:.4f}%")

                        print(f"\nüèÜ –¢–û–ü-{min(SHOW_TOP, len(all_opportunities))} –õ–£–ß–®–ò–•:")
                        print("=" * 100)

                        for idx, opp in enumerate(all_opportunities[:SHOW_TOP], 1):
                            print(f"\n#{idx} üîÄ | {opp['path']}")
                            print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
                            print(f"   üíµ ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f}")
                            print(f"   üè¶ –û–±–º–µ–Ω–Ω–∏–∫: {opp.get('exchanger', 'N/A')} (—Ä–µ–∑–µ—Ä–≤: ${opp.get('reserve', 0):,.0f})")
                            print(f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {opp['coins'][0]} ({opp['liquidity_a']:.1f}) ‚Üí {opp['coins'][1]} ({opp['liquidity_b']:.1f})")

                        # ============================================
                        # –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
                        # ============================================
                        print("\n" + "=" * 100)
                        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
                        print("=" * 100)

                        end_time = datetime.now()
                        elapsed = (end_time - start_time).total_seconds()

                        saver = ResultsSaver()
                        saved_files = saver.save_opportunities(
                            opportunities=all_opportunities,
                            start_amount=START_AMOUNT,
                            min_spread=MIN_SPREAD,
                            execution_time=elapsed,
                            save_formats=['json', 'txt', 'csv', 'html']
                        )

                        print("\nüìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
                        for fmt, path in saved_files.items():
                            print(f"   ‚Ä¢ {fmt.upper()} ‚Üí {path}")

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
                        cache_stats = exchange_analyzer.get_pair_statistics()
                        if cache_stats['hot_pairs_cached'] > 0:
                            print(f"\nüî• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê:")
                            print(f"   –ì–æ—Ä—è—á–∏—Ö –ø–∞—Ä: {cache_stats['hot_pairs_cached']}")
                            print(f"   –¢–æ–ø-3 –ø–µ—Ä—Ñ–æ—Ä–º–µ—Ä—ã:")
                            for perf in cache_stats['top_performers'][:3]:
                                print(f"      ‚Ä¢ {perf['pair']}: {perf['success_rate']:.1f}% —É—Å–ø–µ—Ö, "
                                      f"—Å—Ä. —Å–ø—Ä–µ–¥ {perf['avg_spread']:.4f}%")

                    else:
                        print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"\n[BestChange] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å BestChange: {e}")
            print(f"[BestChange] ‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤")
            import traceback
            traceback.print_exc()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
        if ws_task:
            print(f"\n{'='*100}")
            print("üîå –û–°–¢–ê–ù–û–í–ö–ê WEBSOCKET")
            print(f"{'='*100}")
            await bybit.close()
            ws_task.cancel()
            try:
                await ws_task
            except asyncio.CancelledError:
                pass

    end_time = datetime.now()
    elapsed = (end_time - start_time).total_seconds()

    print("\n" + "=" * 100)
    print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù –ó–ê {elapsed:.2f} –°–ï–ö–£–ù–î")
    print("=" * 100)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚õî –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()