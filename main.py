#!/usr/bin/env python3
"""
–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è Bybit - main.py
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import asyncio
import logging
import signal
import sys
import time
from pathlib import Path
from config import *
from csv_manager import CSVManager
from api_client import BybitAPIClient
from arbitrage_logic import ArbitrageLogic
from utils import setup_logging, print_startup_info, check_dependencies
from trading import TradingManager


class BybitArbitrageBot:
    def __init__(self):
        self.api_client = BybitAPIClient()
        self.csv_manager = CSVManager()
        self.arbitrage_logic = ArbitrageLogic(self.api_client, self.csv_manager)
        self.trading_manager = TradingManager(self.api_client, self.csv_manager)
        self.shutdown_event = asyncio.Event()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.consecutive_errors = 0
        self.max_consecutive_errors = 10
        self.total_scans = 0
        self.total_opportunities_found = 0
        self.scan_times = []
        self.start_time = time.time()

        setup_logging()
        self.logger = logging.getLogger(__name__)

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            await self.api_client.start()
            self.logger.info("üöÄ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            if not await self._test_api_connection():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Bybit")
                return False

            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False

    async def _test_api_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        try:
            self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
            tickers = await self.api_client.get_tickers()
            if tickers and len(tickers) > 0:
                self.logger.info(f"‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ {len(tickers)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                return True
            else:
                self.logger.error("‚ùå API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False

    async def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = time.time() - self.start_time
        hours, remainder = divmod(uptime, 3600)
        minutes, seconds = divmod(remainder, 60)

        avg_scan_time = sum(self.scan_times) / len(self.scan_times) if self.scan_times else 0

        self.logger.info("=" * 70)
        self.logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò")
        self.logger.info("=" * 70)
        self.logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å")
        self.logger.info(f"üîÑ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.total_scans}")
        self.logger.info(f"üíé –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.total_opportunities_found}")
        self.logger.info(f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {avg_scan_time:.2f}—Å")
        self.logger.info(f"üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CSV: {self.csv_manager.get_opportunities_count()}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        try:
            trading_stats = await self.trading_manager.get_trading_stats()
            if trading_stats['session_trades'] > 0:
                self.logger.info(f"üí∞ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {trading_stats['session_trades']}")
                self.logger.info(f"üíµ –ü—Ä–∏–±—ã–ª—å —Å–µ—Å—Å–∏–∏: ${trading_stats['session_profit']:.2f}")
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        self.logger.info("=" * 70)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
            await self.api_client.close()
            await self._print_final_stats()
            self.logger.info("‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {e}")

    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not await self.start():
            return

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            try:
                from config import print_aggressive_mode_warning
                print_aggressive_mode_warning()
            except (ImportError, AttributeError):
                self.logger.debug("–§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            while not self.shutdown_event.is_set():
                try:
                    scan_start_time = time.time()

                    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    opportunities = await self.arbitrage_logic.scan_arbitrage_opportunities()

                    scan_duration = time.time() - scan_start_time
                    self.scan_times.append(scan_duration)
                    self.total_scans += 1

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
                    if len(self.scan_times) > 100:
                        self.scan_times = self.scan_times[-100:]

                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                    self.consecutive_errors = 0

                    if opportunities:
                        opportunities_count = len(opportunities)
                        self.total_opportunities_found += opportunities_count

                        self.logger.info(
                            f"üéØ –ù–∞–π–¥–µ–Ω–æ {opportunities_count} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! (—Å–∫–∞–Ω: {scan_duration:.2f}—Å)")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        displayed_count = 0
                        successful_trades = 0

                        for i, opportunity in enumerate(opportunities, 1):
                            if displayed_count >= MAX_OPPORTUNITIES_DISPLAY:
                                self.logger.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {displayed_count} –∏–∑ {opportunities_count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                                break

                            try:
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                                self.arbitrage_logic.print_opportunity(opportunity, i)
                                displayed_count += 1

                                # –ü–æ–ø—ã—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
                                if ENABLE_LIVE_TRADING:
                                    trade_success = await self.trading_manager.execute_trade(opportunity)
                                    if trade_success:
                                        successful_trades += 1
                                        self.logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ #{i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                    else:
                                        self.logger.debug(f"‚è≠Ô∏è  –°–¥–µ–ª–∫–∞ #{i} –ø—Ä–æ–ø—É—â–µ–Ω–∞")

                            except Exception as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ #{i}: {e}")
                                continue

                        # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ
                        if ENABLE_LIVE_TRADING and successful_trades > 0:
                            self.logger.info(
                                f"üí∞ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ: {successful_trades}/{opportunities_count}")

                    else:
                        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                        if self.total_scans % 20 == 0:  # –ö–∞–∂–¥—ã–µ 20 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                            self.logger.info(
                                f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{self.total_scans}: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤—Ä–µ–º—è: {scan_duration:.2f}—Å)")
                        else:
                            self.logger.debug(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{self.total_scans}: –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    try:
                        await asyncio.wait_for(
                            self.shutdown_event.wait(),
                            timeout=SCAN_INTERVAL
                        )
                        # –ï—Å–ª–∏ –¥–æ–∂–¥–∞–ª–∏—Å—å —Å–æ–±—ã—Ç–∏—è - –≤—ã—Ö–æ–¥–∏–º
                        if self.shutdown_event.is_set():
                            break
                    except asyncio.TimeoutError:
                        # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        pass

                except KeyboardInterrupt:
                    self.logger.info("‚å®Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                    break

                except asyncio.CancelledError:
                    self.logger.info("üîÑ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    break

                except Exception as e:
                    self.consecutive_errors += 1
                    error_msg = f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ (#{self.consecutive_errors}): {e}"

                    if self.consecutive_errors <= 3:
                        self.logger.error(error_msg)
                    else:
                        self.logger.warning(error_msg)  # –ù–µ —Å–ø–∞–º–∏–º –≤ –ª–æ–≥–∏

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                    if self.consecutive_errors >= self.max_consecutive_errors:
                        self.logger.warning(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ ({self.consecutive_errors})")
                        self.logger.warning("‚è∏Ô∏è  –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫...")
                        await asyncio.sleep(ERROR_RETRY_INTERVAL * 10)
                        self.consecutive_errors = 0
                    elif self.consecutive_errors >= 5:
                        await asyncio.sleep(ERROR_RETRY_INTERVAL * 3)
                    else:
                        await asyncio.sleep(ERROR_RETRY_INTERVAL)

        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run(): {e}", exc_info=True)
        finally:
            await self.close()


def _setup_signal_handlers(bot: BybitArbitrageBot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    def signal_handler(signame):
        def handler(sig=None, frame=None):
            logging.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signame}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            bot.shutdown_event.set()

        return handler

    try:
        # Unix —Å–∏—Å—Ç–µ–º—ã
        if hasattr(signal, 'SIGTERM'):
            signal.signal(signal.SIGTERM, signal_handler('SIGTERM'))
        if hasattr(signal, 'SIGINT'):
            signal.signal(signal.SIGINT, signal_handler('SIGINT'))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è Unix
        if hasattr(signal, 'SIGHUP'):
            signal.signal(signal.SIGHUP, signal_handler('SIGHUP'))

        logging.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (Unix)")

    except (NotImplementedError, AttributeError, OSError):
        # Windows compatibility fallback
        if hasattr(signal, 'SIGINT'):
            signal.signal(signal.SIGINT, signal_handler('SIGINT'))
        if hasattr(signal, 'SIGBREAK'):
            signal.signal(signal.SIGBREAK, signal_handler('SIGBREAK'))

        logging.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (Windows)")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ Bybit...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    print_startup_info()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        from config import print_aggressive_mode_warning
        print_aggressive_mode_warning()
    except (ImportError, AttributeError):
        pass  # –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = BybitArbitrageBot()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    _setup_signal_handlers(bot)

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        await bot.run()

    except KeyboardInterrupt:
        bot.logger.info("‚å®Ô∏è  KeyboardInterrupt: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except Exception as e:
        bot.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        try:
            if hasattr(bot, 'api_client') and bot.api_client.session and not bot.api_client.session.closed:
                await bot.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

        print("üëã –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
    if sys.platform.startswith('win'):
        try:
            # Python 3.8+
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        except AttributeError:
            # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Python
            pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)

    try:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        asyncio.run(main())

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)