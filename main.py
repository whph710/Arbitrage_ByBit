#!/usr/bin/env python3
"""
–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è Bybit - main.py
"""
import asyncio
import logging
import signal
import sys
from pathlib import Path
from config import *
from csv_manager import CSVManager
from api_client import BybitAPIClient
from arbitrage_logic import ArbitrageLogic
from utils import setup_logging, print_startup_info, check_dependencies
from trading import TradingManager


class BybitArbitrageBot:
    def __init__(self):
        self.api_client = BybitAPIClient()
        self.csv_manager = CSVManager()
        self.arbitrage_logic = ArbitrageLogic(self.api_client, self.csv_manager)
        self.trading_manager = TradingManager(self.api_client, self.csv_manager)
        self.shutdown_event = asyncio.Event()
        self.consecutive_errors = 0
        self.max_consecutive_errors = 5
        setup_logging()
        self.logger = logging.getLogger(__name__)

    async def start(self):
        await self.api_client.start()
        self.logger.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    async def close(self):
        try:
            await self.api_client.close()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        self.logger.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def run(self):
        await self.start()
        try:
            while not self.shutdown_event.is_set():
                try:
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    opportunities = await self.arbitrage_logic.scan_arbitrage_opportunities()

                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                    self.consecutive_errors = 0

                    if opportunities:
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!")

                        displayed_count = 0
                        for i, opportunity in enumerate(opportunities, 1):
                            if displayed_count >= MAX_OPPORTUNITIES_DISPLAY:
                                self.logger.info(
                                    f"–ü–æ–∫–∞–∑–∞–Ω–æ {displayed_count} –∏–∑ {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (–ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)")
                                break

                            try:
                                self.arbitrage_logic.print_opportunity(opportunity, i)
                                displayed_count += 1

                                # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
                                if ENABLE_LIVE_TRADING:
                                    success = await self.trading_manager.execute_trade(opportunity)
                                    if success:
                                        self.logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ #{i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                    else:
                                        self.logger.debug(f"‚ùå –°–¥–µ–ª–∫–∞ #{i} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

                            except Exception as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ #{i}: {e}")
                                continue
                    else:
                        self.logger.debug("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    try:
                        await asyncio.wait_for(
                            asyncio.sleep(SCAN_INTERVAL),
                            timeout=SCAN_INTERVAL + 5
                        )
                    except asyncio.TimeoutError:
                        self.logger.debug("Timeout –≤ sleep, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                        pass

                except KeyboardInterrupt:
                    self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (KeyboardInterrupt)...")
                    break

                except asyncio.CancelledError:
                    self.logger.info("–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    break

                except Exception as e:
                    self.consecutive_errors += 1
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ (#{self.consecutive_errors}): {e}")

                    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫ - –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ–¥–æ–ª—å—à–µ
                    if self.consecutive_errors >= self.max_consecutive_errors:
                        self.logger.warning(f"–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ({self.consecutive_errors}), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É")
                        await asyncio.sleep(ERROR_RETRY_INTERVAL * 5)
                        self.consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    else:
                        await asyncio.sleep(ERROR_RETRY_INTERVAL)

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run(): {e}", exc_info=True)
        finally:
            await self.close()


def _setup_signal_handlers(bot: BybitArbitrageBot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    def signal_handler(signame):
        def handler(sig=None, frame=None):
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signame}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            bot.shutdown_event.set()

        return handler

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loop.add_signal_handler (Unix)
        loop = asyncio.get_running_loop()
        if hasattr(signal, 'SIGTERM'):
            loop.add_signal_handler(signal.SIGTERM, signal_handler('SIGTERM'))
        if hasattr(signal, 'SIGINT'):
            loop.add_signal_handler(signal.SIGINT, signal_handler('SIGINT'))
    except (NotImplementedError, RuntimeError):
        # Windows compatibility fallback
        if hasattr(signal, 'SIGINT'):
            signal.signal(signal.SIGINT, signal_handler('SIGINT'))
        if hasattr(signal, 'SIGTERM'):
            signal.signal(signal.SIGTERM, signal_handler('SIGTERM'))


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    print_startup_info()

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = BybitArbitrageBot()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    _setup_signal_handlers(bot)

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.run()

    except KeyboardInterrupt:
        bot.logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    except Exception as e:
        bot.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)

    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        try:
            if not bot.api_client.session.closed:
                await bot.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
    if sys.platform.startswith('win'):
        try:
            # Python 3.8+
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        except AttributeError:
            # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Python
            pass

    try:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        asyncio.run(main())

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        sys.exit(1)