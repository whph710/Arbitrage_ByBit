import json
from datetime import datetime
from pathlib import Path
from configs import Config
from bestchange_handler import BestChangeHandler
from bybit_handler import BybitHandler
from arbitrage_analyzer import ArbitrageAnalyzer


def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n" + "=" * 80)
    print("üöÄ CRYPTO ARBITRAGE BOT")
    print("   Bybit ‚Üî BestChange")
    print("=" * 80)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${Config.MIN_AMOUNT_USD}")
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {Config.MIN_PROFIT_PERCENT}%")
    print(f"üéØ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø: {Config.TOP_OPPORTUNITIES} —Å–≤—è–∑–æ–∫")
    print("=" * 80 + "\n")


def print_opportunities(opportunities: list):
    """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if not opportunities:
        print("\n" + "=" * 80)
        print("‚ùå –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ù–ï –ù–ê–ô–î–ï–ù–û")
        print("=" * 80)
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –†—ã–Ω–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω, –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        print("   ‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–µ–Ω–∞—Ö")
        print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å MIN_PROFIT_PERCENT –≤ .env")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ MIN_AMOUNT_USD –¥–ª—è –ª—É—á—à–∏—Ö –∫—É—Ä—Å–æ–≤")
        return

    print("\n" + "=" * 80)
    print(f"üèÜ –¢–û–ü-{len(opportunities)} –ü–†–ò–ë–´–õ–¨–ù–´–• –°–í–Ø–ó–û–ö")
    print("=" * 80)

    for i, opp in enumerate(opportunities, 1):
        print(f"\n#{i}. {opp['crypto1']} ‚Üí {opp['crypto2']}")
        print(f"   üíµ –ü—Ä–∏–±—ã–ª—å: ${opp['net_profit']} ({opp['profit_percent']}%)")
        print(f"   üè¶ –û–±–º–µ–Ω–Ω–∏–∫: {opp['step2_exchange']['exchanger_name']}")
        print(f"   üìà –ö—É—Ä—Å: 1 {opp['crypto1']} = {opp['step2_exchange']['rate']:.8f} {opp['crypto2']}")
        print(f"   üíé –†–µ–∑–µ—Ä–≤: {opp['step2_exchange']['reserve']:.2f} {opp['crypto2']}")

        if opp.get('is_better_than_direct'):
            print(f"   ‚úÖ –í—ã–≥–æ–¥–Ω–µ–µ –ø—Ä—è–º–æ–≥–æ –æ–±–º–µ–Ω–∞ –Ω–∞ ${opp['advantage_over_direct']:.2f}")
        else:
            print(f"   ‚ö†Ô∏è  –ü—Ä—è–º–æ–π –æ–±–º–µ–Ω –Ω–∞ Bybit –≤—ã–≥–æ–¥–Ω–µ–µ –Ω–∞ ${abs(opp['advantage_over_direct']):.2f}")

    print("\n" + "=" * 80)


def print_best_opportunity_details(best: dict):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    print("\n" + "=" * 80)
    print("üìä –î–ï–¢–ê–õ–ò –õ–£–ß–®–ï–ô –í–û–ó–ú–û–ñ–ù–û–°–¢–ò")
    print("=" * 80)

    print(f"\nüîÑ –ú–∞—Ä—à—Ä—É—Ç:")
    print(f"   {best['path']}")

    print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:  ${best['start_usdt']:,.2f}")
    print(f"   –ö–æ–Ω–µ—á–Ω–∞—è —Å—É–º–º–∞:   ${best['final_usdt']:,.2f}")
    print(f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:   ${best['net_profit']:,.2f} ({best['profit_percent']}%)")
    print(f"   –ö–æ–º–∏—Å—Å–∏–∏ (–≤—Å–µ–≥–æ): ${best['total_fees']:,.2f}")

    step1 = best['step1_buy_crypto1']
    print(f"\nüìà –®–ê–ì 1: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Bybit")
    print(f"   –ü–æ–∫—É–ø–∞–µ–º:  {step1['amount_before_withdrawal']:.8f} {step1['crypto']}")
    print(f"   –ó–∞:        ${step1['total_usdt']:,.2f}")
    print(f"   –¶–µ–Ω–∞:      ${step1['price_usdt']:.8f} –∑–∞ 1 {step1['crypto']}")
    print(f"   –ö–æ–º–∏—Å—Å–∏—è:  ${step1['trading_fee']:.2f}")
    print(f"   –í—ã–≤–æ–¥:     ${step1['withdrawal_fee_usd']:.2f} ({step1['withdrawal_fee_crypto']:.8f} {step1['crypto']})")
    print(f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print(f"   –ü–æ–ª—É—á–∏–º:   {step1['amount_after_withdrawal']:.8f} {step1['crypto']}")

    step2 = best['step2_exchange']
    print(f"\nüîÑ –®–ê–ì 2: –û–±–º–µ–Ω –Ω–∞ {step2['exchanger_name']}")
    print(f"   –û—Ç–¥–∞—ë–º:    {step2['from_amount']:.8f} {step2['from_crypto']}")
    print(f"   –ü–æ–ª—É—á–∞–µ–º:  {step2['to_amount']:.8f} {step2['to_crypto']}")
    print(f"   –ö—É—Ä—Å:      1 {step2['from_crypto']} = {step2['rate']:.8f} {step2['to_crypto']}")
    print(f"   –†–µ–∑–µ—Ä–≤:    {step2['reserve']:,.2f} {step2['to_crypto']}")

    step3 = best['step3_sell_crypto2']
    print(f"\nüìâ –®–ê–ì 3: –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ Bybit")
    print(f"   –î–µ–ø–æ–∑–∏—Ç:   {step3['amount_before_deposit']:.8f} {step3['crypto']}")
    print(f"   –ö–æ–º–∏—Å—Å–∏—è:  ${step3['deposit_fee_usd']:.2f} ({step3['deposit_fee_crypto']:.8f} {step3['crypto']})")
    print(f"   –ü—Ä–æ–¥–∞—ë–º:   {step3['amount_after_deposit']:.8f} {step3['crypto']}")
    print(f"   –ü–æ —Ü–µ–Ω–µ:   ${step3['price_usdt']:.8f} –∑–∞ 1 {step3['crypto']}")
    print(f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print(f"   –ü–æ–ª—É—á–∏–º:   ${step3['total_usdt']:,.2f}")

    print(f"\n‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
    for warning in best['warnings']:
        print(f"   {warning}")

    print("\n" + "=" * 80)


def save_results(opportunities: list) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = Config.RESULTS_DIR / f"arbitrage_{timestamp}.json"

    result_data = {
        'scan_info': {
            'timestamp': datetime.now().isoformat(),
            'scan_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_opportunities_found': len(opportunities),
            'profitable_opportunities': len([o for o in opportunities if o['profit_percent'] > 0])
        },
        'config': {
            'min_profit_percent': Config.MIN_PROFIT_PERCENT,
            'min_amount_usd': Config.MIN_AMOUNT_USD,
            'top_opportunities': Config.TOP_OPPORTUNITIES,
            'fees': {
                'bybit_trading_fee': Config.BYBIT_TRADING_FEE,
                'withdrawal_fee_usd': Config.WITHDRAWAL_FEE_USD,
                'deposit_fee_usd': Config.DEPOSIT_FEE_USD
            }
        },
        'opportunities': opportunities
    }

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(result_data, f, indent=2, ensure_ascii=False)

    return str(filename)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print_header()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    bestchange = BestChangeHandler()
    bybit = BybitHandler()
    analyzer = ArbitrageAnalyzer(bestchange, bybit)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BestChange
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å BestChange...")
    if not bestchange.update_data():
        print("\n" + "=" * 80)
        print("‚úó –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê")
        print("=" * 80)
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å BestChange")
        print("\nüí° –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("   1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.bestchange.ru")
        print("   3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –≤ configs.py")
        print("\n" + "=" * 80)
        return

    # –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    opportunities = analyzer.find_opportunities()

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    print_opportunities(opportunities)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if opportunities:
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        filename = save_results(opportunities)
        print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ª—É—á—à–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        print_best_opportunity_details(opportunities[0])
    else:
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å MIN_PROFIT_PERCENT –≤ .env —Ñ–∞–π–ª–µ")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ MIN_AMOUNT_USD –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù")
    print("=" * 80 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("=" * 80 + "\n")
    except Exception as e:
        print(f"\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 80)
        import traceback

        traceback.print_exc()
        print("=" * 80 + "\n")