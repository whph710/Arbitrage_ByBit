import json
from datetime import datetime
from pathlib import Path
from configs import Config
from bestchange_handler import BestChangeHandler
from bybit_handler import BybitHandler
from arbitrage_analyzer import ArbitrageAnalyzer


def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n" + "=" * 80)
    print("üöÄ ARBITRAGE BOT - Bybit ‚Üî BestChange")
    print("=" * 80)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {Config.MIN_PROFIT_PERCENT}%")
    print(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${Config.MIN_AMOUNT_USD}")
    print(f"–¢–æ–ø —Å–≤—è–∑–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {Config.TOP_OPPORTUNITIES}")
    print("=" * 80 + "\n")


def print_opportunities(opportunities: list):
    """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if not opportunities:
        print("\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    print("\n" + "=" * 80)
    print(f"üèÜ –¢–û–ü-{len(opportunities)} –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
    print("=" * 80)

    for i, opp in enumerate(opportunities, 1):
        print(f"\n#{i}. {opp['crypto1']} ‚Üí {opp['crypto2']}")
        print(f"   –ü—Ä–∏–±—ã–ª—å: {opp['profit_percent']}% (${opp['net_profit']})")
        print(f"   –û–±–º–µ–Ω–Ω–∏–∫: {opp['step2_exchange']['exchanger_name']}")
        print(f"   –ö—É—Ä—Å: 1 {opp['crypto1']} = {opp['step2_exchange']['rate']} {opp['crypto2']}")
        print(f"   –†–µ–∑–µ—Ä–≤: {opp['step2_exchange']['reserve']} {opp['crypto2']}")

    print("\n" + "=" * 80)


def save_results(opportunities: list) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = Config.RESULTS_DIR / f"arbitrage_{timestamp}.json"

    result_data = {
        'scan_info': {
            'timestamp': datetime.now().isoformat(),
            'scan_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_opportunities_found': len(opportunities)
        },
        'config': {
            'min_profit_percent': Config.MIN_PROFIT_PERCENT,
            'min_amount_usd': Config.MIN_AMOUNT_USD,
            'top_opportunities': Config.TOP_OPPORTUNITIES,
            'bybit_trading_fee': Config.BYBIT_TRADING_FEE,
            'withdrawal_fee_usd': Config.WITHDRAWAL_FEE_USD,
            'deposit_fee_usd': Config.DEPOSIT_FEE_USD
        },
        'opportunities': opportunities
    }

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(result_data, f, indent=2, ensure_ascii=False)

    return str(filename)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""

    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print_header()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    bestchange = BestChangeHandler()
    bybit = BybitHandler()
    analyzer = ArbitrageAnalyzer(bestchange, bybit)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BestChange
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    if not bestchange.update_data():
        print("\n‚úó –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ BestChange")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return

    # –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    opportunities = analyzer.find_opportunities()

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    print_opportunities(opportunities)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if opportunities:
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        filename = save_results(opportunities)
        print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ª—É—á—à–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        best = opportunities[0]
        print("\n" + "=" * 80)
        print("üìä –î–ï–¢–ê–õ–ò –õ–£–ß–®–ï–ô –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("=" * 80)
        print(f"\nüîÑ –ü—É—Ç—å: {best['path']}")
        print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å—ã:")
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:  ${best['start_usdt']}")
        print(f"   –ö–æ–Ω–µ—á–Ω–∞—è —Å—É–º–º–∞:   ${best['final_usdt']}")
        print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:   ${best['net_profit']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏:  {best['profit_percent']}%")
        print(f"   –ö–æ–º–∏—Å—Å–∏–∏ (–≤—Å–µ–≥–æ): ${best['total_fees']}")

        print(f"\nüìà –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        step1 = best['step1_buy_crypto1']
        print(f"   1. –ö—É–ø–∏—Ç—å –Ω–∞ Bybit:")
        print(f"      {step1['amount']} {step1['crypto']} –∑–∞ ${step1['total_usdt']}")
        print(f"      –¶–µ–Ω–∞: ${step1['price_usdt']} –∑–∞ 1 {step1['crypto']}")

        step2 = best['step2_exchange']
        print(f"\n   2. –û–±–º–µ–Ω—è—Ç—å –Ω–∞ {step2['exchanger_name']}:")
        print(f"      {step2['from_amount']} {step2['from_crypto']} ‚Üí {step2['to_amount']} {step2['to_crypto']}")
        print(f"      –ö—É—Ä—Å: 1 {step2['from_crypto']} = {step2['rate']} {step2['to_crypto']}")
        print(f"      –†–µ–∑–µ—Ä–≤: {step2['reserve']} {step2['to_crypto']}")

        step3 = best['step3_sell_crypto2']
        print(f"\n   3. –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ Bybit:")
        print(f"      {step3['amount']} {step3['crypto']} –∑–∞ ${step3['total_usdt']}")
        print(f"      –¶–µ–Ω–∞: ${step3['price_usdt']} –∑–∞ 1 {step3['crypto']}")

        print("\n" + "=" * 80)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù")
    print("=" * 80 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()