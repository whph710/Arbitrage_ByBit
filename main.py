import asyncio
from datetime import datetime
from configs import START_AMOUNT, MIN_SPREAD, SHOW_TOP, MAX_REASONABLE_SPREAD
from bybit_handler import BybitClientAsync
from results_saver import ResultsSaver


class InternalArbitrageAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ Bybit"""

    def __init__(self, bybit_client):
        self.bybit = bybit_client
        self.found_count = 0
        self.checked_count = 0

    async def find_arbitrage_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            max_spread: float = 50.0,
            check_triangular: bool = True,
            check_quadrilateral: bool = True
    ):
        """–ò—â–µ—Ç –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        print(f"\n[Analyzer] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ Bybit")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, —Å–ø—Ä–µ–¥ = {min_spread}%-{max_spread}%")

        opportunities = []
        self.found_count = 0
        self.checked_count = 0

        # –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂
        if check_triangular:
            print("\n" + "=" * 100)
            print("[Analyzer] üî∫ –ü–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: USDT -> A -> B -> USDT")
            print("=" * 100)

            tri_opps = await self._find_triangular_arbitrage(start_amount, min_spread, max_spread)
            opportunities.extend(tri_opps)

            print("=" * 100)
            print(f"[Analyzer] ‚úì –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π: –Ω–∞–π–¥–µ–Ω–æ {len(tri_opps)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        # –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂
        if check_quadrilateral:
            print("=" * 100)
            print("[Analyzer] üî∂ –ü–æ–∏—Å–∫ —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: USDT -> A -> B -> C -> USDT")
            print("=" * 100)

            quad_opps = await self._find_quadrilateral_arbitrage(start_amount, min_spread, max_spread)
            opportunities.extend(quad_opps)

            print("=" * 100)
            print(f"[Analyzer] ‚úì –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π: –Ω–∞–π–¥–µ–Ω–æ {len(quad_opps)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        return opportunities

    def _get_exchange_rate(self, from_coin: str, to_coin: str) -> float:
        """
        –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ from_coin -> to_coin

        –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏:
        1. –ü—Ä—è–º—É—é –ø–∞—Ä—É from_coin/to_coin
        2. –û–±—Ä–∞—Ç–Ω—É—é –ø–∞—Ä—É to_coin/from_coin (–∏ –±–µ—Ä—ë—Ç 1/price)
        3. –ß–µ—Ä–µ–∑ USDT: from_coin/USDT –∏ to_coin/USDT
        """
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–∞—è –ø–∞—Ä–∞
        direct_price = self.bybit.get_price(from_coin, to_coin)
        if direct_price is not None and direct_price > 0:
            return direct_price

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ß–µ—Ä–µ–∑ USDT (–µ—Å–ª–∏ –æ–±–µ –º–æ–Ω–µ—Ç—ã –∏–º–µ—é—Ç USDT –ø–∞—Ä—ã)
        if from_coin != 'USDT' and to_coin != 'USDT':
            from_usdt_price = self.bybit.usdt_pairs.get(from_coin)
            to_usdt_price = self.bybit.usdt_pairs.get(to_coin)

            if from_usdt_price and to_usdt_price and from_usdt_price > 0 and to_usdt_price > 0:
                # –ö—É—Ä—Å: from_coin -> USDT -> to_coin
                return from_usdt_price / to_usdt_price

        return None

    async def _find_triangular_arbitrage(self, start_amount, min_spread, max_spread):
        """
        –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: USDT -> CoinA -> CoinB -> USDT

        –ò–°–ü–†–ê–í–õ–ï–ù–û:
        - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä
        - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        """
        opportunities = []
        usdt_coins = list(self.bybit.usdt_pairs.keys())

        print(f"[Triangular] –ú–æ–Ω–µ—Ç —Å USDT-–ø–∞—Ä–∞–º–∏: {len(usdt_coins)}")

        for i, coin_a in enumerate(usdt_coins):
            # –®–∞–≥ 1: USDT -> CoinA
            price_usdt_to_a = self.bybit.usdt_pairs.get(coin_a)
            if not price_usdt_to_a or price_usdt_to_a <= 0:
                continue

            amount_a = start_amount / price_usdt_to_a

            for coin_b in usdt_coins[i + 1:]:
                if coin_a == coin_b:
                    continue

                self.checked_count += 1

                if self.checked_count % 500 == 0:
                    print(f"[Triangular] üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.checked_count} | –ù–∞–π–¥–µ–Ω–æ: {self.found_count}")

                # –®–∞–≥ 2: CoinA -> CoinB (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                price_a_to_b = self._get_exchange_rate(coin_a, coin_b)
                if price_a_to_b is None or price_a_to_b <= 0:
                    continue

                amount_b = amount_a * price_a_to_b

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if amount_b <= 0:
                    continue

                # –®–∞–≥ 3: CoinB -> USDT
                price_b_to_usdt = self.bybit.usdt_pairs.get(coin_b)
                if not price_b_to_usdt or price_b_to_usdt <= 0:
                    continue

                final_usdt = amount_b * price_b_to_usdt

                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if final_usdt <= 0:
                    continue

                spread = ((final_usdt - start_amount) / start_amount) * 100

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                if spread < min_spread or spread > max_spread:
                    continue

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ –¥–∞–Ω–Ω—ã—Ö)
                if abs(spread) > 100:
                    continue

                opp = {
                    'type': 'triangular',
                    'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                    'scheme': 'Bybit Internal',
                    'coins': [coin_a, coin_b],
                    'initial': start_amount,
                    'final': final_usdt,
                    'profit': final_usdt - start_amount,
                    'spread': spread,
                    'steps': [
                        f"1Ô∏è‚É£  –ö—É–ø–∏—Ç—å {amount_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT (–∫—É—Ä—Å: 1 {coin_a} = {price_usdt_to_a:.8f} USDT)",
                        f"2Ô∏è‚É£  –û–±–º–µ–Ω—è—Ç—å {amount_a:.8f} {coin_a} –Ω–∞ {amount_b:.8f} {coin_b} (–∫—É—Ä—Å: 1 {coin_a} = {price_a_to_b:.8f} {coin_b})",
                        f"3Ô∏è‚É£  –ü—Ä–æ–¥–∞—Ç—å {amount_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT (–∫—É—Ä—Å: 1 {coin_b} = {price_b_to_usdt:.8f} USDT)"
                    ],
                    'timestamp': datetime.now().isoformat()
                }

                opportunities.append(opp)
                self.found_count += 1
                self._print_opportunity(opp, self.found_count)

        return opportunities

    async def _find_quadrilateral_arbitrage(self, start_amount, min_spread, max_spread):
        """
        –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: USDT -> CoinA -> CoinB -> CoinC -> USDT

        –ò–°–ü–†–ê–í–õ–ï–ù–û:
        - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤—Å–µ—Ö –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä
        - –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
        """
        opportunities = []
        usdt_coins = list(self.bybit.usdt_pairs.keys())

        print(f"[Quadrilateral] –ú–æ–Ω–µ—Ç —Å USDT-–ø–∞—Ä–∞–º–∏: {len(usdt_coins)}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-100 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        top_coins = usdt_coins[:100]
        quad_checked = 0

        for coin_a in top_coins:
            # –®–∞–≥ 1: USDT -> CoinA
            price_usdt_to_a = self.bybit.usdt_pairs.get(coin_a)
            if not price_usdt_to_a or price_usdt_to_a <= 0:
                continue

            amount_a = start_amount / price_usdt_to_a

            # –ù–∞—Ö–æ–¥–∏–º –º–æ–Ω–µ—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ coin_a –º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è
            for coin_b in top_coins:
                if coin_b == coin_a or coin_b == 'USDT':
                    continue

                # –®–∞–≥ 2: CoinA -> CoinB (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                price_a_to_b = self._get_exchange_rate(coin_a, coin_b)
                if price_a_to_b is None or price_a_to_b <= 0:
                    continue

                amount_b = amount_a * price_a_to_b
                if amount_b <= 0:
                    continue

                for coin_c in top_coins:
                    if coin_c in [coin_a, coin_b, 'USDT']:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CoinC –∏–º–µ–µ—Ç USDT –ø–∞—Ä—É
                    if coin_c not in self.bybit.usdt_pairs:
                        continue

                    quad_checked += 1

                    if quad_checked % 1000 == 0:
                        print(f"[Quadrilateral] üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {quad_checked} | –ù–∞–π–¥–µ–Ω–æ: {self.found_count}")

                    # –®–∞–≥ 3: CoinB -> CoinC (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                    price_b_to_c = self._get_exchange_rate(coin_b, coin_c)
                    if price_b_to_c is None or price_b_to_c <= 0:
                        continue

                    amount_c = amount_b * price_b_to_c
                    if amount_c <= 0:
                        continue

                    # –®–∞–≥ 4: CoinC -> USDT
                    price_c_to_usdt = self.bybit.usdt_pairs.get(coin_c)
                    if not price_c_to_usdt or price_c_to_usdt <= 0:
                        continue

                    final_usdt = amount_c * price_c_to_usdt
                    if final_usdt <= 0:
                        continue

                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                    if spread < min_spread or spread > max_spread:
                        continue

                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π
                    if abs(spread) > 100:
                        continue

                    opp = {
                        'type': 'quadrilateral',
                        'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí {coin_c} ‚Üí USDT",
                        'scheme': 'Bybit Internal (4-way)',
                        'coins': [coin_a, coin_b, coin_c],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread,
                        'steps': [
                            f"1Ô∏è‚É£  –ö—É–ø–∏—Ç—å {amount_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT",
                            f"2Ô∏è‚É£  –û–±–º–µ–Ω—è—Ç—å {amount_a:.8f} {coin_a} –Ω–∞ {amount_b:.8f} {coin_b}",
                            f"3Ô∏è‚É£  –û–±–º–µ–Ω—è—Ç—å {amount_b:.8f} {coin_b} –Ω–∞ {amount_c:.8f} {coin_c}",
                            f"4Ô∏è‚É£  –ü—Ä–æ–¥–∞—Ç—å {amount_c:.8f} {coin_c} –∑–∞ {final_usdt:.2f} USDT"
                        ],
                        'timestamp': datetime.now().isoformat()
                    }

                    opportunities.append(opp)
                    self.found_count += 1
                    self._print_opportunity(opp, self.found_count)

        return opportunities

    def _print_opportunity(self, opp, rank):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å"""
        icon = "üî∫" if opp['type'] == 'triangular' else "üî∂"
        print(f"\n{icon} –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{rank} ({opp['type'].upper()})")
        print(f"{'‚îÄ' * 100}")
        print(f"   üìç –ü—É—Ç—å: {opp['path']}")
        print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
        print(f"   üíµ ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f}")
        print(f"{'‚îÄ' * 100}")

    async def analyze_specific_path(self, path, start_amount=100.0):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _get_exchange_rate –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
        """
        print(f"\n[Analyzer] üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—É—Ç–∏: {' ‚Üí '.join(path)}")

        if len(path) < 3:
            return {'error': '–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 –º–æ–Ω–µ—Ç—ã'}

        if path[0] != 'USDT' or path[-1] != 'USDT':
            return {'error': '–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT'}

        try:
            current_amount = start_amount
            steps = []

            for i in range(len(path) - 1):
                from_coin = path[i]
                to_coin = path[i + 1]

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
                price = self._get_exchange_rate(from_coin, to_coin)

                if price is None:
                    return {'error': f'–ü–∞—Ä–∞ {from_coin}/{to_coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞'}

                new_amount = current_amount * price
                step_info = f"{i + 1}. {current_amount:.8f} {from_coin} ‚Üí {new_amount:.8f} {to_coin} (–∫—É—Ä—Å: {price:.8f})"
                steps.append(step_info)
                print(f"   {step_info}")

                current_amount = new_amount

            final_usdt = current_amount
            spread = ((final_usdt - start_amount) / start_amount) * 100
            profit = final_usdt - start_amount

            print(f"\n   ‚úÖ –ò—Ç–æ–≥: {spread:.4f}% ({'+' if profit >= 0 else ''}{profit:.4f} USDT)")

            return {
                'success': True,
                'path': ' ‚Üí '.join(path),
                'spread': spread,
                'profit': profit,
                'final': final_usdt
            }

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}


# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

async def main():
    print("=" * 100)
    print("üöÄ CRYPTO ARBITRAGE BOT v6.0 ‚Äî –í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–û–ô –ê–†–ë–ò–¢–†–ê–ñ –ù–ê BYBIT")
    print("=" * 100)

    start_time = datetime.now()
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${START_AMOUNT}")
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {MIN_SPREAD}%")
    print(f"üéØ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø: {SHOW_TOP} —Å–≤—è–∑–æ–∫")

    print(f"\nüîç –¢–∏–ø—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:")
    print(f"   1Ô∏è‚É£  –¢–†–ï–£–ì–û–õ–¨–ù–´–ô: USDT ‚Üí LTC ‚Üí BNB ‚Üí USDT (3 —Å–¥–µ–ª–∫–∏)")
    print(f"   2Ô∏è‚É£  –ß–ï–¢–´–†–ï–•–£–ì–û–õ–¨–ù–´–ô: USDT ‚Üí BTC ‚Üí ETH ‚Üí BNB ‚Üí USDT (4 —Å–¥–µ–ª–∫–∏)\n")

    print("=" * 100)
    print("üìä –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° BYBIT")
    print("=" * 100)

    async with BybitClientAsync() as bybit:
        await bybit.load_usdt_pairs()

        print(f"\n[Bybit] ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bybit.usdt_pairs)} USDT-–ø–∞—Ä")
        print(f"[Bybit] ‚úì –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç: {len(bybit.coins)}")
        print(f"[Bybit] ‚úì –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(bybit.trading_pairs)}")

        if len(bybit.trading_pairs) == 0:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã!")
            return

        print("\n" + "=" * 100)
        print("üìä –®–ê–ì 2: –¢–ï–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ú–ï–†–û–í")
        print("=" * 100)

        analyzer = InternalArbitrageAnalyzer(bybit)

        print("\nüî¨ –ü—Ä–∏–º–µ—Ä 1: –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂")
        await analyzer.analyze_specific_path(['USDT', 'BTC', 'ETH', 'USDT'], START_AMOUNT)

        print("\nüî¨ –ü—Ä–∏–º–µ—Ä 2: –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂")
        await analyzer.analyze_specific_path(['USDT', 'BTC', 'ETH', 'BNB', 'USDT'], START_AMOUNT)

        print("\n" + "=" * 100)
        print("üìä –®–ê–ì 3: –ü–û–ò–°–ö –í–°–ï–• –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 100)
        print("\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ –º–µ—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...\n")

        opportunities = await analyzer.find_arbitrage_opportunities(
            start_amount=START_AMOUNT,
            min_spread=MIN_SPREAD,
            max_spread=MAX_REASONABLE_SPREAD,
            check_triangular=True,
            check_quadrilateral=True
        )

        if opportunities:
            opportunities.sort(key=lambda x: x['profit'], reverse=True)

            print("\n" + "=" * 100)
            print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            print("=" * 100)

            print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(opportunities)} —Å–≤—è–∑–æ–∫")
            print(f"\nüèÜ –¢–û–ü-{min(SHOW_TOP, len(opportunities))} –õ–£–ß–®–ò–•:")
            print("=" * 100)

            for idx, opp in enumerate(opportunities[:SHOW_TOP], 1):
                icon = "üî∫" if opp['type'] == 'triangular' else "üî∂"
                print(f"\n#{idx} {icon} | {opp['path']}")
                print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
                print(f"   üíµ ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f}")

            print("\n" + "=" * 100)
            print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
            print("=" * 100)

            end_time = datetime.now()
            elapsed = (end_time - start_time).total_seconds()

            saver = ResultsSaver()
            saved_files = saver.save_opportunities(
                opportunities=opportunities,
                start_amount=START_AMOUNT,
                min_spread=MIN_SPREAD,
                execution_time=elapsed,
                save_formats=['json', 'txt', 'csv', 'html']
            )

            print("\nüìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            for fmt, path in saved_files.items():
                print(f"   ‚Ä¢ {fmt.upper()} ‚Üí {path}")

        else:
            print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    end_time = datetime.now()
    elapsed = (end_time - start_time).total_seconds()

    print("\n" + "=" * 100)
    print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù –ó–ê {elapsed:.2f} –°–ï–ö–£–ù–î")
    print("=" * 100)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚õî –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()