import asyncio
from typing import List, Dict
from datetime import datetime


class ArbitrageAnalyzerAsync:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Bybit, Binance –∏ BestChange"""

    def __init__(self, bybit_client, binance_client, bestchange_client):
        self.bybit = bybit_client
        self.binance = binance_client
        self.bestchange = bestchange_client

    async def find_circular_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.5,
            top_count: int = 10
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –∫—Ä—É–≥–æ–≤—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ö–µ–º–∞–º:
        1. Bybit ‚Üí BestChange ‚Üí Bybit (USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT)
        2. Binance ‚Üí BestChange ‚Üí Binance (USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT)
        3. Bybit ‚Üí BestChange ‚Üí Binance (USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT)
        4. Binance ‚Üí BestChange ‚Üí Bybit (USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT)
        5. Bybit ‚Üí Binance (–ø—Ä—è–º–∞—è —Å–≤—è–∑–∫–∞) (USDT ‚Üí Coin ‚Üí USDT)
        """

        print(f"\n[Analyzer] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ = {min_spread}%")

        opportunities = []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º
        opportunities.extend(await self._find_exchange_bestchange_exchange(
            start_amount, min_spread, "Bybit", self.bybit.usdt_pairs, self.bybit.usdt_pairs
        ))

        opportunities.extend(await self._find_exchange_bestchange_exchange(
            start_amount, min_spread, "Binance", self.binance.usdt_pairs, self.binance.usdt_pairs
        ))

        opportunities.extend(await self._find_cross_exchange_bestchange(
            start_amount, min_spread, "Bybit", "Binance", self.bybit.usdt_pairs, self.binance.usdt_pairs
        ))

        opportunities.extend(await self._find_cross_exchange_bestchange(
            start_amount, min_spread, "Binance", "Bybit", self.binance.usdt_pairs, self.bybit.usdt_pairs
        ))

        opportunities.extend(await self._find_direct_exchange_arbitrage(
            start_amount, min_spread
        ))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        opportunities.sort(key=lambda x: x['spread'], reverse=True)
        top_opportunities = opportunities[:top_count]

        self._print_results(top_opportunities, min_spread, start_amount)

        return top_opportunities

    async def _find_exchange_bestchange_exchange(
            self,
            start_amount: float,
            min_spread: float,
            exchange_name: str,
            buy_prices: Dict[str, float],
            sell_prices: Dict[str, float]
    ) -> List[Dict]:
        """
        –°—Ö–µ–º–∞: Exchange ‚Üí BestChange ‚Üí Exchange
        –ù–∞–ø—Ä–∏–º–µ—Ä: Bybit (USDT‚ÜíCoinA) ‚Üí BestChange (CoinA‚ÜíCoinB) ‚Üí Bybit (CoinB‚ÜíUSDT)
        """

        print(f"\n[Analyzer] üîÑ –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã: {exchange_name} ‚Üí BestChange ‚Üí {exchange_name}")

        opportunities = []
        rates = self.bestchange.rates

        if not buy_prices or not rates:
            return opportunities

        common_coins = set(buy_prices.keys()) & set(rates.keys())
        checked = 0

        for coin_a in common_coins:
            for coin_b in common_coins:
                if coin_b == coin_a:
                    continue

                if coin_a not in rates or coin_b not in rates.get(coin_a, {}):
                    continue

                exch_list_ab = rates[coin_a][coin_b]
                if not exch_list_ab:
                    continue

                try:
                    checked += 1

                    # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ –±–∏—Ä–∂–µ
                    price_a = buy_prices[coin_a]
                    if price_a <= 0:
                        continue
                    amount_a = start_amount / price_a

                    # –®–∞–≥ 2: CoinA ‚Üí CoinB –Ω–∞ BestChange
                    bestchange_rate = exch_list_ab[0]['rate']
                    if bestchange_rate <= 0:
                        continue
                    amount_b = amount_a / bestchange_rate

                    # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ –±–∏—Ä–∂–µ
                    if coin_b not in sell_prices:
                        continue
                    price_b = sell_prices[coin_b]
                    if price_b <= 0:
                        continue

                    final_usdt = amount_b * price_b
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread < min_spread:
                        continue

                    opportunities.append({
                        'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                        'scheme': f"{exchange_name} ‚Üí BestChange ‚Üí {exchange_name}",
                        'coins': [coin_a, coin_b],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread,
                        'steps': [
                            f"1. [{exchange_name}] –ö—É–ø–∏—Ç—å {amount_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT (—Ü–µ–Ω–∞: ${price_a:.8f})",
                            f"2. [BestChange] –û–±–º–µ–Ω—è—Ç—å {amount_a:.8f} {coin_a} ‚Üí {amount_b:.8f} {coin_b}",
                            f"   –ö—É—Ä—Å: {bestchange_rate:.6f}, –û–±–º–µ–Ω–Ω–∏–∫: {exch_list_ab[0]['exchanger']}",
                            f"3. [{exchange_name}] –ü—Ä–æ–¥–∞—Ç—å {amount_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT (—Ü–µ–Ω–∞: ${price_b:.8f})"
                        ],
                        'debug': {
                            'buy_exchange': exchange_name,
                            'sell_exchange': exchange_name,
                            'buy_price_a': price_a,
                            'sell_price_b': price_b,
                            'bestchange_rate': bestchange_rate,
                            'exchanger': exch_list_ab[0]['exchanger'],
                            'reserve': exch_list_ab[0].get('reserve', 0)
                        }
                    })

                except (KeyError, ZeroDivisionError, TypeError):
                    continue

        print(f"[Analyzer]   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—É—Ç–µ–π: {checked}, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
        return opportunities

    async def _find_cross_exchange_bestchange(
            self,
            start_amount: float,
            min_spread: float,
            buy_exchange: str,
            sell_exchange: str,
            buy_prices: Dict[str, float],
            sell_prices: Dict[str, float]
    ) -> List[Dict]:
        """
        –°—Ö–µ–º–∞: Exchange1 ‚Üí BestChange ‚Üí Exchange2
        –ù–∞–ø—Ä–∏–º–µ—Ä: Bybit (USDT‚ÜíCoinA) ‚Üí BestChange (CoinA‚ÜíCoinB) ‚Üí Binance (CoinB‚ÜíUSDT)
        """

        print(f"\n[Analyzer] üîÑ –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã: {buy_exchange} ‚Üí BestChange ‚Üí {sell_exchange}")

        opportunities = []
        rates = self.bestchange.rates

        if not buy_prices or not sell_prices or not rates:
            return opportunities

        common_buy = set(buy_prices.keys()) & set(rates.keys())
        checked = 0

        for coin_a in common_buy:
            for coin_b in set(sell_prices.keys()):
                if coin_b == coin_a:
                    continue

                if coin_a not in rates or coin_b not in rates.get(coin_a, {}):
                    continue

                exch_list_ab = rates[coin_a][coin_b]
                if not exch_list_ab:
                    continue

                try:
                    checked += 1

                    # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
                    price_a = buy_prices[coin_a]
                    if price_a <= 0:
                        continue
                    amount_a = start_amount / price_a

                    # –®–∞–≥ 2: CoinA ‚Üí CoinB –Ω–∞ BestChange
                    bestchange_rate = exch_list_ab[0]['rate']
                    if bestchange_rate <= 0:
                        continue
                    amount_b = amount_a / bestchange_rate

                    # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
                    price_b = sell_prices[coin_b]
                    if price_b <= 0:
                        continue

                    final_usdt = amount_b * price_b
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread < min_spread:
                        continue

                    opportunities.append({
                        'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                        'scheme': f"{buy_exchange} ‚Üí BestChange ‚Üí {sell_exchange}",
                        'coins': [coin_a, coin_b],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread,
                        'steps': [
                            f"1. [{buy_exchange}] –ö—É–ø–∏—Ç—å {amount_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT (—Ü–µ–Ω–∞: ${price_a:.8f})",
                            f"2. [BestChange] –û–±–º–µ–Ω—è—Ç—å {amount_a:.8f} {coin_a} ‚Üí {amount_b:.8f} {coin_b}",
                            f"   –ö—É—Ä—Å: {bestchange_rate:.6f}, –û–±–º–µ–Ω–Ω–∏–∫: {exch_list_ab[0]['exchanger']}",
                            f"3. [{sell_exchange}] –ü—Ä–æ–¥–∞—Ç—å {amount_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT (—Ü–µ–Ω–∞: ${price_b:.8f})"
                        ],
                        'debug': {
                            'buy_exchange': buy_exchange,
                            'sell_exchange': sell_exchange,
                            'buy_price_a': price_a,
                            'sell_price_b': price_b,
                            'bestchange_rate': bestchange_rate,
                            'exchanger': exch_list_ab[0]['exchanger'],
                            'reserve': exch_list_ab[0].get('reserve', 0)
                        }
                    })

                except (KeyError, ZeroDivisionError, TypeError):
                    continue

        print(f"[Analyzer]   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—É—Ç–µ–π: {checked}, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
        return opportunities

    async def _find_direct_exchange_arbitrage(
            self,
            start_amount: float,
            min_spread: float
    ) -> List[Dict]:
        """
        –°—Ö–µ–º–∞: –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ (–æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        Bybit ‚Üí Binance –ò Binance ‚Üí Bybit
        """

        print(f"\n[Analyzer] üîÑ –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã: –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ Bybit ‚Üî Binance")

        opportunities = []

        bybit_prices = self.bybit.usdt_pairs
        binance_prices = self.binance.usdt_pairs

        if not bybit_prices or not binance_prices:
            return opportunities

        common_coins = set(bybit_prices.keys()) & set(binance_prices.keys())
        checked = 0

        for coin in common_coins:
            try:
                checked += 1

                bybit_price = bybit_prices[coin]
                binance_price = binance_prices[coin]

                if bybit_price <= 0 or binance_price <= 0:
                    continue

                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Bybit, –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ Binance
                amount_coin_1 = start_amount / bybit_price
                final_usdt_1 = amount_coin_1 * binance_price
                spread_1 = ((final_usdt_1 - start_amount) / start_amount) * 100

                if spread_1 >= min_spread:
                    opportunities.append({
                        'path': f"USDT ‚Üí {coin} ‚Üí USDT",
                        'scheme': "Bybit ‚Üí Binance (–ø—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂)",
                        'coins': [coin],
                        'initial': start_amount,
                        'final': final_usdt_1,
                        'profit': final_usdt_1 - start_amount,
                        'spread': spread_1,
                        'steps': [
                            f"1. [Bybit] –ö—É–ø–∏—Ç—å {amount_coin_1:.8f} {coin} –∑–∞ {start_amount:.2f} USDT (—Ü–µ–Ω–∞: ${bybit_price:.8f})",
                            f"2. –ü–µ—Ä–µ–≤–æ–¥ {coin} —Å Bybit –Ω–∞ Binance",
                            f"3. [Binance] –ü—Ä–æ–¥–∞—Ç—å {amount_coin_1:.8f} {coin} –∑–∞ {final_usdt_1:.2f} USDT (—Ü–µ–Ω–∞: ${binance_price:.8f})"
                        ],
                        'debug': {
                            'buy_exchange': 'Bybit',
                            'sell_exchange': 'Binance',
                            'buy_price': bybit_price,
                            'sell_price': binance_price,
                            'price_diff': binance_price - bybit_price,
                            'price_diff_percent': ((binance_price - bybit_price) / bybit_price) * 100
                        }
                    })

                # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Binance, –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ Bybit
                amount_coin_2 = start_amount / binance_price
                final_usdt_2 = amount_coin_2 * bybit_price
                spread_2 = ((final_usdt_2 - start_amount) / start_amount) * 100

                if spread_2 >= min_spread:
                    opportunities.append({
                        'path': f"USDT ‚Üí {coin} ‚Üí USDT",
                        'scheme': "Binance ‚Üí Bybit (–ø—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂)",
                        'coins': [coin],
                        'initial': start_amount,
                        'final': final_usdt_2,
                        'profit': final_usdt_2 - start_amount,
                        'spread': spread_2,
                        'steps': [
                            f"1. [Binance] –ö—É–ø–∏—Ç—å {amount_coin_2:.8f} {coin} –∑–∞ {start_amount:.2f} USDT (—Ü–µ–Ω–∞: ${binance_price:.8f})",
                            f"2. –ü–µ—Ä–µ–≤–æ–¥ {coin} —Å Binance –Ω–∞ Bybit",
                            f"3. [Bybit] –ü—Ä–æ–¥–∞—Ç—å {amount_coin_2:.8f} {coin} –∑–∞ {final_usdt_2:.2f} USDT (—Ü–µ–Ω–∞: ${bybit_price:.8f})"
                        ],
                        'debug': {
                            'buy_exchange': 'Binance',
                            'sell_exchange': 'Bybit',
                            'buy_price': binance_price,
                            'sell_price': bybit_price,
                            'price_diff': bybit_price - binance_price,
                            'price_diff_percent': ((bybit_price - binance_price) / binance_price) * 100
                        }
                    })

            except (KeyError, ZeroDivisionError, TypeError):
                continue

        print(f"[Analyzer]   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–Ω–µ—Ç: {checked}, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
        return opportunities

    def _print_results(self, opportunities: List[Dict], min_spread: float, start_amount: float):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""

        if opportunities:
            print("\n" + "=" * 100)
            print(f"üéØ –¢–û–ü-{len(opportunities)} –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
            print("=" * 100 + "\n")

            for idx, opp in enumerate(opportunities, 1):
                print(f"#{idx} | –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
                print(f"    –°—Ö–µ–º–∞: {opp['scheme']}")
                print(f"    –ü—É—Ç—å: {opp['path']}")
                print(f"    –î–µ—Ç–∞–ª–∏:")
                for step in opp['steps']:
                    print(f"       {step}")

                if 'debug' in opp and 'reserve' in opp['debug']:
                    reserve = opp['debug'].get('reserve', 0)
                    if reserve > 0:
                        print(f"    üí∞ –†–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞: ${reserve:.2f}")
                print()
        else:
            print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {min_spread}% –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   1. –£–º–µ–Ω—å—à–∏—Ç–µ MIN_SPREAD –≤ configs.py (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ 0.1% –∏–ª–∏ –¥–∞–∂–µ 0.01%)")
            print(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ API –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print(f"   3. –£—á—Ç–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂ (~0.1-0.2%) –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ (~0.5-2%)")
            print(f"   4. –£—á—Ç–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≤—ã–≤–æ–¥ –∏ –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏")