import asyncio
from typing import List, Dict
from datetime import datetime


class ArbitrageAnalyzerAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä—É–≥–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (3-—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–µ —Ü–µ–ø–æ—á–∫–∏)"""

    def __init__(self, bybit_client, bestchange_client):
        self.bybit = bybit_client
        self.bestchange = bestchange_client

    async def find_circular_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.5,
            top_count: int = 10
    ) -> List[Dict]:
        """–ò—â–µ—Ç –∫—Ä—É–≥–æ–≤—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 2 –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã"""

        print(f"[Analyzer] –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫—Ä—É–≥–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT)")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ = {min_spread}%")

        bybit_prices = self.bybit.usdt_pairs
        rates = self.bestchange.rates

        if not bybit_prices or not rates:
            print("[Analyzer] –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ Bybit –∏–ª–∏ BestChange –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return []

        common_coins = set(bybit_prices.keys()) & set(rates.keys())
        print(f"[Analyzer] –ù–∞–π–¥–µ–Ω–æ –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(common_coins)}")

        if not common_coins:
            print("[Analyzer] –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return []

        opportunities = []
        checked_paths = 0

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –¥–æ –¥–≤—É—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç
        for coin_a in common_coins:
            for coin_b in common_coins:
                if coin_b == coin_a:
                    continue

                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ CoinA -> CoinB
                if coin_a not in rates or coin_b not in rates.get(coin_a, {}):
                    continue

                exch_list_ab = rates[coin_a][coin_b]
                if not exch_list_ab:
                    continue

                try:
                    checked_paths += 1

                    # –®–∞–≥ 1: USDT -> CoinA –Ω–∞ Bybit (–ø–æ–∫—É–ø–∞–µ–º CoinA)
                    price_a = bybit_prices[coin_a]
                    if price_a <= 0:
                        continue
                    amount_a = start_amount / price_a

                    # –®–∞–≥ 2: CoinA -> CoinB –Ω–∞ BestChange
                    # rate –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —Å–∫–æ–ª—å–∫–æ CoinB –≤—ã –ü–û–õ–£–ß–ò–¢–ï –∑–∞ 1 CoinA
                    best_rate_ab = exch_list_ab[0]['rate']

                    # –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
                    # –ï—Å–ª–∏ –∫—É—Ä—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>1000000), —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    if best_rate_ab > 1000000:
                        print(f"[Analyzer] ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å {coin_a}‚Üí{coin_b}: {best_rate_ab:.2f} (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
                        continue

                    if best_rate_ab <= 0:
                        continue

                    amount_b = amount_a * best_rate_ab

                    # –®–∞–≥ 3: CoinB -> USDT –Ω–∞ Bybit (–ø—Ä–æ–¥–∞–µ–º CoinB)
                    if coin_b not in bybit_prices:
                        continue
                    price_b = bybit_prices[coin_b]
                    if price_b <= 0:
                        continue

                    final_usdt = amount_b * price_b

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    # –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤ 1000+ —Ä–∞–∑, —ç—Ç–æ —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞
                    if final_usdt > start_amount * 1000:
                        print(f"[Analyzer] ‚ö†Ô∏è –ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {coin_a}‚Üí{coin_b}: "
                              f"${start_amount:.2f} ‚Üí ${final_usdt:.2f} (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
                        continue

                    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread:
                        opportunities.append({
                            'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                            'coins': [coin_a, coin_b],
                            'initial': start_amount,
                            'final': final_usdt,
                            'profit': final_usdt - start_amount,
                            'spread': spread,
                            'steps': [
                                f"1. –ö—É–ø–∏—Ç—å {coin_a} –∑–∞ {start_amount:.2f} USDT –Ω–∞ Bybit (—Ü–µ–Ω–∞: {price_a:.8f})",
                                f"2. –û–±–º–µ–Ω—è—Ç—å {amount_a:.8f} {coin_a} –Ω–∞ {amount_b:.8f} {coin_b} —á–µ—Ä–µ–∑ {exch_list_ab[0]['exchanger']} (–∫—É—Ä—Å: {best_rate_ab:.8f})",
                                f"3. –ü—Ä–æ–¥–∞—Ç—å {amount_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT –Ω–∞ Bybit (—Ü–µ–Ω–∞: {price_b:.8f})"
                            ],
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            'debug': {
                                'bybit_price_a': price_a,
                                'bybit_price_b': price_b,
                                'bestchange_rate': best_rate_ab,
                                'exchanger': exch_list_ab[0]['exchanger'],
                                'reserve': exch_list_ab[0].get('reserve', 0)
                            }
                        })
                except (KeyError, ZeroDivisionError, TypeError) as e:
                    # –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    # print(f"[Analyzer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {coin_a}‚Üí{coin_b}: {e}")
                    continue

        print(f"[Analyzer] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—É—Ç–µ–π: {checked_paths}")
        print(f"[Analyzer] –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {min_spread}%: {len(opportunities)}")

        opportunities.sort(key=lambda x: x['spread'], reverse=True)
        top_opportunities = opportunities[:top_count]

        if top_opportunities:
            print("\n" + "=" * 90)
            print(f"üéØ –¢–û–ü-{len(top_opportunities)} –ö–†–£–ì–û–í–´–• –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
            print("=" * 90 + "\n")

            for idx, opp in enumerate(top_opportunities, 1):
                print(f"#{idx} | –°–ø—Ä–µ–¥: {opp['spread']:.2f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.2f}")
                print(f"    –ü—É—Ç—å: {opp['path']}")
                print(f"    –î–µ—Ç–∞–ª–∏:")
                for step in opp['steps']:
                    print(f"       {step}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if idx <= 3 and 'debug' in opp:
                    reserve = opp['debug'].get('reserve', 0)
                    if reserve > 0:
                        print(f"    üí∞ –†–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞: ${reserve:.2f}")
                print()
        else:
            print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {min_spread}% –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")

        return top_opportunities