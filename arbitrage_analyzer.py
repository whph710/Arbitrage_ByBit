import asyncio
from typing import List, Dict
from datetime import datetime


class ArbitrageAnalyzerAsync:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è Bybit –∏ Binance"""

    def __init__(self, bybit_client, binance_client):
        self.bybit = bybit_client
        self.binance = binance_client
        self.found_count = 0  # –°—á—ë—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

    async def find_arbitrage_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            top_count: int = None
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –≤—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:
        1. –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ (A‚ÜíB, B‚ÜíA)
        2. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ (A: USDT‚ÜíX‚ÜíY‚ÜíUSDT)
        3. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π (A: USDT‚ÜíX, B: X‚ÜíY‚ÜíUSDT)
        """

        print(f"\n[Analyzer] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ = {min_spread}%")

        opportunities = []
        self.found_count = 0

        # 1. –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏
        print("\n[Analyzer] üìä –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ Bybit ‚Üî Binance...")
        print("=" * 100)
        direct_opps = await self._find_direct_arbitrage(start_amount, min_spread, opportunities)
        print("=" * 100)
        print(f"[Analyzer] ‚úì –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂: –Ω–∞–π–¥–µ–Ω–æ {len(direct_opps)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        # 2. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ Bybit
        print("[Analyzer] üî∫ –ü–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ Bybit...")
        print("=" * 100)
        bybit_tri = await self._find_triangular_single_exchange(
            start_amount, min_spread, "Bybit", self.bybit, opportunities
        )
        print("=" * 100)
        print(f"[Analyzer] ‚úì –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π Bybit: –Ω–∞–π–¥–µ–Ω–æ {len(bybit_tri)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        # 3. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ Binance
        print("[Analyzer] üî∫ –ü–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ Binance...")
        print("=" * 100)
        binance_tri = await self._find_triangular_single_exchange(
            start_amount, min_spread, "Binance", self.binance, opportunities
        )
        print("=" * 100)
        print(f"[Analyzer] ‚úì –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π Binance: –Ω–∞–π–¥–µ–Ω–æ {len(binance_tri)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        # 4. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π (Bybit ‚Üí Binance)
        print("[Analyzer] üîÄ –ü–æ–∏—Å–∫ –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ Bybit ‚Üí Binance...")
        print("=" * 100)
        cross_bb = await self._find_triangular_cross_exchange(
            start_amount, min_spread, "Bybit", "Binance",
            self.bybit, self.binance, opportunities
        )
        print("=" * 100)
        print(f"[Analyzer] ‚úì –ö—Ä–æ—Å—Å Bybit‚ÜíBinance: –Ω–∞–π–¥–µ–Ω–æ {len(cross_bb)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        # 5. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π (Binance ‚Üí Bybit)
        print("[Analyzer] üîÄ –ü–æ–∏—Å–∫ –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ Binance ‚Üí Bybit...")
        print("=" * 100)
        cross_ab = await self._find_triangular_cross_exchange(
            start_amount, min_spread, "Binance", "Bybit",
            self.binance, self.bybit, opportunities
        )
        print("=" * 100)
        print(f"[Analyzer] ‚úì –ö—Ä–æ—Å—Å Binance‚ÜíBybit: –Ω–∞–π–¥–µ–Ω–æ {len(cross_ab)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        return opportunities

    async def _find_direct_arbitrage(
            self,
            start_amount: float,
            min_spread: float,
            opportunities: List[Dict]
    ) -> List[Dict]:
        """
        –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏:
        - Bybit ‚Üí Binance
        - Binance ‚Üí Bybit

        –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–æ–Ω–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –û–ë–ï–ò–• –±–∏—Ä–∂–∞—Ö!
        """
        local_opps = []

        bybit_prices = self.bybit.usdt_pairs
        binance_prices = self.binance.usdt_pairs

        if not bybit_prices or not binance_prices:
            return local_opps

        # –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –ù–ê –û–ë–ï–ò–• –±–∏—Ä–∂–∞—Ö
        common_coins = set(bybit_prices.keys()) & set(binance_prices.keys())

        print(f"[Direct] –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(common_coins)} –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç...")

        for coin in common_coins:
            try:
                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ü–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                bybit_price = bybit_prices.get(coin)
                binance_price = binance_prices.get(coin)

                if not bybit_price or not binance_price:
                    continue

                if bybit_price <= 0 or binance_price <= 0:
                    continue

                # –§–∏–ª—å—Ç—Ä –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω (—Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 20x = –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
                price_ratio = max(bybit_price, binance_price) / min(bybit_price, binance_price)
                if price_ratio > 20.0:
                    continue

                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Bybit ‚Üí –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ Binance
                amount_coin = start_amount / bybit_price
                final_usdt = amount_coin * binance_price
                spread = ((final_usdt - start_amount) / start_amount) * 100

                # –§–∏–ª—å—Ç—Ä –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
                if spread >= min_spread and spread < 100.0:
                    opp = {
                        'type': 'direct',
                        'path': f"USDT ‚Üí {coin} ‚Üí USDT",
                        'scheme': "Bybit ‚Üí Binance",
                        'coins': [coin],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread,
                        'steps': [
                            f"1. –ü–æ–∫—É–ø–∫–∞ {amount_coin:.6f} {coin} –Ω–∞ Bybit –ø–æ —Ü–µ–Ω–µ ${bybit_price:.6f}",
                            f"2. –ü–µ—Ä–µ–≤–æ–¥ {amount_coin:.6f} {coin} —Å Bybit –Ω–∞ Binance",
                            f"3. –ü—Ä–æ–¥–∞–∂–∞ {amount_coin:.6f} {coin} –Ω–∞ Binance –ø–æ —Ü–µ–Ω–µ ${binance_price:.6f}"
                        ],
                        'bybit_price': bybit_price,
                        'binance_price': binance_price
                    }
                    local_opps.append(opp)
                    opportunities.append(opp)
                    self._print_found_opportunity(opp)

                # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Binance ‚Üí –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ Bybit
                amount_coin = start_amount / binance_price
                final_usdt = amount_coin * bybit_price
                spread = ((final_usdt - start_amount) / start_amount) * 100

                # –§–∏–ª—å—Ç—Ä –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
                if spread >= min_spread and spread < 100.0:
                    opp = {
                        'type': 'direct',
                        'path': f"USDT ‚Üí {coin} ‚Üí USDT",
                        'scheme': "Binance ‚Üí Bybit",
                        'coins': [coin],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread,
                        'steps': [
                            f"1. –ü–æ–∫—É–ø–∫–∞ {amount_coin:.6f} {coin} –Ω–∞ Binance –ø–æ —Ü–µ–Ω–µ ${binance_price:.6f}",
                            f"2. –ü–µ—Ä–µ–≤–æ–¥ {amount_coin:.6f} {coin} —Å Binance –Ω–∞ Bybit",
                            f"3. –ü—Ä–æ–¥–∞–∂–∞ {amount_coin:.6f} {coin} –Ω–∞ Bybit –ø–æ —Ü–µ–Ω–µ ${bybit_price:.6f}"
                        ],
                        'bybit_price': bybit_price,
                        'binance_price': binance_price
                    }
                    local_opps.append(opp)
                    opportunities.append(opp)
                    self._print_found_opportunity(opp)

            except (KeyError, ZeroDivisionError, TypeError):
                continue

        return local_opps

    async def _find_triangular_single_exchange(
            self,
            start_amount: float,
            min_spread: float,
            exchange_name: str,
            exchange_client,
            opportunities: List[Dict]
    ) -> List[Dict]:
        """
        –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ:
        USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT
        """
        local_opps = []
        usdt_pairs = exchange_client.usdt_pairs
        coins = list(usdt_pairs.keys())

        print(f"[{exchange_name}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö —Å–≤—è–∑–æ–∫...")

        for i, coin_a in enumerate(coins):
            for coin_b in coins[i + 1:]:
                if coin_a == coin_b:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞ CoinA/CoinB
                if not exchange_client.has_trading_pair(coin_a, coin_b):
                    continue

                try:
                    price_a_usdt = usdt_pairs[coin_a]
                    price_b_usdt = usdt_pairs[coin_b]

                    if price_a_usdt <= 0 or price_b_usdt <= 0:
                        continue

                    price_a_to_b = price_a_usdt / price_b_usdt

                    # –ü—É—Ç—å 1: USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT
                    amount_a = start_amount / price_a_usdt
                    amount_b = amount_a * price_a_to_b
                    final_usdt = amount_b * price_b_usdt
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread and spread < 50.0:
                        opp = {
                            'type': 'triangular_single',
                            'scheme': exchange_name,
                            'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                            'coins': [coin_a, coin_b],
                            'initial': start_amount,
                            'final': final_usdt,
                            'profit': final_usdt - start_amount,
                            'spread': spread,
                            'steps': [
                                f"1. –ü–æ–∫—É–ø–∫–∞ {amount_a:.6f} {coin_a} –∑–∞ USDT –ø–æ —Ü–µ–Ω–µ ${price_a_usdt:.6f}",
                                f"2. –û–±–º–µ–Ω {amount_a:.6f} {coin_a} –Ω–∞ {amount_b:.6f} {coin_b} (–∫—É—Ä—Å {price_a_to_b:.6f})",
                                f"3. –ü—Ä–æ–¥–∞–∂–∞ {amount_b:.6f} {coin_b} –∑–∞ USDT –ø–æ —Ü–µ–Ω–µ ${price_b_usdt:.6f}"
                            ]
                        }
                        local_opps.append(opp)
                        opportunities.append(opp)
                        self._print_found_opportunity(opp)

                    # –ü—É—Ç—å 2: USDT ‚Üí CoinB ‚Üí CoinA ‚Üí USDT (–æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
                    price_b_to_a = price_b_usdt / price_a_usdt
                    amount_b = start_amount / price_b_usdt
                    amount_a = amount_b * price_b_to_a
                    final_usdt = amount_a * price_a_usdt
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread and spread < 50.0:
                        opp = {
                            'type': 'triangular_single',
                            'scheme': exchange_name,
                            'path': f"USDT ‚Üí {coin_b} ‚Üí {coin_a} ‚Üí USDT",
                            'coins': [coin_b, coin_a],
                            'initial': start_amount,
                            'final': final_usdt,
                            'profit': final_usdt - start_amount,
                            'spread': spread,
                            'steps': [
                                f"1. –ü–æ–∫—É–ø–∫–∞ {amount_b:.6f} {coin_b} –∑–∞ USDT –ø–æ —Ü–µ–Ω–µ ${price_b_usdt:.6f}",
                                f"2. –û–±–º–µ–Ω {amount_b:.6f} {coin_b} –Ω–∞ {amount_a:.6f} {coin_a} (–∫—É—Ä—Å {price_b_to_a:.6f})",
                                f"3. –ü—Ä–æ–¥–∞–∂–∞ {amount_a:.6f} {coin_a} –∑–∞ USDT –ø–æ —Ü–µ–Ω–µ ${price_a_usdt:.6f}"
                            ]
                        }
                        local_opps.append(opp)
                        opportunities.append(opp)
                        self._print_found_opportunity(opp)

                except Exception:
                    continue

        return local_opps

    async def _find_triangular_cross_exchange(
            self,
            start_amount: float,
            min_spread: float,
            exchange_1: str,
            exchange_2: str,
            client_1,
            client_2,
            opportunities: List[Dict]
    ) -> List[Dict]:
        """
        –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂:
        Exchange1: USDT ‚Üí CoinA
        Exchange2: CoinA ‚Üí CoinB ‚Üí USDT
        """
        local_opps = []

        prices_1 = client_1.usdt_pairs
        prices_2 = client_2.usdt_pairs

        # –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –û–ë–ï–ò–• –±–∏—Ä–∂–∞—Ö
        common_coins = set(prices_1.keys()) & set(prices_2.keys())

        print(f"[Cross {exchange_1}‚Üí{exchange_2}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤—ã—Ö —Å–≤—è–∑–æ–∫...")

        for coin_a in common_coins:
            for coin_b in prices_2.keys():
                if coin_a == coin_b:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã CoinA/CoinB –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
                if not client_2.has_trading_pair(coin_a, coin_b):
                    continue

                try:
                    price_a_exch1 = prices_1[coin_a]
                    price_a_exch2 = prices_2[coin_a]
                    price_b_exch2 = prices_2[coin_b]

                    if price_a_exch1 <= 0 or price_a_exch2 <= 0 or price_b_exch2 <= 0:
                        continue

                    # –ü–æ–∫—É–ø–∞–µ–º CoinA –Ω–∞ Exchange1
                    amount_a = start_amount / price_a_exch1

                    # –û–±–º–µ–Ω–∏–≤–∞–µ–º CoinA –Ω–∞ CoinB –Ω–∞ Exchange2
                    cross_rate = price_a_exch2 / price_b_exch2
                    amount_b = amount_a * cross_rate

                    # –ü—Ä–æ–¥–∞—ë–º CoinB –∑–∞ USDT –Ω–∞ Exchange2
                    final_usdt = amount_b * price_b_exch2
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread and spread < 50.0:
                        opp = {
                            'type': 'triangular_cross',
                            'scheme': f"{exchange_1} ‚Üí {exchange_2}",
                            'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                            'coins': [coin_a, coin_b],
                            'initial': start_amount,
                            'final': final_usdt,
                            'profit': final_usdt - start_amount,
                            'spread': spread,
                            'steps': [
                                f"1. –ü–æ–∫—É–ø–∫–∞ {amount_a:.6f} {coin_a} –Ω–∞ {exchange_1} –ø–æ —Ü–µ–Ω–µ ${price_a_exch1:.6f}",
                                f"2. –ü–µ—Ä–µ–≤–æ–¥ {amount_a:.6f} {coin_a} —Å {exchange_1} –Ω–∞ {exchange_2}",
                                f"3. –û–±–º–µ–Ω {amount_a:.6f} {coin_a} –Ω–∞ {amount_b:.6f} {coin_b} –Ω–∞ {exchange_2} (–∫—É—Ä—Å {cross_rate:.6f})",
                                f"4. –ü—Ä–æ–¥–∞–∂–∞ {amount_b:.6f} {coin_b} –∑–∞ USDT –Ω–∞ {exchange_2} –ø–æ —Ü–µ–Ω–µ ${price_b_exch2:.6f}"
                            ]
                        }
                        local_opps.append(opp)
                        opportunities.append(opp)
                        self._print_found_opportunity(opp)

                except Exception:
                    continue

        return local_opps

    def _print_found_opportunity(self, opp: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        self.found_count += 1

        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{self.found_count}")
        print(f"{'‚îÄ' * 100}")
        print(f"–¢–∏–ø: {opp['type']} | –°—Ö–µ–º–∞: {opp['scheme']}")
        print(f"–ü—É—Ç—å: {opp['path']}")
        print(f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f} | –°–ø—Ä–µ–¥: {opp['spread']:.4f}%")
        print(f"üíµ ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f}")
        print(f"{'‚îÄ' * 100}")