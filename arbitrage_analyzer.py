# arbitrage_analyzer.py
from typing import List, Dict, Optional
from datetime import datetime
from configs import Config
from bestchange_handler import BestChangeHandler
from bybit_handler import BybitHandler


class ArbitrageAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""

    def __init__(self, bestchange: BestChangeHandler, bybit: BybitHandler):
        self.bestchange = bestchange
        self.bybit = bybit

    def find_opportunities(self) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏"""
        print("\n" + "=" * 80)
        print("üîç –ê–ù–ê–õ–ò–ó –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        bybit_prices = self.bybit.get_all_tickers()
        bc_pairs = self.bestchange.get_crypto_to_crypto_pairs()

        if not bybit_prices:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å Bybit")
            return []

        if not bc_pairs:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã —Å BestChange")
            return []

        opportunities = []
        checked = 0

        print(f"\n[–ê–Ω–∞–ª–∏–∑] Bybit: {len(bybit_prices)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        print(f"[–ê–Ω–∞–ª–∏–∑] BestChange: {len(bc_pairs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –æ–±–º–µ–Ω–∞–º–∏")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if bybit_prices:
            bybit_sample = sorted(list(bybit_prices.keys()))[:15]
            print(f"[–ê–Ω–∞–ª–∏–∑] –ü—Ä–∏–º–µ—Ä—ã Bybit: {', '.join(bybit_sample)}")

        if bc_pairs:
            bc_sample = sorted(list(bc_pairs.keys()))[:15]
            print(f"[–ê–Ω–∞–ª–∏–∑] –ü—Ä–∏–º–µ—Ä—ã BestChange: {', '.join(bc_sample)}")

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        common_cryptos = set(bybit_prices.keys()) & set(bc_pairs.keys())
        print(f"[–ê–Ω–∞–ª–∏–∑] –û–±—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(common_cryptos)}")
        if common_cryptos:
            common_sample = sorted(list(common_cryptos))[:10]
            print(f"[–ê–Ω–∞–ª–∏–∑] –ü—Ä–∏–º–µ—Ä—ã –æ–±—â–∏—Ö: {', '.join(common_sample)}")

        print(f"\n[–ê–Ω–∞–ª–∏–∑] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫...\n")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Å–≤—è–∑–∫–∞–º
        for crypto1 in common_cryptos:
            for crypto2 in common_cryptos:
                if crypto1 == crypto2:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å Bybit
                price1 = bybit_prices.get(crypto1)
                price2 = bybit_prices.get(crypto2)

                if not price1 or not price2:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞ –Ω–∞ BestChange
                if crypto1 in bc_pairs and crypto2 in bc_pairs[crypto1]:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ—Ä—ë–º –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    offers = bc_pairs[crypto1][crypto2]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫—É—Ä—Å—É)
                    for offer in offers[:3]:  # –ë–µ—Ä—ë–º —Ç–æ–ø-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        checked += 1

                        result = self._calculate_profit(
                            crypto1, crypto2,
                            price1, price2,
                            offer
                        )

                        if result and result['profit_percent'] >= Config.MIN_PROFIT_PERCENT:
                            opportunities.append(result)
                            print(
                                f"[–ù–∞–π–¥–µ–Ω–æ] {crypto1}‚Üí{crypto2}: +{result['profit_percent']}% (${result['net_profit']}) —á–µ—Ä–µ–∑ {offer['exchanger']}")

        print(f"\n[–ê–Ω–∞–ª–∏–∑] ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked} —Å–≤—è–∑–æ–∫")
        print(f"[–ê–Ω–∞–ª–∏–∑] ‚úì –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
        opportunities.sort(key=lambda x: x['profit_percent'], reverse=True)

        return opportunities[:Config.TOP_OPPORTUNITIES]

    def _calculate_profit(
            self,
            crypto1: str,
            crypto2: str,
            price1: float,
            price2: float,
            bc_offer: Dict
    ) -> Optional[Dict]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –æ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞

        –°—Ö–µ–º–∞:
        1. –ü–æ–∫—É–ø–∞–µ–º crypto1 –Ω–∞ Bybit –∑–∞ USDT
        2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º crypto1 –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫ BestChange
        3. –ú–µ–Ω—è–µ–º crypto1 ‚Üí crypto2 –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–µ
        4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º crypto2 –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ Bybit
        5. –ü—Ä–æ–¥–∞–µ–º crypto2 ‚Üí USDT –Ω–∞ Bybit
        """

        start_usdt = Config.MIN_AMOUNT_USD

        # ============================================
        # –®–ê–ì 1: –ü–æ–∫—É–ø–∞–µ–º crypto1 –Ω–∞ Bybit
        # ============================================
        bybit_buy_fee = start_usdt * Config.BYBIT_TRADING_FEE
        usdt_after_buy_fee = start_usdt - bybit_buy_fee
        amount_crypto1 = usdt_after_buy_fee / price1

        # ============================================
        # –®–ê–ì 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ BestChange
        # ============================================
        withdrawal_fee_crypto1 = Config.WITHDRAWAL_FEE_USD / price1
        amount_crypto1_after_withdrawal = amount_crypto1 - withdrawal_fee_crypto1

        if amount_crypto1_after_withdrawal <= 0:
            return None

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–Ω–∏–∫–∞
        if amount_crypto1_after_withdrawal < bc_offer.get('give', 0):
            return None  # –°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª—è –æ–±–º–µ–Ω–Ω–∏–∫–∞

        # ============================================
        # –®–ê–ì 3: –ú–µ–Ω—è–µ–º crypto1 ‚Üí crypto2 –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–µ
        # ============================================
        amount_crypto2 = amount_crypto1_after_withdrawal * bc_offer['rate']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞
        reserve = bc_offer.get('reserve', 0)
        if reserve > 0 and amount_crypto2 > reserve:
            return None  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤

        # ============================================
        # –®–ê–ì 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º crypto2 –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ Bybit
        # ============================================
        deposit_fee_crypto2 = Config.DEPOSIT_FEE_USD / price2
        amount_crypto2_after_deposit = amount_crypto2 - deposit_fee_crypto2

        if amount_crypto2_after_deposit <= 0:
            return None

        # ============================================
        # –®–ê–ì 5: –ü—Ä–æ–¥–∞–µ–º crypto2 –Ω–∞ Bybit
        # ============================================
        usdt_from_sell = amount_crypto2_after_deposit * price2
        bybit_sell_fee = usdt_from_sell * Config.BYBIT_TRADING_FEE
        final_usdt = usdt_from_sell - bybit_sell_fee

        # ============================================
        # –†–ê–°–ß–Å–¢ –ü–†–ò–ë–´–õ–ò
        # ============================================
        total_fees = bybit_buy_fee + bybit_sell_fee + Config.WITHDRAWAL_FEE_USD + Config.DEPOSIT_FEE_USD
        net_profit = final_usdt - start_usdt
        profit_percent = (net_profit / start_usdt) * 100

        # ============================================
        # –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–Ø–ú–´–ú –û–ë–ú–ï–ù–û–ú –ù–ê BYBIT
        # ============================================
        direct_crypto2 = amount_crypto1 * (price1 / price2)
        direct_usdt = direct_crypto2 * price2
        direct_fees = (start_usdt * Config.BYBIT_TRADING_FEE) + (direct_usdt * Config.BYBIT_TRADING_FEE)
        direct_profit = direct_usdt - start_usdt - direct_fees

        advantage_over_direct = net_profit - direct_profit

        return {
            'timestamp': datetime.now().isoformat(),
            'crypto1': crypto1,
            'crypto2': crypto2,
            'path': f"USDT ‚Üí {crypto1} (Bybit) ‚Üí {crypto2} (BestChange) ‚Üí USDT (Bybit)",

            # –§–∏–Ω–∞–Ω—Å—ã
            'start_usdt': round(start_usdt, 2),
            'final_usdt': round(final_usdt, 2),
            'net_profit': round(net_profit, 2),
            'profit_percent': round(profit_percent, 2),
            'total_fees': round(total_fees, 2),

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä—è–º—ã–º –æ–±–º–µ–Ω–æ–º
            'direct_exchange_profit': round(direct_profit, 2),
            'advantage_over_direct': round(advantage_over_direct, 2),
            'is_better_than_direct': advantage_over_direct > 0,

            # –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞ - –®–∞–≥ 1
            'step1_buy_crypto1': {
                'crypto': crypto1,
                'amount_before_withdrawal': round(amount_crypto1, 8),
                'amount_after_withdrawal': round(amount_crypto1_after_withdrawal, 8),
                'price_usdt': round(price1, 8),
                'total_usdt': round(start_usdt, 2),
                'trading_fee': round(bybit_buy_fee, 2),
                'withdrawal_fee_usd': round(Config.WITHDRAWAL_FEE_USD, 2),
                'withdrawal_fee_crypto': round(withdrawal_fee_crypto1, 8)
            },

            # –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞ - –®–∞–≥ 2
            'step2_exchange': {
                'from_crypto': crypto1,
                'from_amount': round(amount_crypto1_after_withdrawal, 8),
                'to_crypto': crypto2,
                'to_amount': round(amount_crypto2, 8),
                'rate': round(bc_offer['rate'], 8),
                'exchanger_name': bc_offer['exchanger'],
                'exchanger_id': bc_offer['exchanger_id'],
                'reserve': round(bc_offer.get('reserve', 0), 2),
                'give': round(bc_offer.get('give', 0), 8),
                'receive': round(bc_offer.get('receive', 0), 8)
            },

            # –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞ - –®–∞–≥ 3
            'step3_sell_crypto2': {
                'crypto': crypto2,
                'amount_before_deposit': round(amount_crypto2, 8),
                'amount_after_deposit': round(amount_crypto2_after_deposit, 8),
                'price_usdt': round(price2, 8),
                'total_usdt': round(final_usdt, 2),
                'trading_fee': round(bybit_sell_fee, 2),
                'deposit_fee_usd': round(Config.DEPOSIT_FEE_USD, 2),
                'deposit_fee_crypto': round(deposit_fee_crypto2, 8)
            },

            # –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            'current_prices': {
                f'{crypto1}_usdt': round(price1, 8),
                f'{crypto2}_usdt': round(price2, 8),
                f'{crypto1}_to_{crypto2}_rate_bestchange': round(bc_offer['rate'], 8),
                f'{crypto1}_to_{crypto2}_rate_bybit': round(price1 / price2, 8)
            },

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'warnings': [
                "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
                "‚ö†Ô∏è –£—á—Ç–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å 10-30 –º–∏–Ω—É—Ç)",
                "‚ö†Ô∏è –¶–µ–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∑–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                "‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ",
                "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω",
                f"{'‚úÖ' if advantage_over_direct > 0 else '‚ùå'} –í—ã–≥–æ–¥–Ω–µ–µ —á–µ–º –ø—Ä—è–º–æ–π –æ–±–º–µ–Ω –Ω–∞ Bybit –Ω–∞ ${abs(advantage_over_direct):.2f}"
            ]
        }