import asyncio
from typing import List, Dict
from datetime import datetime


class ArbitrageAnalyzerAsync:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è Bybit –∏ Binance"""

    def __init__(self, bybit_client, binance_client):
        self.bybit = bybit_client
        self.binance = binance_client

    async def find_arbitrage_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            top_count: int = 20
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –≤—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        1. –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ (A‚ÜíB, B‚ÜíA)
        2. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ (A: USDT‚ÜíX‚ÜíY‚ÜíUSDT)
        3. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π (A: USDT‚ÜíX, B: X‚ÜíY‚ÜíUSDT)
        """

        print(f"\n[Analyzer] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ = {min_spread}%")

        opportunities = []

        # 1. –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏
        print("\n[Analyzer] üìä –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ Bybit ‚Üî Binance...")
        direct_opps = await self._find_direct_arbitrage(start_amount, min_spread)
        opportunities.extend(direct_opps)
        print(f"[Analyzer]   ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(direct_opps)}")

        # 2. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ Bybit
        print("\n[Analyzer] üî∫ –ü–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ Bybit...")
        bybit_tri = await self._find_triangular_single_exchange(
            start_amount, min_spread, "Bybit", self.bybit.usdt_pairs
        )
        opportunities.extend(bybit_tri)
        print(f"[Analyzer]   ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(bybit_tri)}")

        # 3. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ Binance
        print("\n[Analyzer] üî∫ –ü–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ Binance...")
        binance_tri = await self._find_triangular_single_exchange(
            start_amount, min_spread, "Binance", self.binance.usdt_pairs
        )
        opportunities.extend(binance_tri)
        print(f"[Analyzer]   ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(binance_tri)}")

        # 4. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π (Bybit ‚Üí Binance)
        print("\n[Analyzer] üîÄ –ü–æ–∏—Å–∫ –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ Bybit ‚Üí Binance...")
        cross_bb = await self._find_triangular_cross_exchange(
            start_amount, min_spread, "Bybit", "Binance",
            self.bybit.usdt_pairs, self.binance.usdt_pairs
        )
        opportunities.extend(cross_bb)
        print(f"[Analyzer]   ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(cross_bb)}")

        # 5. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π (Binance ‚Üí Bybit)
        print("\n[Analyzer] üîÄ –ü–æ–∏—Å–∫ –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ Binance ‚Üí Bybit...")
        cross_ab = await self._find_triangular_cross_exchange(
            start_amount, min_spread, "Binance", "Bybit",
            self.binance.usdt_pairs, self.bybit.usdt_pairs
        )
        opportunities.extend(cross_ab)
        print(f"[Analyzer]   ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(cross_ab)}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
        opportunities.sort(key=lambda x: x['spread'], reverse=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø
        if top_count:
            top_opportunities = opportunities[:top_count]
        else:
            top_opportunities = opportunities

        self._print_results(top_opportunities, min_spread, start_amount)

        return top_opportunities

    async def _find_direct_arbitrage(
            self,
            start_amount: float,
            min_spread: float
    ) -> List[Dict]:
        """
        –ü—Ä—è–º–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏:
        - Bybit ‚Üí Binance
        - Binance ‚Üí Bybit
        """
        opportunities = []

        bybit_prices = self.bybit.usdt_pairs
        binance_prices = self.binance.usdt_pairs

        if not bybit_prices or not binance_prices:
            return opportunities

        common_coins = set(bybit_prices.keys()) & set(binance_prices.keys())

        for coin in common_coins:
            try:
                bybit_price = bybit_prices[coin]
                binance_price = binance_prices[coin]

                if bybit_price <= 0 or binance_price <= 0:
                    continue

                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Bybit ‚Üí –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ Binance
                amount_coin = start_amount / bybit_price
                final_usdt = amount_coin * binance_price
                spread = ((final_usdt - start_amount) / start_amount) * 100

                if spread >= min_spread:
                    opportunities.append({
                        'type': 'direct',
                        'path': f"USDT ‚Üí {coin} ‚Üí USDT",
                        'scheme': "Bybit ‚Üí Binance",
                        'coins': [coin],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread
                    })

                # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ Binance ‚Üí –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ Bybit
                amount_coin = start_amount / binance_price
                final_usdt = amount_coin * bybit_price
                spread = ((final_usdt - start_amount) / start_amount) * 100

                if spread >= min_spread:
                    opportunities.append({
                        'type': 'direct',
                        'path': f"USDT ‚Üí {coin} ‚Üí USDT",
                        'scheme': "Binance ‚Üí Bybit",
                        'coins': [coin],
                        'initial': start_amount,
                        'final': final_usdt,
                        'profit': final_usdt - start_amount,
                        'spread': spread
                    })

            except (KeyError, ZeroDivisionError, TypeError):
                continue

        return opportunities

    async def _find_triangular_single_exchange(
            self,
            start_amount: float,
            min_spread: float,
            exchange_name: str,
            usdt_pairs: Dict[str, float]
    ) -> List[Dict]:
        """
        –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ:
        USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT
        """
        opportunities = []

        exchange_client = self.bybit if exchange_name == "Bybit" else self.binance

        coins = list(usdt_pairs.keys())
        checked = 0

        for i, coin_a in enumerate(coins):
            for coin_b in coins[i + 1:]:
                if coin_a == coin_b:
                    continue

                checked += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞ CoinA/CoinB
                if not exchange_client.has_trading_pair(coin_a, coin_b):
                    continue

                try:
                    price_a_usdt = usdt_pairs[coin_a]
                    price_b_usdt = usdt_pairs[coin_b]

                    if price_a_usdt <= 0 or price_b_usdt <= 0:
                        continue

                    price_a_to_b = price_a_usdt / price_b_usdt

                    # –ü—É—Ç—å 1: USDT ‚Üí CoinA ‚Üí CoinB ‚Üí USDT
                    amount_a = start_amount / price_a_usdt
                    amount_b = amount_a * price_a_to_b
                    final_usdt = amount_b * price_b_usdt
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread:
                        opportunities.append({
                            'type': 'triangular_single',
                            'scheme': exchange_name,
                            'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                            'spread': spread,
                            'profit': final_usdt - start_amount
                        })

                except Exception:
                    continue

        return opportunities

    async def _find_triangular_cross_exchange(
            self,
            start_amount: float,
            min_spread: float,
            exchange_1: str,
            exchange_2: str,
            prices_1: Dict[str, float],
            prices_2: Dict[str, float]
    ) -> List[Dict]:
        """
        –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å-–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂:
        Exchange1: USDT ‚Üí CoinA
        Exchange2: CoinA ‚Üí CoinB ‚Üí USDT
        """
        opportunities = []

        exchange2_client = self.bybit if exchange_2 == "Bybit" else self.binance
        common_coins = set(prices_1.keys()) & set(prices_2.keys())

        for coin_a in common_coins:
            for coin_b in prices_2.keys():
                if coin_a == coin_b:
                    continue

                if not exchange2_client.has_trading_pair(coin_a, coin_b):
                    continue

                try:
                    price_a_exch1 = prices_1[coin_a]
                    price_a_exch2 = prices_2[coin_a]
                    price_b_exch2 = prices_2[coin_b]

                    if price_a_exch1 <= 0 or price_a_exch2 <= 0 or price_b_exch2 <= 0:
                        continue

                    amount_a = start_amount / price_a_exch1
                    cross_rate = price_a_exch2 / price_b_exch2
                    amount_b = amount_a * cross_rate
                    final_usdt = amount_b * price_b_exch2
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread:
                        opportunities.append({
                            'type': 'triangular_cross',
                            'scheme': f"{exchange_1} ‚Üí {exchange_2}",
                            'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                            'spread': spread,
                            'profit': final_usdt - start_amount
                        })

                except Exception:
                    continue

        return opportunities

    def _print_results(self, opportunities: List[Dict], min_spread: float, start_amount: float):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""

        if opportunities:
            print("\n" + "=" * 100)
            print(f"üéØ –¢–û–ü-{len(opportunities)} –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
            print("=" * 100 + "\n")

            for idx, opp in enumerate(opportunities, 1):
                print(f"#{idx} | {opp['scheme']} | {opp['path']}")
                print(f"   ‚ûú –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}\n")
        else:
            print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {min_spread}% –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
