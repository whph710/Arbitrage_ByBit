"""
–ú–æ–¥—É–ª—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â–µ—Ç —Å–≤—è–∑–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å
"""

import asyncio
import signal
from datetime import datetime, timedelta
from typing import Optional, List, Dict
from collections import deque
import traceback

from configs_continuous import (
    START_AMOUNT, MIN_SPREAD, MAX_REASONABLE_SPREAD,
    MONITORING_INTERVAL, MIN_PROFIT_USD
)
from bybit_handler import BybitClientAsync
from bestchange_handler import BestChangeClientAsync
from exchange_arbitrage_analyzer import ExchangeArbitrageAnalyzer
from opportunity_logger import OpportunityLogger


class ContinuousArbitrageMonitor:
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    –†–∞–±–æ—Ç–∞–µ—Ç 24/7, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
    """

    def __init__(self):
        self.running = False
        self.bybit: Optional[BybitClientAsync] = None
        self.bestchange: Optional[BestChangeClientAsync] = None
        self.analyzer: Optional[ExchangeArbitrageAnalyzer] = None
        self.logger = OpportunityLogger()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_iterations = 0
        self.total_opportunities_found = 0
        self.best_spread_ever = 0
        self.best_opportunity_ever = None
        self.start_time = None
        self.last_data_reload = None

        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Ö–æ–¥–æ–∫ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.recent_opportunities = deque(maxlen=100)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.data_reload_interval = timedelta(hours=1)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.min_time_between_same_opportunity = 60  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å–≤—è–∑–∫—É —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 60 —Å–µ–∫

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        self.running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("=" * 100)
        print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ê–†–ë–ò–¢–†–ê–ñ–ê")
        print("=" * 100)

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            self.bybit = BybitClientAsync()
            await self.bybit.create_session()

            self.bestchange = BestChangeClientAsync()
            await self.bestchange.create_session()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ Bybit
            print("\n[Init] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Bybit...")
            await self.bybit.load_usdt_pairs()

            if len(self.bybit.usdt_pairs) == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã Bybit")

            print(f"[Init] ‚úÖ Bybit: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.bybit.usdt_pairs)} USDT-–ø–∞—Ä")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ BestChange
            print("\n[Init] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BestChange...")
            await self.bestchange.load_currencies()
            await self.bestchange.load_exchangers()

            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã
            common_coins = set(self.bybit.usdt_pairs.keys()) & set(self.bestchange.crypto_currencies.keys())
            print(f"[Init] ‚úÖ –û–±—â–∏—Ö –º–æ–Ω–µ—Ç: {len(common_coins)}")

            if len(common_coins) == 0:
                raise Exception("–ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –º–µ–∂–¥—É Bybit –∏ BestChange")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã BestChange
            print("\n[Init] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ BestChange (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
            await self.bestchange.load_rates(list(common_coins), use_rankrate=True)

            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            self.analyzer = ExchangeArbitrageAnalyzer(self.bybit, self.bestchange)

            self.last_data_reload = datetime.now()

            print("\n[Init] ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 100)

            return True

        except Exception as e:
            print(f"\n[Init] ‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
            traceback.print_exc()
            return False

    async def reload_data_if_needed(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.last_data_reload:
            return

        time_since_reload = datetime.now() - self.last_data_reload

        if time_since_reload >= self.data_reload_interval:
            print(f"\n{'=' * 100}")
            print(f"üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• (–ø—Ä–æ—à–ª–æ {time_since_reload.seconds // 60} –º–∏–Ω—É—Ç)")
            print(f"{'=' * 100}")

            try:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Bybit
                print("[Reload] üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Bybit...")
                await self.bybit.load_usdt_pairs()

                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º BestChange
                print("[Reload] üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ BestChange...")
                common_coins = set(self.bybit.usdt_pairs.keys()) & set(self.bestchange.crypto_currencies.keys())
                await self.bestchange.load_rates(list(common_coins), use_rankrate=True)

                self.last_data_reload = datetime.now()
                print("[Reload] ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            except Exception as e:
                print(f"[Reload] ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    def _is_duplicate_opportunity(self, opp: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º –Ω–µ–¥–∞–≤–Ω–µ–π"""
        path = opp['path']
        spread = opp['spread']

        current_time = datetime.now()

        for recent_opp, timestamp in self.recent_opportunities:
            # –ï—Å–ª–∏ —Ç–∞ –∂–µ —Å–≤—è–∑–∫–∞ –∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
            if recent_opp['path'] == path:
                time_diff = (current_time - timestamp).total_seconds()
                if time_diff < self.min_time_between_same_opportunity:
                    # –ù–æ –µ—Å–ª–∏ —Å–ø—Ä–µ–¥ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è (>20%), —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    spread_diff = abs(spread - recent_opp['spread'])
                    if spread_diff < recent_opp['spread'] * 0.2:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 20%
                        return True

        return False

    def _print_opportunity_instant(self, opp: Dict, rank: int):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime('%H:%M:%S')

        print(f"\n{'üéØ' * 50}")
        print(f"‚è∞ {timestamp} | –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{self.total_opportunities_found}")
        print(f"{'‚îÄ' * 100}")
        print(f"üìç –ü—É—Ç—å: {opp['path']}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Bybit –∏ –æ–±–º–µ–Ω–Ω–∏–∫
        if 'bybit_url_a' in opp:
            print(f"üîó Bybit {opp['coins'][0]}/USDT: {opp['bybit_url_a']}")
        if 'bybit_url_b' in opp:
            print(f"üîó Bybit {opp['coins'][1]}/USDT: {opp['bybit_url_b']}")
        if 'exchanger_url' in opp:
            print(f"üîó –û–±–º–µ–Ω–Ω–∏–∫: {opp['exchanger_url']}")

        print(f"üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
        print(f"üíµ ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f}")
        print(f"üè¶ –û–±–º–µ–Ω–Ω–∏–∫: {opp['exchanger']} (—Ä–µ–∑–µ—Ä–≤: ${opp['reserve']:,.0f})")

        coins = opp['coins']
        if len(coins) >= 2:
            liq_a = opp.get('liquidity_a', 0)
            liq_b = opp.get('liquidity_b', 0)
            print(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {coins[0]} ({liq_a:.1f}) ‚Üí {coins[1]} ({liq_b:.1f})")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
        if 'exchange_rate' in opp:
            print(f"üìä –ö—É—Ä—Å: 1 {coins[0]} = {opp['exchange_rate']:.8f} {coins[1]}")

        print(f"\nüìã –î–ï–¢–ê–õ–ò –û–ü–ï–†–ê–¶–ò–ô:")
        for step in opp['steps']:
            print(f"   {step}")

        print(f"{'üéØ' * 50}\n")

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        self.logger.log_opportunity(opp)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –Ω–∞—Ö–æ–¥–∫—É
        if opp['spread'] > self.best_spread_ever:
            self.best_spread_ever = opp['spread']
            self.best_opportunity_ever = opp
            print(f"üèÜ –ù–û–í–´–ô –†–ï–ö–û–†–î! –õ—É—á—à–∏–π —Å–ø—Ä–µ–¥ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {self.best_spread_ever:.4f}%\n")
            self.logger.log_text(f"üèÜ –ù–û–í–´–ô –†–ï–ö–û–†–î: {self.best_spread_ever:.4f}% - {opp['path']}")

    async def run_single_iteration(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞"""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self.reload_data_if_needed()

            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            opportunities = await self.analyzer.find_opportunities(
                start_amount=START_AMOUNT,
                min_spread=MIN_SPREAD,
                max_spread=MAX_REASONABLE_SPREAD,
                min_reserve=0,
                parallel_requests=500
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            new_opportunities = 0

            for opp in opportunities:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                if self._is_duplicate_opportunity(opp):
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.recent_opportunities.append((opp, datetime.now()))

                # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
                self.total_opportunities_found += 1
                new_opportunities += 1
                self._print_opportunity_instant(opp, self.total_opportunities_found)

            # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if new_opportunities == 0:
                timestamp = datetime.now().strftime('%H:%M:%S')
                print(f"[{timestamp}] üîç –ò—Ç–µ—Ä–∞—Ü–∏—è #{self.total_iterations}: –Ω–æ–≤—ã—Ö —Å–≤—è–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            return len(opportunities)

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏: {e}")
            traceback.print_exc()
            return 0

    def _print_session_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        if not self.start_time:
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–≥–≥–µ—Ä–∞
        self.logger.print_session_summary()

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = True
        self.start_time = datetime.now()

        print(f"\n{'=' * 100}")
        print(f"üî¥ –ó–ê–ü–£–°–ö –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print(f"{'=' * 100}")
        print(f"‚è∞ –°—Ç–∞—Ä—Ç: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {MONITORING_INTERVAL}—Å")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${START_AMOUNT}")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {MIN_SPREAD}%")
        print(f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${MIN_PROFIT_USD}")
        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ {self.data_reload_interval.seconds // 3600}—á")
        print(f"‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print(f"{'=' * 100}\n")

        consecutive_errors = 0
        max_consecutive_errors = 5

        while self.running:
            self.total_iterations += 1

            try:
                print(f"\n{'‚îÄ' * 100}")
                print(f"üîÑ –ò–¢–ï–†–ê–¶–ò–Ø #{self.total_iterations} | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"{'‚îÄ' * 100}")

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                await self.run_single_iteration()

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                consecutive_errors = 0

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
                if self.total_iterations % 10 == 0:
                    self._print_session_statistics()

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if self.running:
                    print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {MONITORING_INTERVAL}—Å...")
                    await asyncio.sleep(MONITORING_INTERVAL)

            except Exception as e:
                consecutive_errors += 1
                print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ò–¢–ï–†–ê–¶–ò–ò #{self.total_iterations}: {e}")
                traceback.print_exc()

                if consecutive_errors >= max_consecutive_errors:
                    print(f"\n‚õî –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–• –û–®–ò–ë–û–ö ({consecutive_errors})")
                    print(f"‚ö†Ô∏è  –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É...")

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    try:
                        if self.bybit:
                            await self.bybit.close()
                        if self.bestchange:
                            await self.bestchange.close()
                    except:
                        pass

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                    if await self.initialize():
                        consecutive_errors = 0
                        print("‚úÖ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    else:
                        print("‚ùå –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
                        self.running = False
                        break
                else:
                    print(f"‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(30)

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.running = False

        print(f"\n{'=' * 100}")
        print(f"‚õî –û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print(f"{'=' * 100}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_session_statistics()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.logger.save_daily_summary()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            if self.bybit:
                await self.bybit.close()
            if self.bestchange:
                await self.bestchange.close()
            print("\n‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = ContinuousArbitrageMonitor()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await monitor.initialize():
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            return

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitor.start_monitoring()

    except KeyboardInterrupt:
        print("\n\n‚å®Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await monitor.stop_monitoring()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚õî –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")