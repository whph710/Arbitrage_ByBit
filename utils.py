import logging
import sys
from logging.handlers import RotatingFileHandler
from config import LOG_LEVEL, LOG_FORMAT, LOG_FILE, LOG_MAX_SIZE, LOG_BACKUP_COUNT, LOG_ENCODING


def setup_logging():
    log_level = getattr(logging, LOG_LEVEL.upper(), logging.INFO)
    handlers = []

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤—Å–µ–≥–¥–∞ UTF-8)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(logging.Formatter(LOG_FORMAT))
    console_handler.setLevel(log_level)
    handlers.append(console_handler)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    if LOG_FILE:
        file_handler = RotatingFileHandler(
            LOG_FILE,
            maxBytes=LOG_MAX_SIZE,
            backupCount=LOG_BACKUP_COUNT,
            encoding=LOG_ENCODING  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8
        )
        file_handler.setFormatter(logging.Formatter(LOG_FORMAT))
        file_handler.setLevel(log_level)
        handlers.append(file_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=log_level,
        handlers=handlers,
        format=LOG_FORMAT,
        force=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    )


def check_dependencies():
    required_packages = ['aiohttp']
    optional_packages = {'playsound': False}  # SOUND_NOTIFICATIONS –æ—Ç–∫–ª—é—á–µ–Ω
    missing_required = []
    missing_optional = []

    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_required.append(package)

    for package, needed in optional_packages.items():
        if needed:
            try:
                __import__(package)
            except ImportError:
                missing_optional.append(package)

    if missing_required:
        logging.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {missing_required}")
        logging.critical("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö: pip install aiohttp")
        return False

    if missing_optional:
        logging.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {missing_optional}")
        logging.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö: pip install playsound")

    return True


def print_startup_info():
    from config import (MIN_PROFIT_THRESHOLD, TRADING_COMMISSION, SCAN_INTERVAL,
                        MAX_OPPORTUNITIES_DISPLAY, CROSS_CURRENCIES, LOG_LEVEL,
                        ENABLE_LIVE_TRADING, LIVE_TRADING_DRY_RUN, API_TESTNET,
                        API_KEY, validate_config)

    print("=" * 80)
    print("üöÄ –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ô –ë–û–¢ BYBIT - –ó–ê–ü–£–°–ö")
    print("=" * 80)
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {MIN_PROFIT_THRESHOLD}%")
    print(f"üí∞ –ö–æ–º–∏—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤: {TRADING_COMMISSION * 100}%")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {SCAN_INTERVAL}s")
    print(f"üî¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {MAX_OPPORTUNITIES_DISPLAY}")
    print(f"üí± –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(CROSS_CURRENCIES)}")
    print(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {LOG_LEVEL}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    print("‚îÄ" * 80)
    if ENABLE_LIVE_TRADING:
        if LIVE_TRADING_DRY_RUN:
            print("üî¥ –†–ï–ñ–ò–ú: –¢–µ—Å—Ç–æ–≤—ã–π (DRY RUN) - —Å–¥–µ–ª–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
        else:
            network = "–¢–ï–°–¢–û–í–ê–Ø –°–ï–¢–¨" if API_TESTNET else "–†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø"
            api_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if API_KEY else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            print(f"üü° –†–ï–ñ–ò–ú: {network}")
            print(f"üîë API –∫–ª—é—á: {api_status}")
    else:
        print("üü¢ –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    errors, warnings = validate_config()
    if errors:
        print("‚îÄ" * 80)
        print("‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")

    if warnings:
        print("‚îÄ" * 80)
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")

    print("=" * 80)
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 80)