import logging
import sys
from logging.handlers import RotatingFileHandler
from config import *


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –£–õ–£–ß–®–ï–ù–ù–ê–Ø"""
    log_level = getattr(logging, LOG_LEVEL.upper(), logging.INFO)

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    logging.getLogger().handlers.clear()

    handlers = []

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    console_handler = logging.StreamHandler(sys.stdout)

    # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_format = "%(asctime)s [%(levelname)8s] %(name)-20s: %(message)s"
    console_formatter = logging.Formatter(
        console_format,
        datefmt="%H:%M:%S"
    )

    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(log_level)
    handlers.append(console_handler)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if LOG_FILE:
        try:
            file_handler = RotatingFileHandler(
                LOG_FILE,
                maxBytes=LOG_MAX_SIZE,
                backupCount=LOG_BACKUP_COUNT,
                encoding=LOG_ENCODING
            )

            # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞
            file_format = "%(asctime)s [%(levelname)8s] %(name)-25s %(filename)s:%(lineno)d - %(message)s"
            file_formatter = logging.Formatter(file_format)

            file_handler.setFormatter(file_formatter)
            file_handler.setLevel(log_level)
            handlers.append(file_handler)

        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞: {e}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=log_level,
        handlers=handlers,
        force=True
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)

    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger = logging.getLogger(__name__)
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å: {LOG_LEVEL})")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –£–õ–£–ß–®–ï–ù–ù–ê–Ø"""
    required_packages = ['aiohttp']
    optional_packages = {
        'numpy': '–¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        'playsound': '–¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    }

    missing_required = []
    missing_optional = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_required.append(package)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    for package, description in optional_packages.items():
        try:
            __import__(package)
        except ImportError:
            missing_optional.append((package, description))

    # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–∞—Ö
    if missing_required:
        logging.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_required:
            logging.critical(f"   - {package}")
        logging.critical("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö: pip install " + " ".join(missing_required))
        return False

    if missing_optional:
        logging.warning("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package, description in missing_optional:
            logging.warning(f"   - {package}: {description}")

    logging.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def print_startup_info():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø"""

    print("=" * 80)
    print("üöÄ –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ô –ë–û–¢ BYBIT - –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("üìä –¢–û–†–ì–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {MIN_PROFIT_THRESHOLD}%")
    print(f"   üè¶ –ö–æ–º–∏—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤: {TRADING_COMMISSION * 100}%")
    print(f"   üíµ –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞: ${INITIAL_AMOUNT:,.0f}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüîç –ù–ê–°–¢–†–û–ô–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {SCAN_INTERVAL}s")
    print(f"   üìà –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {MAX_OPPORTUNITIES_DISPLAY}")
    print(f"   üí± –í–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä: {len(CROSS_CURRENCIES)}")
    print(f"   üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {MAX_CONCURRENT_REQUESTS}")

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n‚öôÔ∏è  –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {LOG_LEVEL}")
    print(f"   üíæ –ö–µ—à orderbook: {'–≤–∫–ª—é—á–µ–Ω' if USE_ORDERBOOK_CACHE else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    if USE_ORDERBOOK_CACHE:
        print(f"   ‚è∞ TTL –∫–µ—à–∞: {ORDERBOOK_CACHE_TTL}s")

    # –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\nüíº –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò:")
    if ENABLE_LIVE_TRADING:
        if LIVE_TRADING_DRY_RUN:
            print("   üî¥ DRY RUN - –¢–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–æ–∫")
        else:
            network = "üß™ –¢–ï–°–¢–û–í–ê–Ø –°–ï–¢–¨" if API_TESTNET else "üü° –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø"
            api_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã" if API_KEY and API_SECRET else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            print(f"   {network}")
            print(f"   üîë API –∫–ª—é—á–∏: {api_status}")
            print(f"   üí∞ –õ–∏–º–∏—Ç —Å–¥–µ–ª–∫–∏: ${LIVE_TRADING_MIN_TRADE_USDT}-${LIVE_TRADING_MAX_TRADE_USDT}")
    else:
        print("   üü¢ –¢–û–õ–¨–ö–û –ú–û–ù–ò–¢–û–†–ò–ù–ì - —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    errors, warnings, info_messages = validate_config()

    if errors:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")

    if warnings:
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if hasattr(globals(), 'info_messages') or len(CROSS_CURRENCIES) > 50:
        print("\nüéØ –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {len(CROSS_CURRENCIES)} –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä")
        print(f"   ‚ö° –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL}s")
        print(f"   üîç –ú–∏–∫—Ä–æ-–∞—Ä–±–∏—Ç—Ä–∞–∂: –ø–æ—Ä–æ–≥ {MIN_PROFIT_THRESHOLD}%")
        print(f"   üìä –ê–Ω–∞–ª–∏–∑ –¥–æ {MAX_OPPORTUNITIES_DISPLAY} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

    # –°–ø–∏—Å–æ–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
    sample_currencies = CROSS_CURRENCIES[:15]
    remaining = len(CROSS_CURRENCIES) - 15
    currencies_text = ', '.join(sample_currencies)
    if remaining > 0:
        currencies_text += f" –∏ –µ—â–µ {remaining}"
    print(f"\nüí± –í–ê–õ–Æ–¢–´: {currencies_text}")

    print("=" * 80)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if SCAN_INTERVAL < 1.0 or MAX_CONCURRENT_REQUESTS > 100:
        print("‚ö° –í–ù–ò–ú–ê–ù–ò–ï: –í–∫–ª—é—á–µ–Ω –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º!")
        print("   ‚Ä¢ –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
        print("   ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞–º–∏ Bybit")
        print("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤")
        print("=" * 80)

    print("üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("   ‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    print("   ‚Ä¢ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:", LOG_FILE if LOG_FILE else "–∫–æ–Ω—Å–æ–ª—å")
    print("   ‚Ä¢ CSV —Ñ–∞–π–ª—ã: opportunities.csv, executed_trades.csv")
    print("=" * 80)


def format_currency_amount(amount: float, currency: str = "USDT") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤–∞–ª—é—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    if amount >= 1000000:
        return f"${amount / 1000000:.2f}M {currency}"
    elif amount >= 1000:
        return f"${amount / 1000:.1f}K {currency}"
    else:
        return f"${amount:.2f} {currency}"


def format_percentage(value: float, precision: int = 3) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if value >= 10:
        return f"{value:.1f}%"
    elif value >= 1:
        return f"{value:.2f}%"
    else:
        return f"{value:.{precision}f}%"


def format_duration(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        minutes = seconds / 60
        return f"{minutes:.1f}–º"
    else:
        hours = seconds / 3600
        return f"{hours:.1f}—á"


def print_performance_stats(scan_times: list, opportunities_found: int, total_scans: int):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not scan_times:
        return

    avg_time = sum(scan_times) / len(scan_times)
    min_time = min(scan_times)
    max_time = max(scan_times)

    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {avg_time:.2f}—Å")
    print(f"   üèÉ‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä–µ–π—à–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {min_time:.2f}—Å")
    print(f"   üêå –°–∞–º–æ–µ –¥–æ–ª–≥–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {max_time:.2f}—Å")
    print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {opportunities_found}")
    print(f"   üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {opportunities_found / max(1, total_scans) * 100:.1f}% —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")


def validate_trading_settings():
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    issues = []

    if LIVE_TRADING_MIN_TRADE_USDT < 5.0:
        issues.append("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è Bybit")

    if TRADING_COMMISSION * 3 > MIN_PROFIT_THRESHOLD:
        issues.append(
            f"–ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ ({MIN_PROFIT_THRESHOLD}%) —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏ ({TRADING_COMMISSION * 100}%)")

    if SCAN_INTERVAL < 0.3:
        issues.append("–û—á–µ–Ω—å —á–∞—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ API")

    return issues