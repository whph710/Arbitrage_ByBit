import asyncio
from typing import List, Dict, Optional
from datetime import datetime
from collections import defaultdict
from configs_continuous import ENABLE_CACHE, CACHE_HOT_PAIRS, MIN_PROFIT_USD


class ExchangeArbitrageAnalyzer:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∏ (BestChange)
    –°—Ö–µ–º–∞: Bybit (–∫—É–ø–∏—Ç—å A) ‚Üí BestChange (–æ–±–º–µ–Ω—è—Ç—å A‚ÜíB) ‚Üí Bybit (–ø—Ä–æ–¥–∞—Ç—å B)

    –° —É—á–µ—Ç–æ–º:
    - –ö–æ–º–∏—Å—Å–∏–π Bybit –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é (Taker/Maker)
    - –ö–æ–º–∏—Å—Å–∏–π Bybit –Ω–∞ –≤—ã–≤–æ–¥ –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ API)
    """

    # –ö–æ–º–∏—Å—Å–∏–∏ Bybit Spot
    BYBIT_TAKER_FEE = 0.001800  # 0.1800%
    BYBIT_MAKER_FEE = 0.001000  # 0.1000%

    def __init__(self, bybit_client, bestchange_client):
        self.bybit = bybit_client
        self.bestchange = bestchange_client
        self.found_count = 0
        self.checked_pairs = 0

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ "–≥–æ—Ä—è—á–∏—Ö" –ø–∞—Ä
        self.hot_pairs_cache = {}
        self.pair_performance = defaultdict(lambda: {'checks': 0, 'finds': 0, 'avg_spread': 0})

    def _get_bybit_trade_url(self, coin: str, quote: str = 'USDT') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É Bybit"""
        return f"https://www.bybit.com/ru-RU/trade/spot/{coin}/{quote}"

    def _get_bybit_deposit_url(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ø–æ–∑–∏—Ç–∞ Bybit"""
        return "https://www.bybit.com/user/assets/deposit?source=AssetDeposit"

    def _get_bybit_withdraw_url(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–≤–æ–¥–∞ Bybit"""
        return "https://www.bybit.com/user/assets/home/overview"

    def _get_bestchange_exchanger_url(self, exchanger_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫ BestChange"""
        return f"https://www.bestchange.com/click.php?id={exchanger_id}"

    def _calculate_bybit_fees(self, amount: float, is_taker: bool = True) -> tuple:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ Bybit

        Args:
            amount: –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏
            is_taker: True –¥–ª—è Taker (0.18%), False –¥–ª—è Maker (0.10%)

        Returns:
            (—Å—É–º–º–∞_–∫–æ–º–∏—Å—Å–∏–∏, —Å—É–º–º–∞_–ø–æ—Å–ª–µ_–∫–æ–º–∏—Å—Å–∏–∏)
        """
        fee_rate = self.BYBIT_TAKER_FEE if is_taker else self.BYBIT_MAKER_FEE
        fee_amount = amount * fee_rate
        amount_after_fee = amount - fee_amount
        return fee_amount, amount_after_fee

    def _get_withdrawal_fee_in_usdt(self, coin: str, amount: float, price_usdt: float) -> tuple:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ –≤—ã–≤–æ–¥ –º–æ–Ω–µ—Ç—ã –≤ USDT

        Args:
            coin: –¢–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            price_usdt: –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã –≤ USDT

        Returns:
            (–∫–æ–º–∏—Å—Å–∏—è_–≤_–º–æ–Ω–µ—Ç–∞—Ö, –∫–æ–º–∏—Å—Å–∏—è_–≤_usdt, –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–µ—Ç–∏)
        """
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ –≤—ã–≤–æ–¥
        withdrawal_fee_coin = self.bybit.get_min_withdrawal_fee(coin)

        if withdrawal_fee_coin is None:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
            estimated_fees = {
                'BTC': 0.0005,
                'ETH': 0.005,
                'USDT': 1.0,
                'USDC': 1.0,
                'BNB': 0.0001,
                'SOL': 0.01,
                'XRP': 0.25,
                'DOGE': 5.0,
                'TRX': 1.0
            }
            withdrawal_fee_coin = estimated_fees.get(coin, 0.01)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.01 –º–æ–Ω–µ—Ç—ã
            best_chain = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–æ—Ü–µ–Ω–∫–∞)"
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–µ–π —Å–µ—Ç–∏
            best_chain_info = self.bybit.get_best_withdrawal_chain(coin)
            best_chain = best_chain_info['chain'] if best_chain_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT
        withdrawal_fee_usdt = withdrawal_fee_coin * price_usdt

        return withdrawal_fee_coin, withdrawal_fee_usdt, best_chain

    async def find_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            max_spread: float = 50.0,
            min_reserve: float = 0,
            parallel_requests: int = 500
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∏ BestChange (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)

        –° —É—á–µ—Ç–æ–º:
        - –ö–æ–º–∏—Å—Å–∏–π Bybit –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
        - –ö–æ–º–∏—Å—Å–∏–π Bybit –Ω–∞ –≤—ã–≤–æ–¥ (withdrawal fees)

        Args:
            start_amount: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ USDT
            min_spread: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            max_spread: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π)
            min_reserve: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞
            parallel_requests: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        """
        print(f"\n[BestChange Arbitrage] üöÄ –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö —Å–≤—è–∑–æ–∫...")
        print(f"[BestChange Arbitrage] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${start_amount}, —Å–ø—Ä–µ–¥ {min_spread}%-{max_spread}%")
        print(f"[BestChange Arbitrage] ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {parallel_requests}")
        print(f"[BestChange Arbitrage] üí∞ –ú–∏–Ω. —Ä–µ–∑–µ—Ä–≤: ${min_reserve}, –º–∏–Ω. –ø—Ä–∏–±—ã–ª—å: ${MIN_PROFIT_USD}")
        print(
            f"[BestChange Arbitrage] üí≥ –ö–æ–º–∏—Å—Å–∏–∏ Bybit: Taker {self.BYBIT_TAKER_FEE * 100:.4f}%, Maker {self.BYBIT_MAKER_FEE * 100:.4f}%")

        if self.bybit.withdrawal_info_loaded:
            print(
                f"[BestChange Arbitrage] ‚úÖ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è {len(self.bybit.min_withdrawal_fees)} –º–æ–Ω–µ—Ç)")
        else:
            print(f"[BestChange Arbitrage] ‚ö†Ô∏è  –ö–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–≤–æ–¥ –±—É–¥—É—Ç –æ—Ü–µ–Ω–æ—á–Ω—ã–º–∏ (–¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)")

        opportunities = []

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã
        bybit_coins = set(self.bybit.usdt_pairs.keys())
        bestchange_coins = set(self.bestchange.crypto_currencies.keys())
        common_coins = bybit_coins & bestchange_coins

        if not common_coins:
            print(f"[BestChange Arbitrage] ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –º–µ–∂–¥—É Bybit –∏ BestChange")
            return opportunities

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ª–∏–∫–≤–∏–¥–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        liquid_coins = []
        for coin in common_coins:
            liquidity = self.bybit.get_liquidity_score(coin, 'USDT')
            volume = self.bybit.get_volume_24h(coin, 'USDT')
            if liquidity >= 30:
                liquid_coins.append((coin, liquidity, volume))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquid_coins.sort(key=lambda x: x[1], reverse=True)
        common_coins_list = [coin for coin, _, _ in liquid_coins]

        print(f"[BestChange Arbitrage] ‚úì –û–±—â–∏—Ö –º–æ–Ω–µ—Ç: {len(common_coins)}")
        print(f"[BestChange Arbitrage] ‚úì –í—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö: {len(common_coins_list)}")

        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã
        all_pairs = []

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ "–≥–æ—Ä—è—á–∏–µ" –ø–∞—Ä—ã
        if ENABLE_CACHE and self.hot_pairs_cache:
            hot_pairs = list(self.hot_pairs_cache.keys())
            print(f"[BestChange Arbitrage] üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è {len(hot_pairs)} –≥–æ—Ä—è—á–∏—Ö –ø–∞—Ä")
            all_pairs.extend(hot_pairs)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
        for coin_a in common_coins_list:
            for coin_b in common_coins_list:
                if coin_a != coin_b:
                    pair = (coin_a, coin_b)
                    if pair not in all_pairs:
                        all_pairs.append(pair)

        total_pairs = len(all_pairs)
        print(f"[BestChange Arbitrage] üì¶ –í—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_pairs}")
        print(f"[BestChange Arbitrage] üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        print("=" * 100)

        self.checked_pairs = 0
        self.found_count = 0

        # –ú–∞—Å—Å–æ–≤–æ-–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        semaphore = asyncio.Semaphore(parallel_requests)
        tasks = []

        for coin_a, coin_b in all_pairs:
            task = self._check_pair_with_semaphore(
                semaphore, coin_a, coin_b, start_amount, min_spread, max_spread, min_reserve
            )
            tasks.append(task)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict) and 'spread' in result:
                opportunities.append(result)

        print("=" * 100)
        print(f"\n[BestChange Arbitrage] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"[BestChange Arbitrage] üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {self.checked_pairs}")
        print(f"[BestChange Arbitrage] üéØ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(opportunities)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≥–æ—Ä—è—á–∏—Ö –ø–∞—Ä
        if ENABLE_CACHE and opportunities:
            self._update_hot_pairs_cache(opportunities)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
        opportunities.sort(key=lambda x: x['profit'], reverse=True)

        return opportunities

    async def _check_pair_with_semaphore(
            self,
            semaphore: asyncio.Semaphore,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float,
            max_spread: float,
            min_reserve: float
    ):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        async with semaphore:
            self.checked_pairs += 1

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 200 –ø–∞—Ä
            if self.checked_pairs % 200 == 0:
                print(f"[BestChange Arbitrage] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.checked_pairs} | –ù–∞–π–¥–µ–Ω–æ: {self.found_count}")

            result = await self._check_single_pair(coin_a, coin_b, start_amount, min_spread, max_spread, min_reserve)

            if result:
                self.found_count += 1
                self._print_opportunity(result, self.found_count)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—ã
                pair_key = (coin_a, coin_b)
                self.pair_performance[pair_key]['finds'] += 1
                self.pair_performance[pair_key]['avg_spread'] = (
                                                                        self.pair_performance[pair_key]['avg_spread'] +
                                                                        result['spread']
                                                                ) / 2

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
            pair_key = (coin_a, coin_b)
            self.pair_performance[pair_key]['checks'] += 1

            return result

    async def _check_single_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float,
            max_spread: float,
            min_reserve: float
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É –º–æ–Ω–µ—Ç —Å —É—á–µ—Ç–æ–º –í–°–ï–• –∫–æ–º–∏—Å—Å–∏–π Bybit
        –°—Ö–µ–º–∞: USDT ‚Üí CoinA (Bybit + trade fee) ‚Üí CoinB (BestChange) ‚Üí USDT (Bybit + trade fee)

        –ù–û–í–û–ï: –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–≤–æ–¥ (withdrawal fees)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)

            if not price_a_usdt or price_a_usdt <= 0:
                return None
            if not price_b_usdt or price_b_usdt <= 0:
                return None

            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ—Ç BestChange
            best_rate = self.bestchange.get_best_rate(coin_a, coin_b, min_reserve)
            if not best_rate:
                return None

            give_rate = best_rate.rankrate
            if give_rate <= 0:
                return None

            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
            exchange_rate = 1.0 / give_rate

            if exchange_rate <= 0:
                return None

            # === –†–ê–°–ß–Å–¢ –° –£–ß–Å–¢–û–ú –í–°–ï–• –ö–û–ú–ò–°–°–ò–ô BYBIT ===

            # –®–∞–≥ 1: –ü–æ–∫—É–ø–∞–µ–º coin_a –∑–∞ USDT –Ω–∞ Bybit (Taker 0.18%)
            amount_coin_a_gross = start_amount / price_a_usdt
            fee_buy, amount_coin_a = self._calculate_bybit_fees(amount_coin_a_gross, is_taker=True)

            # –®–∞–≥ 2: –í—ã–≤–æ–¥–∏–º coin_a —Å Bybit (withdrawal fee)
            withdraw_fee_a_coin, withdraw_fee_a_usdt, withdraw_chain_a = self._get_withdrawal_fee_in_usdt(
                coin_a, amount_coin_a, price_a_usdt
            )
            amount_coin_a_after_withdraw = amount_coin_a - withdraw_fee_a_coin

            if amount_coin_a_after_withdraw <= 0:
                return None

            # –®–∞–≥ 3: –û–±–º–µ–Ω–∏–≤–∞–µ–º coin_a –Ω–∞ coin_b —á–µ—Ä–µ–∑ BestChange (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç –Ω–∞—Å)
            amount_coin_b = amount_coin_a_after_withdraw * exchange_rate

            # –®–∞–≥ 4: –í–Ω–æ—Å–∏–º coin_b –Ω–∞ Bybit (–æ–±—ã—á–Ω–æ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –º–∏–Ω–∏–º—É–º)
            # Deposit –æ–±—ã—á–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ —Å –æ–±–º–µ–Ω–Ω–∏–∫–∞

            # –®–∞–≥ 5: –í—ã–≤–æ–¥–∏–º coin_b —Å –æ–±–º–µ–Ω–Ω–∏–∫–∞ –Ω–∞ Bybit (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞, –Ω–æ –æ–±—ã—á–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫—É—Ä—Å)

            # –®–∞–≥ 6: –ü—Ä–æ–¥–∞—ë–º coin_b –∑–∞ USDT –Ω–∞ Bybit (Taker 0.18%)
            usdt_gross = amount_coin_b * price_b_usdt
            fee_sell, usdt_after_sell = self._calculate_bybit_fees(usdt_gross, is_taker=True)

            # –®–∞–≥ 7: –í—ã–≤–æ–¥–∏–º USDT —Å Bybit (withdrawal fee) - –ù–ï –£–ß–ò–¢–´–í–ê–ï–ú, —Ç.–∫. –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ USDT –Ω–∞ Bybit
            # –ï—Å–ª–∏ –±—ã –≤—ã–≤–æ–¥–∏–ª–∏ USDT, —Ç–æ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã—á–µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—é
            final_usdt = usdt_after_sell

            # –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ Bybit
            total_bybit_trading_fee = fee_buy * price_a_usdt + fee_sell
            total_bybit_withdrawal_fee = withdraw_fee_a_usdt
            total_bybit_fee = total_bybit_trading_fee + total_bybit_withdrawal_fee

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞
            if best_rate.give_min > 0 and amount_coin_a_after_withdraw < best_rate.give_min:
                return None
            if best_rate.give_max > 0 and amount_coin_a_after_withdraw > best_rate.give_max:
                return None

            # –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —Å–ø—Ä–µ–¥–∞
            profit = final_usdt - start_amount
            spread = (profit / start_amount) * 100

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if spread < min_spread or spread > max_spread:
                return None
            if abs(spread) > 100:
                return None
            if profit < MIN_PROFIT_USD:
                return None

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'type': 'bestchange_arbitrage',
                'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                'scheme': f"Bybit ‚Üí BestChange ‚Üí Bybit",
                'coins': [coin_a, coin_b],
                'initial': start_amount,
                'final': final_usdt,
                'profit': profit,
                'spread': spread,
                'exchanger': best_rate.exchanger,
                'exchanger_id': best_rate.exchanger_id,
                'reserve': best_rate.reserve,
                'give_min': best_rate.give_min,
                'give_max': best_rate.give_max,
                'liquidity_a': self.bybit.get_liquidity_score(coin_a, 'USDT'),
                'liquidity_b': self.bybit.get_liquidity_score(coin_b, 'USDT'),
                'volume_a': self.bybit.get_volume_24h(coin_a, 'USDT'),
                'volume_b': self.bybit.get_volume_24h(coin_b, 'USDT'),
                'bybit_url_a': self._get_bybit_trade_url(coin_a),
                'bybit_url_b': self._get_bybit_trade_url(coin_b),
                'bybit_deposit_url': self._get_bybit_deposit_url(),
                'bybit_withdraw_url': self._get_bybit_withdraw_url(),
                'exchanger_url': self._get_bestchange_exchanger_url(best_rate.exchanger_id),
                'bybit_fee_buy': fee_buy * price_a_usdt,
                'bybit_fee_sell': fee_sell,
                'bybit_trading_fee': total_bybit_trading_fee,
                'bybit_withdrawal_fee_a': withdraw_fee_a_usdt,
                'bybit_withdrawal_fee_a_coin': withdraw_fee_a_coin,
                'bybit_withdrawal_chain_a': withdraw_chain_a,
                'bybit_total_fee': total_bybit_fee,
                'steps': [
                    f"1Ô∏è‚É£  –ö—É–ø–∏—Ç—å {amount_coin_a_gross:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT –Ω–∞ Bybit (—Ü–µ–Ω–∞: ${price_a_usdt:.8f})",
                    f"    üí≥ –ö–æ–º–∏—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ Bybit (Taker 0.18%): {fee_buy:.8f} {coin_a} (${fee_buy * price_a_usdt:.4f})",
                    f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {amount_coin_a:.8f} {coin_a}",
                    f"2Ô∏è‚É£  –í—ã–≤–µ—Å—Ç–∏ {amount_coin_a:.8f} {coin_a} —Å Bybit",
                    f"    üí≥ –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ Bybit ({withdraw_chain_a}): {withdraw_fee_a_coin:.8f} {coin_a} (${withdraw_fee_a_usdt:.4f})",
                    f"    ‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ: {amount_coin_a_after_withdraw:.8f} {coin_a}",
                    f"3Ô∏è‚É£  –û–±–º–µ–Ω—è—Ç—å {amount_coin_a_after_withdraw:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} –Ω–∞ {best_rate.exchanger}",
                    f"    üìä –ö—É—Ä—Å GET: 1 {coin_a} = {exchange_rate:.8f} {coin_b}",
                    f"4Ô∏è‚É£  –í–Ω–µ—Å—Ç–∏ {amount_coin_b:.8f} {coin_b} –Ω–∞ Bybit (–æ–±—ã—á–Ω–æ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)",
                    f"5Ô∏è‚É£  –ü—Ä–æ–¥–∞—Ç—å {amount_coin_b:.8f} {coin_b} –∑–∞ {usdt_gross:.2f} USDT –Ω–∞ Bybit (—Ü–µ–Ω–∞: ${price_b_usdt:.8f})",
                    f"    üí≥ –ö–æ–º–∏—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ Bybit (Taker 0.18%): ${fee_sell:.4f}",
                    f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {final_usdt:.2f} USDT",
                    f"",
                    f"üí∞ –ò–¢–û–ì–û –∫–æ–º–∏—Å—Å–∏–π Bybit:",
                    f"   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ: ${total_bybit_trading_fee:.4f}",
                    f"   ‚Ä¢ –í—ã–≤–æ–¥ {coin_a}: ${withdraw_fee_a_usdt:.4f}",
                    f"   ‚Ä¢ –í—Å–µ–≥–æ: ${total_bybit_fee:.4f}",
                    f"‚úÖ –ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: {start_amount:.2f} USDT ‚Üí {final_usdt:.2f} USDT (+{profit:.2f} USDT, {spread:.4f}%)"
                ],
                'exchange_rate': exchange_rate,
                'give_rate': give_rate,
                'bybit_rate_a': price_a_usdt,
                'bybit_rate_b': price_b_usdt,
                'timestamp': datetime.now().isoformat()
            }

        except Exception:
            return None

    def _print_opportunity(self, opp: Dict, rank: int):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{rank} —á–µ—Ä–µ–∑ BestChange")
        print(f"   üìç –ü—É—Ç—å: {opp['path']}")
        print(f"   üîó Bybit {opp['coins'][0]}/USDT: {opp['bybit_url_a']}")
        print(f"   üîó Bybit {opp['coins'][1]}/USDT: {opp['bybit_url_b']}")
        print(f"   üîó –û–±–º–µ–Ω–Ω–∏–∫: {opp['exchanger_url']}")
        print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
        print(f"   üí≥ –ö–æ–º–∏—Å—Å–∏–∏ Bybit: ${opp['bybit_total_fee']:.4f}")
        print(f"      ‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ: ${opp['bybit_trading_fee']:.4f}")
        print(
            f"      ‚Ä¢ –í—ã–≤–æ–¥ {opp['coins'][0]} ({opp['bybit_withdrawal_chain_a']}): ${opp['bybit_withdrawal_fee_a']:.4f}")
        print(f"   üè¶ –û–±–º–µ–Ω–Ω–∏–∫: {opp['exchanger']} (—Ä–µ–∑–µ—Ä–≤: ${opp['reserve']:,.0f})")
        print(
            f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {opp['coins'][0]} ({opp['liquidity_a']:.1f}) ‚Üí {opp['coins'][1]} ({opp['liquidity_b']:.1f})")
        print(f"   üìä –ö—É—Ä—Å GET: 1 {opp['coins'][0]} = {opp['exchange_rate']:.8f} {opp['coins'][1]}")
        print("-" * 100)

    def _update_hot_pairs_cache(self, opportunities: List[Dict]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –≥–æ—Ä—è—á–∏—Ö –ø–∞—Ä"""
        sorted_opps = sorted(opportunities, key=lambda x: x['profit'], reverse=True)
        self.hot_pairs_cache.clear()

        for opp in sorted_opps[:CACHE_HOT_PAIRS]:
            pair = tuple(opp['coins'])
            self.hot_pairs_cache[pair] = {
                'last_spread': opp['spread'],
                'last_profit': opp['profit'],
                'last_check': datetime.now()
            }

        print(f"\n[Cache] üî• –û–±–Ω–æ–≤–ª—ë–Ω –∫—ç—à: {len(self.hot_pairs_cache)} –≥–æ—Ä—è—á–∏—Ö –ø–∞—Ä")

    async def analyze_specific_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float = 100.0,
            min_reserve: float = 0
    ) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –º–æ–Ω–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π"""
        print(f"\n[BestChange Arbitrage] üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {coin_a} ‚Üí {coin_b}")

        try:
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_a} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            amount_coin_a = start_amount / price_a_usdt
            print(f"   1. {start_amount} USDT ‚Üí {amount_coin_a:.8f} {coin_a} (Bybit: ${price_a_usdt:.8f})")

            # –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥
            withdraw_fee_coin, withdraw_fee_usdt, chain = self._get_withdrawal_fee_in_usdt(coin_a, amount_coin_a,
                                                                                           price_a_usdt)
            amount_after_withdraw = amount_coin_a - withdraw_fee_coin
            print(
                f"   1a. –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ {coin_a} ({chain}): {withdraw_fee_coin:.8f} {coin_a} (${withdraw_fee_usdt:.4f})")
            print(f"       –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞: {amount_after_withdraw:.8f} {coin_a}")

            print(f"   2. –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ {coin_a} ‚Üí {coin_b} –Ω–∞ BestChange...")
            top_rates = self.bestchange.get_top_rates(coin_a, coin_b, top_n=5, min_reserve=min_reserve)

            if not top_rates:
                return {'error': f'BestChange –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {coin_a} ‚Üí {coin_b}'}

            print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ {len(top_rates)} –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:")
            for idx, rate in enumerate(top_rates, 1):
                get_rate = 1.0 / rate.rankrate if rate.rankrate > 0 else 0
                amount_b = amount_after_withdraw * get_rate
                print(
                    f"      {idx}. {rate.exchanger}: –∫—É—Ä—Å GET 1 {coin_a} = {get_rate:.8f} {coin_b} ‚Üí {amount_b:.8f} {coin_b} (—Ä–µ–∑–µ—Ä–≤: ${rate.reserve:,.0f})")

            best_rate = top_rates[0]
            get_rate = 1.0 / best_rate.rankrate if best_rate.rankrate > 0 else 0
            amount_coin_b = amount_after_withdraw * get_rate

            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_b} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            final_usdt = amount_coin_b * price_b_usdt
            print(f"   3. {amount_coin_b:.8f} {coin_b} ‚Üí {final_usdt:.2f} USDT (Bybit: ${price_b_usdt:.8f})")

            spread = ((final_usdt - start_amount) / start_amount) * 100
            profit = final_usdt - start_amount

            print(f"\n   ‚úÖ –ò—Ç–æ–≥: {spread:.4f}% ({'+' if profit >= 0 else ''}{profit:.2f} USDT)")
            print(f"   üè¶ –õ—É—á—à–∏–π –æ–±–º–µ–Ω–Ω–∏–∫: {best_rate.exchanger}")
            print(f"   üí≥ –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ {coin_a}: ${withdraw_fee_usdt:.4f}")

            return {
                'success': True,
                'spread': spread,
                'profit': profit,
                'final_usdt': final_usdt,
                'exchanger': best_rate.exchanger,
                'withdrawal_fee': withdraw_fee_usdt,
                'top_exchangers': [
                    {'name': r.exchanger, 'rate': 1.0 / r.rankrate if r.rankrate > 0 else 0, 'reserve': r.reserve}
                    for r in top_rates
                ]
            }

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}

    def get_hot_pairs(self) -> List[tuple]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –ø–∞—Ä –∏–∑ –∫—ç—à–∞"""
        return list(self.hot_pairs_cache.keys())

    def get_pair_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º"""
        stats = {
            'total_pairs_checked': len(self.pair_performance),
            'hot_pairs_cached': len(self.hot_pairs_cache),
            'top_performers': []
        }

        sorted_pairs = sorted(
            self.pair_performance.items(),
            key=lambda x: x[1]['finds'] / max(x[1]['checks'], 1),
            reverse=True
        )[:10]

        for pair, perf in sorted_pairs:
            stats['top_performers'].append({
                'pair': f"{pair[0]} ‚Üí {pair[1]}",
                'finds': perf['finds'],
                'checks': perf['checks'],
                'success_rate': perf['finds'] / max(perf['checks'], 1) * 100,
                'avg_spread': perf['avg_spread']
            })

        return stats