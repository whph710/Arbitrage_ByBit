import asyncio
from typing import List, Dict, Optional
from datetime import datetime


class SimpleExchangeAnalyzer:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –æ–±–º–µ–Ω–Ω–∏–∫
    –°—Ö–µ–º–∞: Bybit (–∫—É–ø–∏—Ç—å A) ‚Üí Exchange (–æ–±–º–µ–Ω—è—Ç—å A‚ÜíB) ‚Üí Bybit (–ø—Ä–æ–¥–∞—Ç—å B)
    """

    def __init__(self, bybit_client, exchange_client, exchange_name: str):
        self.bybit = bybit_client
        self.exchange = exchange_client
        self.exchange_name = exchange_name
        self.found_count = 0
        self.checked_pairs = 0

    async def find_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            max_pairs: int = 100,
            parallel_requests: int = 10
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –æ–±–º–µ–Ω–Ω–∏–∫
        """
        print(f"\n[{self.exchange_name}] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–æ–∫...")
        print(f"[{self.exchange_name}] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ {min_spread}%")
        print(f"[{self.exchange_name}] ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {parallel_requests}")

        opportunities = []

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã –º–µ–∂–¥—É Bybit –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–º
        common_coins = self.exchange.get_common_currencies(self.bybit.coins)

        if not common_coins:
            print(f"[{self.exchange_name}] ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç —Å Bybit")
            return opportunities

        common_coins_list = sorted(list(common_coins))[:max_pairs]

        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_pairs = []
        for coin_a in common_coins_list:
            for coin_b in common_coins_list:
                if coin_a != coin_b:
                    all_pairs.append((coin_a, coin_b))

        total_pairs = len(all_pairs)
        print(f"\n[{self.exchange_name}] üì¶ –í—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_pairs}")
        print(f"[{self.exchange_name}] üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ –º–µ—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...")
        print("=" * 100)

        self.checked_pairs = 0
        self.found_count = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
        semaphore = asyncio.Semaphore(parallel_requests)
        tasks = []

        for coin_a, coin_b in all_pairs:
            task = self._check_pair_with_semaphore(
                semaphore, coin_a, coin_b, start_amount, min_spread
            )
            tasks.append(task)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict) and 'spread' in result:
                opportunities.append(result)
                self.found_count += 1
                self._print_opportunity(result, self.found_count)

        print("=" * 100)
        print(f"\n[{self.exchange_name}] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"[{self.exchange_name}] üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {self.checked_pairs}")
        print(f"[{self.exchange_name}] üéØ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {self.found_count}")
        print(f"[{self.exchange_name}] ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä: {self.exchange.get_failed_pairs_count()}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
        opportunities.sort(key=lambda x: x['spread'], reverse=True)

        return opportunities

    async def _check_pair_with_semaphore(
            self,
            semaphore: asyncio.Semaphore,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float
    ):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        async with semaphore:
            self.checked_pairs += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞—Ä (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
            if self.checked_pairs % 100 == 0:
                print(f"[{self.exchange_name}] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.checked_pairs}/9900 | –ù–∞–π–¥–µ–Ω–æ: {self.found_count}")

            return await self._check_single_pair(coin_a, coin_b, start_amount, min_spread)

    async def _check_single_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É –º–æ–Ω–µ—Ç
        –°—Ö–µ–º–∞: USDT ‚Üí CoinA (Bybit) ‚Üí CoinB (Exchange) ‚Üí USDT (Bybit)
        """
        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt or price_a_usdt <= 0:
                return None

            amount_coin_a = start_amount / price_a_usdt

            # –®–∞–≥ 2: CoinA ‚Üí CoinB –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–µ
            pair_key = f"{coin_a}_{coin_b}"

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
            if pair_key in self.exchange.failed_pairs:
                return None

            exchange_result = await self.exchange.get_estimated_amount(
                from_currency=coin_a,
                to_currency=coin_b,
                from_amount=amount_coin_a
            )

            if not exchange_result or exchange_result.get('to_amount', 0) <= 0:
                return None

            amount_coin_b = exchange_result['to_amount']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞
            if amount_coin_b <= 0 or amount_coin_a <= 0:
                return None

            exchange_rate = amount_coin_b / amount_coin_a

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt or price_b_usdt <= 0:
                return None

            final_usdt = amount_coin_b * price_b_usdt

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            spread = ((final_usdt - start_amount) / start_amount) * 100

            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–ø—Ä–µ–¥—ã
            if spread > 50.0 or spread < -50.0:
                return None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞)
            expected_price_b = price_a_usdt / exchange_rate
            price_deviation = abs(expected_price_b - price_b_usdt) / price_b_usdt * 100

            if price_deviation > 100:  # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 100%, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                return None

            if spread >= min_spread:
                return {
                    'type': 'simple_exchange_arbitrage',
                    'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                    'scheme': f"Bybit ‚Üí {self.exchange_name} ‚Üí Bybit",
                    'coins': [coin_a, coin_b],
                    'exchange_used': self.exchange_name,
                    'initial': start_amount,
                    'final': final_usdt,
                    'profit': final_usdt - start_amount,
                    'spread': spread,
                    'steps': [
                        f"1Ô∏è‚É£  –ö—É–ø–∏—Ç—å {amount_coin_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: ${price_a_usdt:.8f})",
                        f"2Ô∏è‚É£  –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount_coin_a:.8f} {coin_a} —Å Bybit –Ω–∞ {self.exchange_name}",
                        f"3Ô∏è‚É£  –û–±–º–µ–Ω—è—Ç—å {amount_coin_a:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} –Ω–∞ {self.exchange_name} (–∫—É—Ä—Å: {exchange_rate:.8f})",
                        f"4Ô∏è‚É£  –ü—Ä–æ–¥–∞—Ç—å {amount_coin_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: ${price_b_usdt:.8f})",
                        f"‚úÖ –ò–¢–û–ì: {start_amount:.2f} USDT ‚Üí {final_usdt:.2f} USDT (+{final_usdt - start_amount:.2f} USDT, {spread:.4f}%)"
                    ],
                    'exchange_rate': exchange_rate,
                    'bybit_rate_a': price_a_usdt,
                    'bybit_rate_b': price_b_usdt,
                    'timestamp': datetime.now().isoformat()
                }

            return None

        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            return None

    def _print_opportunity(self, opp: Dict, rank: int):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{rank} —á–µ—Ä–µ–∑ {self.exchange_name}")
        print(f"   üìç –ü—É—Ç—å: {opp['path']}")
        print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
        print(f"   üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç:")
        print(f"      1Ô∏è‚É£  {opp['initial']:.2f} USDT ‚Üí {opp['initial'] / opp['bybit_rate_a']:.8f} {opp['coins'][0]}")
        print(f"         (Bybit: 1 {opp['coins'][0]} = ${opp['bybit_rate_a']:.8f})")
        print(
            f"      2Ô∏è‚É£  {opp['initial'] / opp['bybit_rate_a']:.8f} {opp['coins'][0]} ‚Üí {(opp['initial'] / opp['bybit_rate_a']) * opp['exchange_rate']:.8f} {opp['coins'][1]}")
        print(f"         ({self.exchange_name}: 1 {opp['coins'][0]} = {opp['exchange_rate']:.8f} {opp['coins'][1]})")
        print(
            f"      3Ô∏è‚É£  {(opp['initial'] / opp['bybit_rate_a']) * opp['exchange_rate']:.8f} {opp['coins'][1]} ‚Üí {opp['final']:.2f} USDT")
        print(f"         (Bybit: 1 {opp['coins'][1]} = ${opp['bybit_rate_b']:.8f})")
        print(f"   ‚úÖ –ò—Ç–æ–≥: ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f} (+${opp['profit']:.4f})")
        print("-" * 100)

    async def analyze_specific_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float = 100.0
    ) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –º–æ–Ω–µ—Ç"""
        print(f"\n[{self.exchange_name}] üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {coin_a} ‚Üí {coin_b}")

        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_a} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            amount_coin_a = start_amount / price_a_usdt
            print(f"   1. {start_amount} USDT ‚Üí {amount_coin_a:.8f} {coin_a} (Bybit: ${price_a_usdt:.8f})")

            # –®–∞–≥ 2: CoinA ‚Üí CoinB –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–µ
            print(f"   2. –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ {coin_a} ‚Üí {coin_b} –Ω–∞ {self.exchange_name}...")

            exchange_result = await self.exchange.get_estimated_amount(
                from_currency=coin_a,
                to_currency=coin_b,
                from_amount=amount_coin_a
            )

            if not exchange_result:
                return {'error': f'{self.exchange_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {coin_a} ‚Üí {coin_b}'}

            amount_coin_b = exchange_result['to_amount']
            exchange_rate = amount_coin_b / amount_coin_a
            print(f"   ‚úì {amount_coin_a:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} (–∫—É—Ä—Å: {exchange_rate:.8f})")

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_b} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            final_usdt = amount_coin_b * price_b_usdt
            print(f"   3. {amount_coin_b:.8f} {coin_b} ‚Üí {final_usdt:.2f} USDT (Bybit: ${price_b_usdt:.8f})")

            spread = ((final_usdt - start_amount) / start_amount) * 100
            profit = final_usdt - start_amount

            print(f"\n   ‚úÖ –ò—Ç–æ–≥: {spread:.4f}% ({'+' if profit >= 0 else ''}{profit:.2f} USDT)")

            return {
                'success': True,
                'spread': spread,
                'profit': profit,
                'final_usdt': final_usdt,
                'exchange': self.exchange_name
            }

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}