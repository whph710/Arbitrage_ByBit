import asyncio
from typing import List, Dict, Set
from datetime import datetime
from configs import EXCHANGE_REQUEST_DELAY


class ExchangeArbitrageAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∏
    –°—Ö–µ–º–∞: Bybit ‚Üí –û–±–º–µ–Ω–Ω–∏–∫ ‚Üí Bybit
    """

    def __init__(self, bybit_client, exchange_client):
        self.bybit = bybit_client
        self.exchange = exchange_client

    async def find_arbitrage_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            top_count: int = 20,
            max_pairs_to_check: int = 100
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏:
        USDT (Bybit) ‚Üí CoinA (Bybit) ‚Üí –û–±–º–µ–Ω–Ω–∏–∫ ‚Üí CoinB (Bybit) ‚Üí USDT (Bybit)
        """

        print(f"\n[Analyzer] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∏")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ = {min_spread}%")

        opportunities = []

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã –º–µ–∂–¥—É Bybit –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–º
        common_coins = self.exchange.get_common_currencies(self.bybit.coins)

        if not common_coins:
            print("[Analyzer] ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –º–µ–∂–¥—É Bybit –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–º")
            return opportunities

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–∞—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        common_coins_list = sorted(list(common_coins))[:max_pairs_to_check]

        print(f"\n[Analyzer] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(common_coins_list)} –º–æ–Ω–µ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...")

        checked_pairs = 0
        found_pairs = 0

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–∞—Ä–∞–º –º–æ–Ω–µ—Ç
        for i, coin_a in enumerate(common_coins_list):
            for coin_b in common_coins_list:
                if coin_a == coin_b:
                    continue

                checked_pairs += 1

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–∞—Ä
                if checked_pairs % 50 == 0:
                    print(f"[Analyzer] üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {checked_pairs}, –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {found_pairs}")

                try:
                    # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
                    price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
                    if not price_a_usdt or price_a_usdt <= 0:
                        continue

                    amount_coin_a = start_amount / price_a_usdt

                    # –®–∞–≥ 2: CoinA ‚Üí CoinB —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫
                    exchange_result = await self.exchange.get_estimated_amount(
                        from_currency=coin_a,
                        to_currency=coin_b,
                        from_amount=amount_coin_a
                    )

                    if not exchange_result or exchange_result['to_amount'] <= 0:
                        continue

                    amount_coin_b = exchange_result['to_amount']
                    exchange_rate = exchange_result['rate']

                    # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
                    price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
                    if not price_b_usdt or price_b_usdt <= 0:
                        continue

                    final_usdt = amount_coin_b * price_b_usdt

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = ((final_usdt - start_amount) / start_amount) * 100

                    if spread >= min_spread:
                        found_pairs += 1

                        opportunities.append({
                            'type': 'exchange_arbitrage',
                            'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                            'scheme': "Bybit ‚Üí –û–±–º–µ–Ω–Ω–∏–∫ ‚Üí Bybit",
                            'coins': [coin_a, coin_b],
                            'initial': start_amount,
                            'final': final_usdt,
                            'profit': final_usdt - start_amount,
                            'spread': spread,
                            'steps': [
                                f"1. –ö—É–ø–∏—Ç—å {amount_coin_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: {price_a_usdt:.8f})",
                                f"2. –û–±–º–µ–Ω—è—Ç—å {amount_coin_a:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫ (–∫—É—Ä—Å: {exchange_rate:.8f})",
                                f"3. –ü—Ä–æ–¥–∞—Ç—å {amount_coin_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: {price_b_usdt:.8f})",
                                f"‚úÖ –ò—Ç–æ–≥: {start_amount:.2f} USDT ‚Üí {final_usdt:.2f} USDT (+{final_usdt - start_amount:.2f} USDT, {spread:.4f}%)"
                            ],
                            'exchange_rate': exchange_rate,
                            'bybit_rate_a': price_a_usdt,
                            'bybit_rate_b': price_b_usdt
                        })

                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä
                    continue

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
            await asyncio.sleep(0.1)

        print(f"\n[Analyzer] ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {checked_pairs}")
        print(f"[Analyzer] ‚úì –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {found_pairs}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
        opportunities.sort(key=lambda x: x['spread'], reverse=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø
        if top_count:
            top_opportunities = opportunities[:top_count]
        else:
            top_opportunities = opportunities

        self._print_results(top_opportunities, min_spread, start_amount)

        return top_opportunities

    def _print_results(self, opportunities: List[Dict], min_spread: float, start_amount: float):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""

        if opportunities:
            print("\n" + "=" * 100)
            print(f"üéØ –¢–û–ü-{len(opportunities)} –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –°–í–Ø–ó–û–ö –ß–ï–†–ï–ó –û–ë–ú–ï–ù–ù–ò–ö–ò")
            print("=" * 100 + "\n")

            for idx, opp in enumerate(opportunities, 1):
                print(f"#{idx} | {opp['path']}")
                print(f"   ‚ûú –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
                print(f"   ‚ûú –ú–æ–Ω–µ—Ç—ã: {' ‚Üí '.join(opp['coins'])}")
                print()
        else:
            print(f"\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫ —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {min_spread}% –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    async def analyze_specific_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float = 100.0
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –º–æ–Ω–µ—Ç
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        print(f"\n[Analyzer] üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {coin_a} ‚Üí {coin_b}")

        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_a} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            amount_coin_a = start_amount / price_a_usdt
            print(f"   1. {start_amount} USDT ‚Üí {amount_coin_a:.8f} {coin_a} (Bybit: {price_a_usdt:.8f})")

            # –®–∞–≥ 2: CoinA ‚Üí CoinB —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫
            exchange_result = await self.exchange.get_estimated_amount(
                from_currency=coin_a,
                to_currency=coin_b,
                from_amount=amount_coin_a
            )

            if not exchange_result:
                return {'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ {coin_a} ‚Üí {coin_b}'}

            amount_coin_b = exchange_result['to_amount']
            exchange_rate = exchange_result['rate']
            print(f"   2. {amount_coin_a:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} (–û–±–º–µ–Ω–Ω–∏–∫: {exchange_rate:.8f})")

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_b} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            final_usdt = amount_coin_b * price_b_usdt
            print(f"   3. {amount_coin_b:.8f} {coin_b} ‚Üí {final_usdt:.2f} USDT (Bybit: {price_b_usdt:.8f})")

            spread = ((final_usdt - start_amount) / start_amount) * 100
            profit = final_usdt - start_amount

            print(f"\n   ‚úÖ –ò—Ç–æ–≥: {spread:.4f}% ({'+' if profit >= 0 else ''}{profit:.2f} USDT)")

            return {
                'success': True,
                'spread': spread,
                'profit': profit,
                'final_usdt': final_usdt
            }

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}