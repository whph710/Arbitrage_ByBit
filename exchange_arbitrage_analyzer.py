import asyncio
from typing import List, Dict, Set, Optional
from datetime import datetime
from configs import EXCHANGE_REQUEST_DELAY


class MultiExchangeArbitrageAnalyzer:
    """
    –ú–£–õ–¨–¢–ò-–û–ë–ú–ï–ù–ù–ò–ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: Swapzone, ChangeNOW –∏ –¥—Ä—É–≥–∏–µ
    """

    def __init__(self, bybit_client, exchange_clients: List):
        """
        Args:
            bybit_client: –ö–ª–∏–µ–Ω—Ç Bybit
            exchange_clients: –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ [swapzone, changenow, ...]
        """
        self.bybit = bybit_client
        self.exchange_clients = exchange_clients
        self.found_count = 0
        self.checked_pairs = 0

    async def find_arbitrage_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            top_count: int = 20,
            max_pairs_to_check: int = 100,
            parallel_requests: int = 10
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ –í–°–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        """

        print(f"\n[Analyzer] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ {len(self.exchange_clients)} –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤")
        print(f"[Analyzer] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${start_amount}, –º–∏–Ω. —Å–ø—Ä–µ–¥ = {min_spread}%")
        print(f"[Analyzer] ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {parallel_requests}")

        opportunities = []

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –í–°–ï–• –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
        common_coins_all = set(self.bybit.coins)

        print(f"\n[Analyzer] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö...")
        for exchange in self.exchange_clients:
            exchange_name = exchange.__class__.__name__.replace('ClientAsync', '')
            exchange_coins = exchange.get_common_currencies(self.bybit.coins)
            common_coins_all &= exchange_coins

        if not common_coins_all:
            print("[Analyzer] ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –º–µ–∂–¥—É Bybit –∏ –≤—Å–µ–º–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º–∏")
            return opportunities

        common_coins_list = sorted(list(common_coins_all))[:max_pairs_to_check]

        print(f"\n[Analyzer] üìä –û–±—â–∏—Ö –º–æ–Ω–µ—Ç –Ω–∞ –í–°–ï–• –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö: {len(common_coins_list)}")
        print(f"[Analyzer] üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...\n")
        print("=" * 100)

        self.checked_pairs = 0
        self.found_count = 0

        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã
        all_pairs = []
        for coin_a in common_coins_list:
            for coin_b in common_coins_list:
                if coin_a != coin_b:
                    all_pairs.append((coin_a, coin_b))

        print(f"[Analyzer] üì¶ –í—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(all_pairs)}")
        print(f"[Analyzer] üéØ –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:")
        for i, exchange in enumerate(self.exchange_clients, 1):
            exchange_name = exchange.__class__.__name__.replace('ClientAsync', '')
            print(f"   {i}. {exchange_name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
        semaphore = asyncio.Semaphore(parallel_requests)
        tasks = []

        for coin_a, coin_b in all_pairs:
            task = self._check_pair_with_semaphore(
                semaphore, coin_a, coin_b, start_amount, min_spread
            )
            tasks.append(task)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict) and 'spread' in result:
                opportunities.append(result)
                self.found_count += 1
                self._print_opportunity(result, self.found_count)

        print("=" * 100)
        print(f"\n[Analyzer] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"[Analyzer] üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {self.checked_pairs}")
        print(f"[Analyzer] üéØ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {self.found_count}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º
        print(f"\n[Analyzer] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º:")
        for exchange in self.exchange_clients:
            exchange_name = exchange.__class__.__name__.replace('ClientAsync', '')
            failed = exchange.get_failed_pairs_count()
            print(f"   ‚Ä¢ {exchange_name}: {failed} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
        opportunities.sort(key=lambda x: x['spread'], reverse=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø
        if top_count:
            top_opportunities = opportunities[:top_count]
        else:
            top_opportunities = opportunities

        if top_opportunities and len(opportunities) > top_count:
            print(f"\n[Analyzer] üìã –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-{top_count} –ª—É—á—à–∏—Ö –∏–∑ {len(opportunities)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫")

        return top_opportunities

    async def _check_pair_with_semaphore(
            self,
            semaphore: asyncio.Semaphore,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float
    ):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        async with semaphore:
            self.checked_pairs += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞—Ä
            if self.checked_pairs % 100 == 0:
                print(f"[Analyzer] üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {self.checked_pairs}, –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {self.found_count}")

            return await self._check_single_pair(coin_a, coin_b, start_amount, min_spread)

    async def _check_single_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float
    ) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –í–°–ï –æ–±–º–µ–Ω–Ω–∏–∫–∏ (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)"""
        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt or price_a_usdt <= 0:
                return None

            amount_coin_a = start_amount / price_a_usdt

            # –®–∞–≥ 2: –ü—Ä–æ–±—É–µ–º –æ–±–º–µ–Ω–Ω–∏–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É (–ø–µ—Ä–≤—ã–π = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            best_result = None
            best_exchange_name = None

            for exchange in self.exchange_clients:
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫—ç—à–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä
                pair_key = f"{coin_a}_{coin_b}"
                if pair_key in exchange.failed_pairs:
                    continue

                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å
                exchange_result = await exchange.get_estimated_amount(
                    from_currency=coin_a,
                    to_currency=coin_b,
                    from_amount=amount_coin_a
                )

                if exchange_result and exchange_result['to_amount'] > 0:
                    # –ù–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π –æ–±–º–µ–Ω–Ω–∏–∫!
                    best_result = exchange_result
                    best_exchange_name = exchange.__class__.__name__.replace('ClientAsync', '')
                    break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)

            if not best_result:
                return None

            amount_coin_b = best_result['to_amount']
            exchange_rate = amount_coin_b / amount_coin_a if amount_coin_a > 0 else 0

            if exchange_rate <= 0:
                return None

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt or price_b_usdt <= 0:
                return None

            final_usdt = amount_coin_b * price_b_usdt

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            spread = ((final_usdt - start_amount) / start_amount) * 100

            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–ø—Ä–µ–¥—ã
            if spread > 50.0 or spread < -50.0:
                return None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            expected_price_b = price_a_usdt / exchange_rate
            price_deviation = abs(expected_price_b - price_b_usdt) / price_b_usdt * 100

            if price_deviation > 100:
                return None

            if spread >= min_spread:
                return {
                    'type': 'exchange_arbitrage',
                    'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                    'scheme': f"Bybit ‚Üí {best_exchange_name} ‚Üí Bybit",
                    'coins': [coin_a, coin_b],
                    'exchange_used': best_exchange_name,
                    'initial': start_amount,
                    'final': final_usdt,
                    'profit': final_usdt - start_amount,
                    'spread': spread,
                    'steps': [
                        f"1. –ö—É–ø–∏—Ç—å {amount_coin_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: {price_a_usdt:.8f})",
                        f"2. –û–±–º–µ–Ω—è—Ç—å {amount_coin_a:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} —á–µ—Ä–µ–∑ {best_exchange_name} (–∫—É—Ä—Å: {exchange_rate:.8f})",
                        f"3. –ü—Ä–æ–¥–∞—Ç—å {amount_coin_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: {price_b_usdt:.8f})",
                        f"‚úÖ –ò—Ç–æ–≥: {start_amount:.2f} USDT ‚Üí {final_usdt:.2f} USDT (+{final_usdt - start_amount:.2f} USDT, {spread:.4f}%)"
                    ],
                    'exchange_rate': exchange_rate,
                    'bybit_rate_a': price_a_usdt,
                    'bybit_rate_b': price_b_usdt,
                    'timestamp': datetime.now().isoformat()
                }

            return None

        except Exception as e:
            return None

    def _print_opportunity(self, opp: Dict, rank: int):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{rank} —á–µ—Ä–µ–∑ {opp['exchange_used']}")
        print(f"   –ü—É—Ç—å: {opp['path']}")
        print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
        print(f"   üîÑ –û–±–º–µ–Ω–Ω–∏–∫: {opp['exchange_used']}")
        print(f"   üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç:")
        print(f"      1Ô∏è‚É£  {opp['initial']:.2f} USDT ‚Üí {opp['initial'] / opp['bybit_rate_a']:.8f} {opp['coins'][0]}")
        print(f"         (Bybit: 1 {opp['coins'][0]} = ${opp['bybit_rate_a']:.8f})")
        print(
            f"      2Ô∏è‚É£  {opp['initial'] / opp['bybit_rate_a']:.8f} {opp['coins'][0]} ‚Üí {(opp['initial'] / opp['bybit_rate_a']) * opp['exchange_rate']:.8f} {opp['coins'][1]}")
        print(f"         ({opp['exchange_used']}: 1 {opp['coins'][0]} = {opp['exchange_rate']:.8f} {opp['coins'][1]})")
        print(
            f"      3Ô∏è‚É£  {(opp['initial'] / opp['bybit_rate_a']) * opp['exchange_rate']:.8f} {opp['coins'][1]} ‚Üí {opp['final']:.2f} USDT")
        print(f"         (Bybit: 1 {opp['coins'][1]} = ${opp['bybit_rate_b']:.8f})")
        print(f"   ‚úÖ –ò—Ç–æ–≥: ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f} (+ ${opp['profit']:.4f})")
        print("-" * 100)

    async def analyze_specific_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float = 100.0
    ) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –≤—Å–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏"""
        print(f"\n[Analyzer] üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {coin_a} ‚Üí {coin_b}")

        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_a} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            amount_coin_a = start_amount / price_a_usdt
            print(f"   1. {start_amount} USDT ‚Üí {amount_coin_a:.8f} {coin_a} (Bybit: {price_a_usdt:.8f})")

            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏
            print(f"\n   üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:")
            best_result = None
            best_exchange = None

            for exchange in self.exchange_clients:
                exchange_name = exchange.__class__.__name__.replace('ClientAsync', '')
                print(f"      ‚Ä¢ {exchange_name}...", end=" ")

                exchange_result = await exchange.get_estimated_amount(
                    from_currency=coin_a,
                    to_currency=coin_b,
                    from_amount=amount_coin_a
                )

                if exchange_result and exchange_result['to_amount'] > 0:
                    amount_coin_b = exchange_result['to_amount']
                    exchange_rate = amount_coin_b / amount_coin_a
                    print(f"‚úì {amount_coin_b:.8f} {coin_b} (–∫—É—Ä—Å: {exchange_rate:.8f})")

                    if best_result is None or amount_coin_b > best_result['to_amount']:
                        best_result = exchange_result
                        best_exchange = exchange_name
                else:
                    print("‚úó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

            if not best_result:
                return {'error': f'–ù–∏ –æ–¥–∏–Ω –æ–±–º–µ–Ω–Ω–∏–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {coin_a} ‚Üí {coin_b}'}

            amount_coin_b = best_result['to_amount']
            exchange_rate = amount_coin_b / amount_coin_a
            print(f"\n   ‚≠ê –õ—É—á—à–∏–π: {best_exchange} ‚Üí {amount_coin_b:.8f} {coin_b}")

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_b} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            final_usdt = amount_coin_b * price_b_usdt
            print(f"   3. {amount_coin_b:.8f} {coin_b} ‚Üí {final_usdt:.2f} USDT (Bybit: {price_b_usdt:.8f})")

            spread = ((final_usdt - start_amount) / start_amount) * 100
            profit = final_usdt - start_amount

            print(f"\n   ‚úÖ –ò—Ç–æ–≥: {spread:.4f}% ({'+' if profit >= 0 else ''}{profit:.2f} USDT)")
            print(f"   üèÜ –õ—É—á—à–∏–π –æ–±–º–µ–Ω–Ω–∏–∫: {best_exchange}")

            return {
                'success': True,
                'spread': spread,
                'profit': profit,
                'final_usdt': final_usdt,
                'best_exchange': best_exchange
            }

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}