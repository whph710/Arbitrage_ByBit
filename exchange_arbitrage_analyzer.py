import asyncio
from typing import List, Dict, Optional
from datetime import datetime


class ExchangeArbitrageAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∏ (BestChange)
    –°—Ö–µ–º–∞: Bybit (–∫—É–ø–∏—Ç—å A) ‚Üí BestChange (–æ–±–º–µ–Ω—è—Ç—å A‚ÜíB) ‚Üí Bybit (–ø—Ä–æ–¥–∞—Ç—å B)
    """

    def __init__(self, bybit_client, bestchange_client):
        self.bybit = bybit_client
        self.bestchange = bestchange_client
        self.found_count = 0
        self.checked_pairs = 0

    async def find_opportunities(
            self,
            start_amount: float = 100.0,
            min_spread: float = 0.3,
            max_spread: float = 50.0,
            min_reserve: float = 0,
            parallel_requests: int = 50
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∏ BestChange

        Args:
            start_amount: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ USDT
            min_spread: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            max_spread: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π)
            min_reserve: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞
            parallel_requests: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        """
        print(f"\n[BestChange Arbitrage] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–æ–∫...")
        print(f"[BestChange Arbitrage] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${start_amount}, —Å–ø—Ä–µ–¥ {min_spread}%-{max_spread}%")
        print(f"[BestChange Arbitrage] ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {parallel_requests}")
        print(f"[BestChange Arbitrage] üí∞ –ú–∏–Ω. —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞: ${min_reserve}")

        opportunities = []

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã –º–µ–∂–¥—É Bybit –∏ BestChange
        bybit_coins = set(self.bybit.usdt_pairs.keys())
        bestchange_coins = set(self.bestchange.crypto_currencies.keys())
        common_coins = bybit_coins & bestchange_coins

        if not common_coins:
            print(f"[BestChange Arbitrage] ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç –º–µ–∂–¥—É Bybit –∏ BestChange")
            return opportunities

        common_coins_list = sorted(list(common_coins))
        print(f"[BestChange Arbitrage] ‚úì –û–±—â–∏—Ö –º–æ–Ω–µ—Ç: {len(common_coins_list)}")

        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_pairs = []
        for coin_a in common_coins_list:
            for coin_b in common_coins_list:
                if coin_a != coin_b:
                    all_pairs.append((coin_a, coin_b))

        total_pairs = len(all_pairs)
        print(f"[BestChange Arbitrage] üì¶ –í—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_pairs}")
        print(f"[BestChange Arbitrage] üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ –º–µ—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...")
        print("=" * 100)

        self.checked_pairs = 0
        self.found_count = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
        semaphore = asyncio.Semaphore(parallel_requests)
        tasks = []

        for coin_a, coin_b in all_pairs:
            task = self._check_pair_with_semaphore(
                semaphore, coin_a, coin_b, start_amount, min_spread, max_spread, min_reserve
            )
            tasks.append(task)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict) and 'spread' in result:
                opportunities.append(result)

        print("=" * 100)
        print(f"\n[BestChange Arbitrage] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"[BestChange Arbitrage] üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {self.checked_pairs}")
        print(f"[BestChange Arbitrage] üéØ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(opportunities)}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
        opportunities.sort(key=lambda x: x['spread'], reverse=True)

        return opportunities

    async def _check_pair_with_semaphore(
            self,
            semaphore: asyncio.Semaphore,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float,
            max_spread: float,
            min_reserve: float
    ):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        async with semaphore:
            self.checked_pairs += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞—Ä
            if self.checked_pairs % 100 == 0:
                print(f"[BestChange Arbitrage] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.checked_pairs} | –ù–∞–π–¥–µ–Ω–æ: {self.found_count}")

            result = await self._check_single_pair(coin_a, coin_b, start_amount, min_spread, max_spread, min_reserve)

            if result:
                self.found_count += 1
                self._print_opportunity(result, self.found_count)

            return result

    async def _check_single_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float,
            min_spread: float,
            max_spread: float,
            min_reserve: float
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É –º–æ–Ω–µ—Ç
        –°—Ö–µ–º–∞: USDT ‚Üí CoinA (Bybit) ‚Üí CoinB (BestChange) ‚Üí USDT (Bybit)
        """
        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt or price_a_usdt <= 0:
                return None

            amount_coin_a = start_amount / price_a_usdt

            # –®–∞–≥ 2: CoinA ‚Üí CoinB –Ω–∞ BestChange (–ø–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –∫—É—Ä—Å)
            best_rate = self.bestchange.get_best_rate(coin_a, coin_b, min_reserve)

            if not best_rate:
                return None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º rankrate (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏)
            exchange_rate = best_rate.rankrate
            if exchange_rate <= 0:
                return None

            amount_coin_b = amount_coin_a * exchange_rate

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –æ–±–º–µ–Ω–Ω–∏–∫–∞
            if best_rate.give_min > 0 and amount_coin_a < best_rate.give_min:
                return None
            if best_rate.give_max > 0 and amount_coin_a > best_rate.give_max:
                return None

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt or price_b_usdt <= 0:
                return None

            final_usdt = amount_coin_b * price_b_usdt

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            spread = ((final_usdt - start_amount) / start_amount) * 100

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
            if spread < min_spread or spread > max_spread:
                return None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π)
            if abs(spread) > 100:
                return None

            return {
                'type': 'bestchange_arbitrage',
                'path': f"USDT ‚Üí {coin_a} ‚Üí {coin_b} ‚Üí USDT",
                'scheme': f"Bybit ‚Üí BestChange ‚Üí Bybit",
                'coins': [coin_a, coin_b],
                'initial': start_amount,
                'final': final_usdt,
                'profit': final_usdt - start_amount,
                'spread': spread,
                'exchanger': best_rate.exchanger,
                'exchanger_id': best_rate.exchanger_id,
                'reserve': best_rate.reserve,
                'give_min': best_rate.give_min,
                'give_max': best_rate.give_max,
                'steps': [
                    f"1Ô∏è‚É£  –ö—É–ø–∏—Ç—å {amount_coin_a:.8f} {coin_a} –∑–∞ {start_amount:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: ${price_a_usdt:.8f})",
                    f"2Ô∏è‚É£  –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount_coin_a:.8f} {coin_a} —Å Bybit –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫ {best_rate.exchanger}",
                    f"3Ô∏è‚É£  –û–±–º–µ–Ω—è—Ç—å {amount_coin_a:.8f} {coin_a} ‚Üí {amount_coin_b:.8f} {coin_b} –Ω–∞ {best_rate.exchanger} (–∫—É—Ä—Å: {exchange_rate:.8f})",
                    f"4Ô∏è‚É£  –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount_coin_b:.8f} {coin_b} —Å –æ–±–º–µ–Ω–Ω–∏–∫–∞ –Ω–∞ Bybit",
                    f"5Ô∏è‚É£  –ü—Ä–æ–¥–∞—Ç—å {amount_coin_b:.8f} {coin_b} –∑–∞ {final_usdt:.2f} USDT –Ω–∞ Bybit (–∫—É—Ä—Å: ${price_b_usdt:.8f})",
                    f"‚úÖ –ò–¢–û–ì: {start_amount:.2f} USDT ‚Üí {final_usdt:.2f} USDT (+{final_usdt - start_amount:.2f} USDT, {spread:.4f}%)"
                ],
                'exchange_rate': exchange_rate,
                'bybit_rate_a': price_a_usdt,
                'bybit_rate_b': price_b_usdt,
                'timestamp': datetime.now().isoformat()
            }

        except Exception:
            return None

    def _print_opportunity(self, opp: Dict, rank: int):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–ö–ê #{rank} —á–µ—Ä–µ–∑ BestChange")
        print(f"   üìç –ü—É—Ç—å: {opp['path']}")
        print(f"   üí∞ –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}")
        print(f"   üè¶ –û–±–º–µ–Ω–Ω–∏–∫: {opp['exchanger']} (—Ä–µ–∑–µ—Ä–≤: ${opp['reserve']:,.0f})")
        print(f"   üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç:")
        print(f"      1Ô∏è‚É£  {opp['initial']:.2f} USDT ‚Üí {opp['initial'] / opp['bybit_rate_a']:.8f} {opp['coins'][0]}")
        print(f"         (Bybit: 1 {opp['coins'][0]} = ${opp['bybit_rate_a']:.8f})")
        print(
            f"      2Ô∏è‚É£  {opp['initial'] / opp['bybit_rate_a']:.8f} {opp['coins'][0]} ‚Üí {(opp['initial'] / opp['bybit_rate_a']) * opp['exchange_rate']:.8f} {opp['coins'][1]}")
        print(f"         ({opp['exchanger']}: 1 {opp['coins'][0]} = {opp['exchange_rate']:.8f} {opp['coins'][1]})")
        print(
            f"      3Ô∏è‚É£  {(opp['initial'] / opp['bybit_rate_a']) * opp['exchange_rate']:.8f} {opp['coins'][1]} ‚Üí {opp['final']:.2f} USDT")
        print(f"         (Bybit: 1 {opp['coins'][1]} = ${opp['bybit_rate_b']:.8f})")
        print(f"   ‚úÖ –ò—Ç–æ–≥: ${opp['initial']:.2f} ‚Üí ${opp['final']:.2f} (+${opp['profit']:.4f})")
        print("-" * 100)

    async def analyze_specific_pair(
            self,
            coin_a: str,
            coin_b: str,
            start_amount: float = 100.0,
            min_reserve: float = 0
    ) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –º–æ–Ω–µ—Ç"""
        print(f"\n[BestChange Arbitrage] üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {coin_a} ‚Üí {coin_b}")

        try:
            # –®–∞–≥ 1: USDT ‚Üí CoinA –Ω–∞ Bybit
            price_a_usdt = self.bybit.usdt_pairs.get(coin_a)
            if not price_a_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_a} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            amount_coin_a = start_amount / price_a_usdt
            print(f"   1. {start_amount} USDT ‚Üí {amount_coin_a:.8f} {coin_a} (Bybit: ${price_a_usdt:.8f})")

            # –®–∞–≥ 2: CoinA ‚Üí CoinB –Ω–∞ BestChange
            print(f"   2. –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ {coin_a} ‚Üí {coin_b} –Ω–∞ BestChange...")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
            top_rates = self.bestchange.get_top_rates(coin_a, coin_b, top_n=5, min_reserve=min_reserve)

            if not top_rates:
                return {'error': f'BestChange –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {coin_a} ‚Üí {coin_b}'}

            print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ {len(top_rates)} –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:")
            for idx, rate in enumerate(top_rates, 1):
                amount_b = amount_coin_a * rate.rankrate
                print(
                    f"      {idx}. {rate.exchanger}: –∫—É—Ä—Å {rate.rankrate:.8f} ‚Üí {amount_b:.8f} {coin_b} (—Ä–µ–∑–µ—Ä–≤: ${rate.reserve:,.0f})")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∫—É—Ä—Å
            best_rate = top_rates[0]
            amount_coin_b = amount_coin_a * best_rate.rankrate

            # –®–∞–≥ 3: CoinB ‚Üí USDT –Ω–∞ Bybit
            price_b_usdt = self.bybit.usdt_pairs.get(coin_b)
            if not price_b_usdt:
                return {'error': f'–¶–µ–Ω–∞ {coin_b} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Bybit'}

            final_usdt = amount_coin_b * price_b_usdt
            print(f"   3. {amount_coin_b:.8f} {coin_b} ‚Üí {final_usdt:.2f} USDT (Bybit: ${price_b_usdt:.8f})")

            spread = ((final_usdt - start_amount) / start_amount) * 100
            profit = final_usdt - start_amount

            print(f"\n   ‚úÖ –ò—Ç–æ–≥: {spread:.4f}% ({'+' if profit >= 0 else ''}{profit:.2f} USDT)")
            print(f"   üè¶ –õ—É—á—à–∏–π –æ–±–º–µ–Ω–Ω–∏–∫: {best_rate.exchanger}")

            return {
                'success': True,
                'spread': spread,
                'profit': profit,
                'final_usdt': final_usdt,
                'exchanger': best_rate.exchanger,
                'top_exchangers': [
                    {
                        'name': r.exchanger,
                        'rate': r.rankrate,
                        'reserve': r.reserve
                    } for r in top_rates
                ]
            }

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {'error': str(e)}