import json
import csv
from datetime import datetime
from pathlib import Path
from typing import List, Dict
from configs import RESULTS_DIR


class ResultsSaver:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""

    def __init__(self, results_dir: Path = RESULTS_DIR):
        self.results_dir = results_dir
        self.results_dir.mkdir(exist_ok=True)

    def save_opportunities(
            self,
            opportunities: List[Dict],
            start_amount: float,
            min_spread: float,
            execution_time: float,
            save_formats: List[str] = ['json', 'txt', 'csv']
    ) -> Dict[str, Path]:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

        Args:
            opportunities: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            start_amount: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
            min_spread: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
            execution_time: –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            save_formats: —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ['json', 'txt', 'csv', 'html']

        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        saved_files = {}

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'timestamp': datetime.now().isoformat(),
            'start_amount': start_amount,
            'min_spread': min_spread,
            'execution_time': execution_time,
            'total_opportunities': len(opportunities)
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        if 'json' in save_formats:
            json_path = self.results_dir / f'arbitrage_{timestamp}.json'
            self._save_json(json_path, opportunities, metadata)
            saved_files['json'] = json_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ TXT
        if 'txt' in save_formats:
            txt_path = self.results_dir / f'arbitrage_{timestamp}.txt'
            self._save_txt(txt_path, opportunities, metadata)
            saved_files['txt'] = txt_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        if 'csv' in save_formats:
            csv_path = self.results_dir / f'arbitrage_{timestamp}.csv'
            self._save_csv(csv_path, opportunities, metadata)
            saved_files['csv'] = csv_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ HTML
        if 'html' in save_formats:
            html_path = self.results_dir / f'arbitrage_{timestamp}.html'
            self._save_html(html_path, opportunities, metadata)
            saved_files['html'] = html_path

        return saved_files

    def _save_json(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        data = {
            'metadata': metadata,
            'opportunities': opportunities
        }

        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def _save_txt(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(path, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("=" * 100 + "\n")
            f.write("üöÄ CRYPTO ARBITRAGE BOT ‚Äî –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê\n")
            f.write("=" * 100 + "\n\n")

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            f.write(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {metadata['timestamp']}\n")
            f.write(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${metadata['start_amount']:.2f}\n")
            f.write(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {metadata['min_spread']}%\n")
            f.write(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metadata['execution_time']:.2f} —Å–µ–∫\n")
            f.write(f"üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {metadata['total_opportunities']}\n\n")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ö–µ–º–∞–º
            if opportunities:
                schemes_stats = self._calculate_schemes_stats(opportunities)
                f.write("=" * 100 + "\n")
                f.write("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–•–ï–ú–ê–ú\n")
                f.write("=" * 100 + "\n\n")

                for scheme, stats in sorted(schemes_stats.items(), key=lambda x: x[1]['max_spread'], reverse=True):
                    f.write(f"‚Ä¢ {scheme}\n")
                    f.write(f"  –ù–∞–π–¥–µ–Ω–æ: {stats['count']} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")
                    f.write(f"  –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {stats['max_spread']:.4f}%\n")
                    f.write(f"  –û–±—â–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:.2f}\n\n")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            if opportunities:
                f.write("\n" + "=" * 100 + "\n")
                f.write(f"üéØ –¢–û–ü-{len(opportunities)} –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô\n")
                f.write("=" * 100 + "\n\n")

                for idx, opp in enumerate(opportunities, 1):
                    f.write(f"#{idx} | –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}\n")
                    f.write(f"    –°—Ö–µ–º–∞: {opp['scheme']}\n")
                    f.write(f"    –ü—É—Ç—å: {opp['path']}\n")
                    f.write(f"    –î–µ—Ç–∞–ª–∏:\n")
                    for step in opp['steps']:
                        f.write(f"       {step}\n")

                    if 'debug' in opp and 'reserve' in opp['debug']:
                        reserve = opp['debug'].get('reserve', 0)
                        if reserve > 0:
                            f.write(f"    üí∞ –†–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞: ${reserve:.2f}\n")
                    f.write("\n")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            f.write("\n" + "=" * 100 + "\n")
            f.write("‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø\n")
            f.write("=" * 100 + "\n\n")
            f.write("1. –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂ (–æ–±—ã—á–Ω–æ 0.1-0.2% –∑–∞ —Å–¥–µ–ª–∫—É)\n")
            f.write("2. –û–±–º–µ–Ω–Ω–∏–∫–∏ BestChange –±–µ—Ä—É—Ç –∫–æ–º–∏—Å—Å–∏—é (–æ–±—ã—á–Ω–æ 0.5-2%)\n")
            f.write("3. –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–º–∏—Å—Å–∏–π –∑–∞ –≤—ã–≤–æ–¥\n")
            f.write("4. –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏\n")
            f.write("5. –†–µ–∑–µ—Ä–≤—ã –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º\n")
            f.write("6. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫!\n")

    def _save_csv(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(path, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'Rank',
                'Scheme',
                'Path',
                'Spread %',
                'Profit $',
                'Initial $',
                'Final $',
                'Buy Exchange',
                'Sell Exchange',
                'Coins',
                'Steps'
            ])

            # –î–∞–Ω–Ω—ã–µ
            for idx, opp in enumerate(opportunities, 1):
                buy_exchange = opp.get('debug', {}).get('buy_exchange', 'N/A')
                sell_exchange = opp.get('debug', {}).get('sell_exchange', 'N/A')
                coins = ' ‚Üí '.join(opp.get('coins', []))
                steps = ' | '.join(opp.get('steps', []))

                writer.writerow([
                    idx,
                    opp['scheme'],
                    opp['path'],
                    f"{opp['spread']:.4f}",
                    f"{opp['profit']:.2f}",
                    f"{opp['initial']:.2f}",
                    f"{opp['final']:.2f}",
                    buy_exchange,
                    sell_exchange,
                    coins,
                    steps
                ])

    def _save_html(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arbitrage Results - {metadata['timestamp']}</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f5f5f5; padding: 20px; }}
        .container {{ max-width: 1400px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; }}
        .header h1 {{ margin-bottom: 10px; }}
        .metadata {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; padding: 20px; background: #f8f9fa; }}
        .metadata-item {{ padding: 15px; background: white; border-radius: 5px; border-left: 4px solid #667eea; }}
        .metadata-item strong {{ display: block; color: #667eea; margin-bottom: 5px; }}
        .stats {{ padding: 20px; }}
        .scheme-stat {{ padding: 15px; margin: 10px 0; background: #f8f9fa; border-radius: 5px; border-left: 4px solid #28a745; }}
        .opportunities {{ padding: 20px; }}
        .opportunity {{ margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 5px; border-left: 4px solid #667eea; }}
        .opportunity-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }}
        .opportunity-rank {{ font-size: 24px; font-weight: bold; color: #667eea; }}
        .spread {{ font-size: 20px; font-weight: bold; color: #28a745; }}
        .profit {{ font-size: 18px; color: #28a745; }}
        .scheme-badge {{ display: inline-block; padding: 5px 15px; background: #667eea; color: white; border-radius: 20px; font-size: 12px; }}
        .path {{ font-weight: bold; color: #333; margin: 10px 0; }}
        .steps {{ margin-top: 15px; padding-left: 20px; }}
        .step {{ padding: 8px 0; border-bottom: 1px solid #e0e0e0; }}
        .step:last-child {{ border-bottom: none; }}
        .reserve {{ margin-top: 10px; padding: 10px; background: #fff3cd; border-radius: 5px; color: #856404; }}
        .warning {{ background: #fff3cd; padding: 20px; margin: 20px; border-radius: 5px; border-left: 4px solid #ffc107; }}
        .warning h3 {{ color: #856404; margin-bottom: 10px; }}
        .warning ul {{ padding-left: 20px; }}
        .warning li {{ margin: 5px 0; color: #856404; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Crypto Arbitrage Bot ‚Äî –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h1>
            <p>–ú—É–ª—å—Ç–∏-–±–∏—Ä–∂–µ–≤–æ–π –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</p>
        </div>

        <div class="metadata">
            <div class="metadata-item">
                <strong>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>
                {metadata['timestamp']}
            </div>
            <div class="metadata-item">
                <strong>üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞</strong>
                ${metadata['start_amount']:.2f}
            </div>
            <div class="metadata-item">
                <strong>üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥</strong>
                {metadata['min_spread']}%
            </div>
            <div class="metadata-item">
                <strong>‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</strong>
                {metadata['execution_time']:.2f} —Å–µ–∫
            </div>
            <div class="metadata-item">
                <strong>üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</strong>
                {metadata['total_opportunities']}
            </div>
        </div>
"""

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ö–µ–º–∞–º
        if opportunities:
            schemes_stats = self._calculate_schemes_stats(opportunities)
            html_content += """
        <div class="stats">
            <h2>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ö–µ–º–∞–º</h2>
"""
            for scheme, stats in sorted(schemes_stats.items(), key=lambda x: x[1]['max_spread'], reverse=True):
                html_content += f"""
            <div class="scheme-stat">
                <strong>{scheme}</strong><br>
                –ù–∞–π–¥–µ–Ω–æ: {stats['count']} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π | 
                –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {stats['max_spread']:.4f}% | 
                –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:.2f}
            </div>
"""
            html_content += """
        </div>
"""

        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        if opportunities:
            html_content += """
        <div class="opportunities">
            <h2>üéØ –¢–æ–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</h2>
"""
            for idx, opp in enumerate(opportunities, 1):
                reserve_html = ""
                if 'debug' in opp and 'reserve' in opp['debug']:
                    reserve = opp['debug'].get('reserve', 0)
                    if reserve > 0:
                        reserve_html = f'<div class="reserve">üí∞ –†–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞: ${reserve:.2f}</div>'

                steps_html = ""
                for step in opp['steps']:
                    steps_html += f'<div class="step">{step}</div>'

                html_content += f"""
            <div class="opportunity">
                <div class="opportunity-header">
                    <div>
                        <span class="opportunity-rank">#{idx}</span>
                        <span class="scheme-badge">{opp['scheme']}</span>
                    </div>
                    <div>
                        <span class="spread">{opp['spread']:.4f}%</span>
                        <span class="profit"> | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}</span>
                    </div>
                </div>
                <div class="path">–ü—É—Ç—å: {opp['path']}</div>
                <div class="steps">
                    <strong>–î–µ—Ç–∞–ª–∏:</strong>
                    {steps_html}
                </div>
                {reserve_html}
            </div>
"""
            html_content += """
        </div>
"""

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        html_content += """
        <div class="warning">
            <h3>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h3>
            <ul>
                <li>–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂ (–æ–±—ã—á–Ω–æ 0.1-0.2% –∑–∞ —Å–¥–µ–ª–∫—É)</li>
                <li>–û–±–º–µ–Ω–Ω–∏–∫–∏ BestChange –±–µ—Ä—É—Ç –∫–æ–º–∏—Å—Å–∏—é (–æ–±—ã—á–Ω–æ 0.5-2%)</li>
                <li>–ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–º–∏—Å—Å–∏–π –∑–∞ –≤—ã–≤–æ–¥</li>
                <li>–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏</li>
                <li>–†–µ–∑–µ—Ä–≤—ã –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º</li>
                <li>–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫!</li>
            </ul>
        </div>
    </div>
</body>
</html>"""

        with open(path, 'w', encoding='utf-8') as f:
            f.write(html_content)

    def _calculate_schemes_stats(self, opportunities: List[Dict]) -> Dict:
        """–ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ö–µ–º–∞–º"""
        schemes_stats = {}
        for opp in opportunities:
            scheme = opp['scheme']
            if scheme not in schemes_stats:
                schemes_stats[scheme] = {'count': 0, 'max_spread': 0, 'total_profit': 0}
            schemes_stats[scheme]['count'] += 1
            schemes_stats[scheme]['max_spread'] = max(schemes_stats[scheme]['max_spread'], opp['spread'])
            schemes_stats[scheme]['total_profit'] += opp['profit']
        return schemes_stats