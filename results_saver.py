import json
import csv
from datetime import datetime
from pathlib import Path
from typing import List, Dict
from configs import RESULTS_DIR


class ResultsSaver:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""

    def __init__(self, results_dir: Path = RESULTS_DIR):
        self.results_dir = results_dir
        self.results_dir.mkdir(exist_ok=True)

    def save_opportunities(
            self,
            opportunities: List[Dict],
            start_amount: float,
            min_spread: float,
            execution_time: float,
            save_formats: List[str] = ['json', 'txt', 'csv', 'html']
    ) -> Dict[str, Path]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        saved_files = {}

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'timestamp': datetime.now().isoformat(),
            'start_amount': start_amount,
            'min_spread': min_spread,
            'execution_time': execution_time,
            'total_opportunities': len(opportunities),
            'arbitrage_type': 'internal_bybit'
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        if 'json' in save_formats:
            json_path = self.results_dir / f'internal_arbitrage_{timestamp}.json'
            self._save_json(json_path, opportunities, metadata)
            saved_files['json'] = json_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ TXT
        if 'txt' in save_formats:
            txt_path = self.results_dir / f'internal_arbitrage_{timestamp}.txt'
            self._save_txt(txt_path, opportunities, metadata)
            saved_files['txt'] = txt_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        if 'csv' in save_formats:
            csv_path = self.results_dir / f'internal_arbitrage_{timestamp}.csv'
            self._save_csv(csv_path, opportunities, metadata)
            saved_files['csv'] = csv_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ HTML
        if 'html' in save_formats:
            html_path = self.results_dir / f'internal_arbitrage_{timestamp}.html'
            self._save_html(html_path, opportunities, metadata)
            saved_files['html'] = html_path

        return saved_files

    def _save_json(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        data = {
            'metadata': metadata,
            'opportunities': opportunities
        }

        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def _save_txt(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(path, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("=" * 100 + "\n")
            f.write("üöÄ CRYPTO ARBITRAGE BOT v6.0 ‚Äî –í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–û–ô –ê–†–ë–ò–¢–†–ê–ñ –ù–ê BYBIT\n")
            f.write("=" * 100 + "\n\n")

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            f.write(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {metadata['timestamp']}\n")
            f.write(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${metadata['start_amount']:.2f}\n")
            f.write(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {metadata['min_spread']}%\n")
            f.write(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metadata['execution_time']:.2f} —Å–µ–∫\n")
            f.write(f"üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {metadata['total_opportunities']}\n\n")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            if opportunities:
                types_stats = self._calculate_types_stats(opportunities)
                f.write("=" * 100 + "\n")
                f.write("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú\n")
                f.write("=" * 100 + "\n\n")

                type_names = {
                    'triangular': 'üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π (3 —Å–¥–µ–ª–∫–∏)',
                    'quadrilateral': 'üî∂ –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π (4 —Å–¥–µ–ª–∫–∏)',
                    'bestchange_arbitrage': 'üîÄ –ß–µ—Ä–µ–∑ BestChange'
                }

                for opp_type, stats in sorted(types_stats.items(), key=lambda x: x[1]['max_spread'], reverse=True):
                    type_name = type_names.get(opp_type, opp_type)
                    f.write(f"{type_name}\n")
                    f.write(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {stats['count']} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")
                    f.write(f"  ‚Ä¢ –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {stats['max_spread']:.4f}%\n")
                    f.write(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {stats['avg_spread']:.4f}%\n")
                    f.write(f"  ‚Ä¢ –°—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:.2f}\n\n")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            if opportunities:
                f.write("\n" + "=" * 100 + "\n")
                f.write(f"üéØ –°–ü–ò–°–û–ö –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô\n")
                f.write("=" * 100 + "\n\n")

                for idx, opp in enumerate(opportunities, 1):
                    icon = "üî∫" if opp['type'] == 'triangular' else ("üî∂" if opp['type'] == 'quadrilateral' else "üîÄ")
                    f.write(f"{icon} #{idx} | –°–ø—Ä–µ–¥: {opp['spread']:.4f}% | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}\n")
                    f.write(f"    –¢–∏–ø: {opp.get('type', 'N/A')}\n")
                    f.write(f"    –°—Ö–µ–º–∞: {opp['scheme']}\n")
                    f.write(f"    –ü—É—Ç—å: {opp['path']}\n")
                    f.write(f"    –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${opp['initial']:.2f} ‚Üí –§–∏–Ω–∞–ª—å–Ω–∞—è: ${opp['final']:.2f}\n")
                    f.write(f"    –î–µ—Ç–∞–ª–∏:\n")
                    for step in opp['steps']:
                        f.write(f"       {step}\n")
                    f.write("\n")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            f.write("\n" + "=" * 100 + "\n")
            f.write("‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø\n")
            f.write("=" * 100 + "\n\n")
            f.write("1. –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂–∏ (~0.1% –∑–∞ —Å–¥–µ–ª–∫—É)\n")
            f.write("2. –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: 3 —Å–¥–µ–ª–∫–∏ = ~0.3% –∫–æ–º–∏—Å—Å–∏–π\n")
            f.write("3. –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: 4 —Å–¥–µ–ª–∫–∏ = ~0.4% –∫–æ–º–∏—Å—Å–∏–π\n")
            f.write("4. –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏\n")
            f.write("5. –í—Å–µ —Å–¥–µ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ\n")
            f.write("6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–µ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è\n")
            f.write("7. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫!\n")

    def _save_csv(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(path, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'Rank',
                'Type',
                'Scheme',
                'Path',
                'Spread %',
                'Profit $',
                'Initial $',
                'Final $',
                'Num Coins',
                'Coins',
                'Steps'
            ])

            # –î–∞–Ω–Ω—ã–µ
            for idx, opp in enumerate(opportunities, 1):
                opp_type = opp.get('type', 'N/A')
                coins = ' ‚Üí '.join(opp.get('coins', []))
                num_coins = len(opp.get('coins', []))
                steps = ' | '.join(opp.get('steps', []))

                writer.writerow([
                    idx,
                    opp_type,
                    opp['scheme'],
                    opp['path'],
                    f"{opp['spread']:.4f}",
                    f"{opp['profit']:.4f}",
                    f"{opp['initial']:.2f}",
                    f"{opp['final']:.2f}",
                    num_coins,
                    coins,
                    steps
                ])

    def _extract_rates_from_opportunity(self, opp: Dict) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—É—Ä—Å—ã –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        rates = []

        # –î–ª—è BestChange –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if opp['type'] == 'bestchange_arbitrage':
            coin_a = opp['coins'][0] if len(opp['coins']) > 0 else 'UNKNOWN'
            coin_b = opp['coins'][1] if len(opp['coins']) > 1 else 'UNKNOWN'

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ opportunity
            bybit_rate_a = opp.get('bybit_rate_a', 0)
            exchange_rate = opp.get('exchange_rate', 0)
            bybit_rate_b = opp.get('bybit_rate_b', 0)

            rates = [
                {'from': 'USDT', 'to': coin_a, 'rate': bybit_rate_a},
                {'from': coin_a, 'to': coin_b, 'rate': exchange_rate},
                {'from': coin_b, 'to': 'USDT', 'rate': bybit_rate_b}
            ]

            return rates

        # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∏ —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        path_parts = opp['path'].split(' ‚Üí ')

        # –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: USDT ‚Üí A ‚Üí B ‚Üí USDT
        if opp['type'] == 'triangular' and len(path_parts) == 4:
            coin_a = path_parts[1]
            coin_b = path_parts[2]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ steps —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            for step in opp['steps']:
                try:
                    if '–ö—É–ø–∏—Ç—å' in step and coin_a in step and 'USDT' in step:
                        # USDT -> A: –∏—â–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ "–ø–æ —Ü–µ–Ω–µ $"
                        if '–ø–æ —Ü–µ–Ω–µ $' in step:
                            rate_str = step.split('–ø–æ —Ü–µ–Ω–µ $')[1].split(')')[0].strip()
                            rates.append({'from': 'USDT', 'to': coin_a, 'rate': float(rate_str)})

                    elif coin_a in step and coin_b in step and '–û–±–º–µ–Ω' in step:
                        # A -> B: –∏—â–µ–º –∫—É—Ä—Å –ø–æ—Å–ª–µ "(–∫—É—Ä—Å"
                        if '(–∫—É—Ä—Å' in step or '–∫—É—Ä—Å:' in step:
                            rate_str = step.split('–∫—É—Ä—Å')[1].strip()
                            if rate_str.startswith(':'):
                                rate_str = rate_str[1:].strip()
                            rate_str = rate_str.split(')')[0].strip()
                            rates.append({'from': coin_a, 'to': coin_b, 'rate': float(rate_str)})

                    elif '–ü—Ä–æ–¥–∞—Ç—å' in step and coin_b in step and 'USDT' in step:
                        # B -> USDT: –∏—â–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ "–ø–æ —Ü–µ–Ω–µ $"
                        if '–ø–æ —Ü–µ–Ω–µ $' in step:
                            rate_str = step.split('–ø–æ —Ü–µ–Ω–µ $')[1].split(')')[0].strip()
                            rates.append({'from': coin_b, 'to': 'USDT', 'rate': float(rate_str)})
                except (ValueError, IndexError, AttributeError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫—É—Ä—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue

        # –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: USDT ‚Üí A ‚Üí B ‚Üí C ‚Üí USDT
        elif opp['type'] == 'quadrilateral' and len(path_parts) == 5:
            # –î–ª—è —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —à–∞–≥–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            for step in opp['steps']:
                try:
                    if '–ø–æ —Ü–µ–Ω–µ $' in step:
                        rate_str = step.split('–ø–æ —Ü–µ–Ω–µ $')[1].split(')')[0].strip()
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º from –∏ to –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        parts = step.split(' ')
                        if '–ö—É–ø–∏—Ç—å' in step:
                            rates.append({'from': 'USDT', 'to': parts[1], 'rate': float(rate_str)})
                        elif '–ü—Ä–æ–¥–∞—Ç—å' in step:
                            coin = [p for p in parts if p.isupper() and len(p) <= 10][0]
                            rates.append({'from': coin, 'to': 'USDT', 'rate': float(rate_str)})
                    elif '–∫—É—Ä—Å' in step:
                        rate_str = step.split('–∫—É—Ä—Å')[1].strip()
                        if rate_str.startswith(':'):
                            rate_str = rate_str[1:].strip()
                        rate_str = rate_str.split(')')[0].strip()
                        rates.append({'from': 'A', 'to': 'B', 'rate': float(rate_str)})
                except (ValueError, IndexError, AttributeError):
                    continue

        return rates

    def _save_html(self, path: Path, opportunities: List[Dict], metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –∫—É—Ä—Å–∞–º–∏"""

        type_names = {
            'triangular': 'üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π',
            'quadrilateral': 'üî∂ –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π',
            'bestchange_arbitrage': 'üîÄ –ß–µ—Ä–µ–∑ BestChange'
        }

        type_colors = {
            'triangular': '#28a745',
            'quadrilateral': '#fd7e14',
            'bestchange_arbitrage': '#17a2b8'
        }

        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arbitrage Results - {metadata['timestamp']}</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f5f5f5; padding: 20px; }}
        .container {{ max-width: 1400px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; }}
        .header h1 {{ margin-bottom: 10px; }}
        .metadata {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; padding: 20px; background: #f8f9fa; }}
        .metadata-item {{ padding: 15px; background: white; border-radius: 5px; border-left: 4px solid #667eea; }}
        .metadata-item strong {{ display: block; color: #667eea; margin-bottom: 5px; }}
        .stats {{ padding: 20px; }}
        .type-stat {{ padding: 15px; margin: 10px 0; background: #f8f9fa; border-radius: 5px; }}
        .opportunities {{ padding: 20px; }}
        .opportunity {{ margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 5px; border-left: 4px solid #667eea; }}
        .opportunity-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-wrap: wrap; gap: 10px; }}
        .opportunity-rank {{ font-size: 24px; font-weight: bold; color: #667eea; }}
        .spread {{ font-size: 20px; font-weight: bold; color: #28a745; }}
        .profit {{ font-size: 18px; color: #28a745; }}
        .type-badge {{ display: inline-block; padding: 5px 15px; color: white; border-radius: 20px; font-size: 12px; margin-left: 10px; }}
        .scheme-badge {{ display: inline-block; padding: 5px 15px; background: #6c757d; color: white; border-radius: 20px; font-size: 11px; }}
        .path-container {{ margin: 15px 0; padding: 15px; background: white; border-radius: 5px; }}
        .path-item {{ display: inline-flex; align-items: center; margin: 5px 0; }}
        .coin {{ font-weight: bold; color: #333; padding: 5px 10px; background: #e9ecef; border-radius: 3px; }}
        .arrow-container {{ margin: 0 10px; display: inline-flex; flex-direction: column; align-items: center; }}
        .arrow {{ font-size: 20px; color: #667eea; }}
        .rate-input {{ width: 120px; padding: 5px 8px; border: 2px solid #667eea; border-radius: 4px; text-align: center; font-size: 14px; font-weight: bold; }}
        .rate-input:focus {{ outline: none; border-color: #764ba2; background: #f0f8ff; }}
        .result-box {{ margin-top: 15px; padding: 15px; background: #d4edda; border: 2px solid #28a745; border-radius: 5px; }}
        .result-value {{ font-size: 18px; font-weight: bold; color: #155724; }}
        .steps {{ margin-top: 15px; padding-left: 20px; }}
        .step {{ padding: 8px 0; border-bottom: 1px solid #e0e0e0; }}
        .step:last-child {{ border-bottom: none; }}
        .warning {{ background: #fff3cd; padding: 20px; margin: 20px; border-radius: 5px; border-left: 4px solid #ffc107; }}
        .warning h3 {{ color: #856404; margin-bottom: 10px; }}
        .warning ul {{ padding-left: 20px; }}
        .warning li {{ margin: 5px 0; color: #856404; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Crypto Arbitrage Bot v7.0</h1>
            <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</p>
        </div>

        <div class="metadata">
            <div class="metadata-item">
                <strong>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>
                {metadata['timestamp']}
            </div>
            <div class="metadata-item">
                <strong>üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞</strong>
                ${metadata['start_amount']:.2f}
            </div>
            <div class="metadata-item">
                <strong>üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥</strong>
                {metadata['min_spread']}%
            </div>
            <div class="metadata-item">
                <strong>‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</strong>
                {metadata['execution_time']:.2f} —Å–µ–∫
            </div>
            <div class="metadata-item">
                <strong>üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</strong>
                {metadata['total_opportunities']}
            </div>
        </div>
"""

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        if opportunities:
            types_stats = self._calculate_types_stats(opportunities)
            html_content += """
        <div class="stats">
            <h2>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</h2>
"""
            for opp_type, stats in sorted(types_stats.items(), key=lambda x: x[1]['max_spread'], reverse=True):
                type_name = type_names.get(opp_type, opp_type)
                color = type_colors.get(opp_type, '#6c757d')
                html_content += f"""
            <div class="type-stat" style="border-left: 4px solid {color};">
                <strong>{type_name}</strong><br>
                –ù–∞–π–¥–µ–Ω–æ: {stats['count']} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π | 
                –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {stats['max_spread']:.4f}% | 
                –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {stats['avg_spread']:.4f}% |
                –°—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:.2f}
            </div>
"""
            html_content += """
        </div>
"""

        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        if opportunities:
            html_content += """
        <div class="opportunities">
            <h2>üéØ –°–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</h2>
"""
            for idx, opp in enumerate(opportunities, 1):
                opp_type = opp.get('type', 'unknown')
                type_name = type_names.get(opp_type, opp_type)
                color = type_colors.get(opp_type, '#6c757d')

                # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å
                path_parts = opp['path'].split(' ‚Üí ')
                rates = self._extract_rates_from_opportunity(opp)

                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
                path_html = '<div class="path-container"><div style="font-weight: bold; margin-bottom: 10px;">–ü—É—Ç—å —Å –∫—É—Ä—Å–∞–º–∏ –æ–±–º–µ–Ω–∞:</div>'

                for i, part in enumerate(path_parts):
                    path_html += f'<span class="coin">{part}</span>'
                    if i < len(path_parts) - 1:
                        rate_val = rates[i]['rate'] if i < len(rates) else 0
                        path_html += f'''
                        <div class="arrow-container">
                            <div class="arrow">‚Üì</div>
                            <input type="number" 
                                   class="rate-input" 
                                   data-opp-id="{idx}" 
                                   data-rate-index="{i}"
                                   value="{rate_val:.8f}" 
                                   step="0.00000001"
                                   onchange="recalculate({idx})">
                        </div>
                        '''

                path_html += '</div>'

                steps_html = ""
                for step in opp['steps']:
                    steps_html += f'<div class="step">{step}</div>'

                html_content += f"""
            <div class="opportunity" style="border-left: 4px solid {color};" id="opp-{idx}">
                <div class="opportunity-header">
                    <div>
                        <span class="opportunity-rank">#{idx}</span>
                        <span class="type-badge" style="background-color: {color};">{type_name}</span>
                        <span class="scheme-badge">{opp['scheme']}</span>
                    </div>
                    <div>
                        <span class="spread" id="spread-{idx}">{opp['spread']:.4f}%</span>
                        <span class="profit" id="profit-{idx}"> | –ü—Ä–∏–±—ã–ª—å: ${opp['profit']:.4f}</span>
                    </div>
                </div>

                {path_html}

                <div class="result-box">
                    <div class="result-value" id="result-{idx}">
                        ${opp['initial']:.2f} ‚Üí $<span id="final-{idx}">{opp['final']:.2f}</span>
                    </div>
                </div>

                <div class="steps">
                    <strong>–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:</strong>
                    {steps_html}
                </div>

                <script>
                    window['opp_{idx}_data'] = {{
                        initial: {opp['initial']},
                        rates: {json.dumps([r['rate'] for r in rates])},
                        pathParts: {json.dumps(path_parts)}
                    }};
                </script>
            </div>
"""
            html_content += """
        </div>
"""

        # JavaScript –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
        html_content += """
        <script>
            function recalculate(oppId) {
                const data = window['opp_' + oppId + '_data'];
                const inputs = document.querySelectorAll(`input[data-opp-id="${oppId}"]`);

                let amount = data.initial;
                const rates = [];

                inputs.forEach(input => {
                    rates.push(parseFloat(input.value));
                });

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ü–µ–ø–æ—á–∫–µ
                for (let i = 0; i < rates.length; i++) {
                    if (i === 0) {
                        // USDT -> Coin A
                        amount = amount / rates[i];
                    } else if (i === rates.length - 1) {
                        // Last Coin -> USDT
                        amount = amount * rates[i];
                    } else {
                        // Coin -> Coin
                        amount = amount * rates[i];
                    }
                }

                const profit = amount - data.initial;
                const spread = ((amount - data.initial) / data.initial) * 100;

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                document.getElementById('final-' + oppId).textContent = amount.toFixed(2);
                document.getElementById('spread-' + oppId).textContent = spread.toFixed(4) + '%';
                document.getElementById('profit-' + oppId).textContent = ' | –ü—Ä–∏–±—ã–ª—å: $' + profit.toFixed(4);

                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–±—ã–ª–∏
                const spreadEl = document.getElementById('spread-' + oppId);
                const profitEl = document.getElementById('profit-' + oppId);

                if (spread > 0) {
                    spreadEl.style.color = '#28a745';
                    profitEl.style.color = '#28a745';
                } else {
                    spreadEl.style.color = '#dc3545';
                    profitEl.style.color = '#dc3545';
                }
            }
        </script>
"""

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        html_content += """
        <div class="warning">
            <h3>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h3>
            <ul>
                <li>–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞, —á—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—á—ë—Ç—ã</li>
                <li>–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂–∏ (~0.1% –∑–∞ —Å–¥–µ–ª–∫—É)</li>
                <li>–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: 3 —Å–¥–µ–ª–∫–∏ = ~0.3% –∫–æ–º–∏—Å—Å–∏–π</li>
                <li>–ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: 4 —Å–¥–µ–ª–∫–∏ = ~0.4% –∫–æ–º–∏—Å—Å–∏–π</li>
                <li>–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏</li>
                <li>–í—Å–µ —Å–¥–µ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ</li>
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–µ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é (BTC, ETH, BNB) –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è</li>
                <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å —Å–ø—Ä–µ–¥—ã > 1% –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∏–∑–¥–µ—Ä–∂–µ–∫</li>
                <li>–¶–µ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è—é—Ç—Å—è - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π!</li>
            </ul>
        </div>
    </div>
</body>
</html>"""

        with open(path, 'w', encoding='utf-8') as f:
            f.write(html_content)

    def _calculate_types_stats(self, opportunities: List[Dict]) -> Dict:
        """–ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        types_stats = {}
        for opp in opportunities:
            opp_type = opp.get('type', 'unknown')
            if opp_type not in types_stats:
                types_stats[opp_type] = {
                    'count': 0,
                    'max_spread': 0,
                    'total_spread': 0,
                    'total_profit': 0
                }
            types_stats[opp_type]['count'] += 1
            types_stats[opp_type]['max_spread'] = max(types_stats[opp_type]['max_spread'], opp['spread'])
            types_stats[opp_type]['total_spread'] += opp['spread']
            types_stats[opp_type]['total_profit'] += opp['profit']

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥
        for opp_type in types_stats:
            count = types_stats[opp_type]['count']
            if count > 0:
                types_stats[opp_type]['avg_spread'] = types_stats[opp_type]['total_spread'] / count
            else:
                types_stats[opp_type]['avg_spread'] = 0

        return types_stats