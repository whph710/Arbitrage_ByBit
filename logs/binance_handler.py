import aiohttp
from typing import Dict, Set
from configs import BINANCE_API_URL, REQUEST_TIMEOUT, ENABLE_COIN_FILTER, BLACKLIST_COINS, WHITELIST_COINS


class BinanceClientAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Binance API"""

    def __init__(self):
        self.base_url = BINANCE_API_URL
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (compatible; ArbitrageBot/3.0)',
            'Accept': 'application/json'
        }
        self.timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        self.session = None
        self.usdt_pairs: Dict[str, float] = {}  # –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ USDT-–ø–∞—Ä—ã
        self.coins: Set[str] = set()  # –¢–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å USDT-–ø–∞—Ä–∞–º–∏
        self.trading_pairs: Set[tuple] = set()  # –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (base, quote)

    async def __aenter__(self):
        await self.create_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()

    async def create_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession(headers=self.headers, timeout=self.timeout)

    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None

    def _should_include_coin(self, coin: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ –º–æ–Ω–µ—Ç–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∞–Ω–∞–ª–∏–∑

        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á—ë–Ω - –≤–∫–ª—é—á–∞–µ–º –≤—Å—ë
        2. –ï—Å–ª–∏ –µ—Å—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ
        3. –ò–Ω–∞—á–µ –≤–∫–ª—é—á–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        """
        if not ENABLE_COIN_FILTER:
            return True

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if WHITELIST_COINS:
            return coin in WHITELIST_COINS

        # –ò–Ω–∞—á–µ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return coin not in BLACKLIST_COINS

    async def load_usdt_pairs(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ USDT-–ø–∞—Ä—ã —Å Binance

        –í–ê–ñ–ù–û:
        - usdt_pairs —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –º–æ–Ω–µ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ USDT-–ø–∞—Ä–∞–º–∏
        - coins —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –º–æ–Ω–µ—Ç—ã –∏–∑ usdt_pairs
        - trading_pairs —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        """
        if self.session is None:
            await self.create_session()

        try:
            url = f"{self.base_url}/api/v3/ticker/price"
            async with self.session.get(url) as response:
                response.raise_for_status()
                data = await response.json()

            self.usdt_pairs.clear()
            self.coins.clear()
            self.trading_pairs.clear()
            filtered_count = 0

            for ticker in data:
                symbol = ticker.get('symbol', '').upper()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û USDT –ø–∞—Ä—ã
                if symbol.endswith('USDT'):
                    base = symbol[:-4]  # –£–±–∏—Ä–∞–µ–º 'USDT' –∏–∑ –∫–æ–Ω—Ü–∞

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–æ–Ω–µ—Ç
                    if not self._should_include_coin(base):
                        filtered_count += 1
                        continue

                    try:
                        price = float(ticker.get('price', 0))
                        if price > 0:
                            self.usdt_pairs[base] = price
                            # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ coins –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å USDT-–ø–∞—Ä–∞!
                            self.coins.add(base)
                            self.trading_pairs.add(('USDT', base))  # USDT -> BASE
                    except (ValueError, TypeError):
                        continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                # –ù–û –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –∏—Ö –±–∞–∑–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –≤ self.coins!
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑—É –∏ –∫–≤–æ—Ç—É
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–≤–æ—Ç—ã: BTC, ETH, BNB, BUSD
                    for quote in ['BTC', 'ETH', 'BNB', 'USDT', 'BUSD']:
                        if symbol.endswith(quote) and len(symbol) > len(quote):
                            base = symbol[:-len(quote)]
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                            if self._should_include_coin(base) and self._should_include_coin(quote):
                                self.trading_pairs.add((quote, base))  # QUOTE -> BASE
                            break

            print(f"[Binance] ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.usdt_pairs)} USDT-–ø–∞—Ä")
            print(f"[Binance] ‚úì –ú–æ–Ω–µ—Ç —Å USDT-–ø–∞—Ä–∞–º–∏: {len(self.coins)}")
            print(f"[Binance] ‚úì –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(self.trading_pairs)}")
            if filtered_count > 0:
                print(f"[Binance] üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {filtered_count}")

        except Exception as e:
            print(f"[Binance] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä: {e}")

    def has_trading_pair(self, coin_a: str, coin_b: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –º–µ–∂–¥—É –¥–≤—É–º—è –º–æ–Ω–µ—Ç–∞–º–∏

        Args:
            coin_a: –ü–µ—Ä–≤–∞—è –º–æ–Ω–µ—Ç–∞ (–±–∞–∑–∞)
            coin_b: –í—Ç–æ—Ä–∞—è –º–æ–Ω–µ—Ç–∞ (–∫–≤–æ—Ç–∞)

        Returns:
            True –µ—Å–ª–∏ –ø–∞—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: A/B –∏ B/A
        return (coin_a, coin_b) in self.trading_pairs or (coin_b, coin_a) in self.trading_pairs

    async def get_usdt_tickers(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ USDT-–ø–∞—Ä—ã —Å Binance (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
        if not self.usdt_pairs:
            await self.load_usdt_pairs()
        return self.usdt_pairs