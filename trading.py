import logging
import asyncio
import time
from typing import Dict, Optional, Tuple
from models import ArbitrageOpportunity, TradeDirection
from api_client import BybitAPIClient
from csv_manager import CSVManager
from config import *

logger = logging.getLogger(__name__)


class TradingManager:
    def __init__(self, api_client: BybitAPIClient, csv_manager: CSVManager):
        self.api_client = api_client
        self.csv_manager = csv_manager
        self.trade_count = 0
        self.last_trade_time = 0
        self.session_profit = 0.0
        self.session_trades = 0

    async def execute_trade(self, opportunity: ArbitrageOpportunity) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        if not ENABLE_LIVE_TRADING:
            logger.debug("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
        if opportunity.min_volume_usdt < LIVE_TRADING_MIN_TRADE_USDT:
            logger.debug(
                f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: {opportunity.min_volume_usdt:.2f} < {LIVE_TRADING_MIN_TRADE_USDT} USDT")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
        if opportunity.min_volume_usdt > LIVE_TRADING_MAX_TRADE_USDT:
            logger.debug(
                f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞: {opportunity.min_volume_usdt:.2f} > {LIVE_TRADING_MAX_TRADE_USDT} USDT")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫
        if not self._check_trade_limits():
            logger.debug("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫")
            return False

        # DRY RUN —Ä–µ–∂–∏–º (—Å–∏–º—É–ª—è—Ü–∏—è)
        if LIVE_TRADING_DRY_RUN:
            logger.info("üî¥ DRY RUN: –°–∏–º—É–ª—è—Ü–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏")
            self._log_trade_details(opportunity)

            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (90% —É—Å–ø–µ—Ö–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏)
            import random
            success = random.random() > 0.1

            if success:
                self.csv_manager.save_executed_trade(opportunity)
                self.trade_count += 1
                self.session_trades += 1

                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å
                simulated_profit = INITIAL_AMOUNT * opportunity.profit_percent / 100
                self.session_profit += simulated_profit

                logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–∏–±—ã–ª—å: ${simulated_profit:.2f}")
                return True
            else:
                logger.info("‚ùå –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ (—Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)")
                return False

        # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
            if REQUIRE_BALANCE_CHECK_BEFORE_LIVE:
                balance = await self.api_client.get_account_balance()
                if not balance:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞")
                    return False

                sufficient_balance, trade_amount = self._check_sufficient_balance(balance, opportunity)
                if not sufficient_balance:
                    logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏")
                    return False
            else:
                trade_amount = min(LIVE_TRADING_MAX_TRADE_USDT, opportunity.min_volume_usdt)

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—É—Ç–∏
            success, actual_profit = await self._execute_arbitrage_path(opportunity, trade_amount)

            if success:
                self.csv_manager.save_executed_trade(opportunity)
                self.trade_count += 1
                self.session_trades += 1
                self.session_profit += actual_profit

                logger.info(f"‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–±—ã–ª—å: ${actual_profit:.2f}")
                self._log_trade_details(opportunity)
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏")
                return False

        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return False

    def _check_trade_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ—Ç—É —Å–¥–µ–ª–æ–∫ - –£–õ–£–ß–®–ï–ù–û"""
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if current_time - self.last_trade_time < LIVE_TRADING_ORDER_GAP_SEC:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫ –≤ –º–∏–Ω—É—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–µ—Ä–µ–¥—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏

        self.last_trade_time = current_time
        return True

    def _check_sufficient_balance(self, balance_data: Dict, opportunity: ArbitrageOpportunity) -> Tuple[bool, float]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        try:
            balances = {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            if balance_data and 'list' in balance_data:
                for account in balance_data['list']:
                    if account.get('accountType') == 'UNIFIED':
                        for coin in account.get('coin', []):
                            symbol = coin.get('coin')

                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            def safe_float(value, default=0.0):
                                if value == '' or value is None:
                                    return default
                                try:
                                    return float(value)
                                except (ValueError, TypeError):
                                    return default

                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                            available_balance = safe_float(coin.get('availableToWithdraw'))
                            wallet_balance = safe_float(coin.get('walletBalance'))

                            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏ –∫–æ—à–µ–ª—å–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                            free_balance = min(available_balance,
                                               wallet_balance) if available_balance > 0 else wallet_balance

                            if free_balance > 0:
                                balances[symbol] = free_balance

            if not balances:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
                return False, 0.0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –≤ –ø—É—Ç–∏
            first_pair = opportunity.path[0]
            base_currency = None

            # –ò—â–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
            for currency in ['USDT', 'USDC', 'BUSD', 'BTC', 'ETH']:
                if first_pair.endswith(currency):
                    base_currency = currency
                    break

            if not base_currency:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –¥–ª—è {first_pair}")
                return False, 0.0

            current_balance = balances.get(base_currency, 0.0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
            max_possible_trade = min(
                current_balance * 0.95,  # –û—Å—Ç–∞–≤–ª—è–µ–º 5% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                LIVE_TRADING_MAX_TRADE_USDT,
                opportunity.min_volume_usdt * 2  # –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–≤–æ–π–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            )

            recommended_trade = max(LIVE_TRADING_MIN_TRADE_USDT, max_possible_trade)

            if current_balance < LIVE_TRADING_MIN_TRADE_USDT:
                logger.warning(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {base_currency}: {current_balance:.2f} < {LIVE_TRADING_MIN_TRADE_USDT}")
                return False, 0.0

            logger.info(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å {base_currency}: {current_balance:.2f}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: ${recommended_trade:.2f}")
            return True, recommended_trade

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False, 0.0

    async def _execute_arbitrage_path(self, opportunity: ArbitrageOpportunity, trade_amount: float) -> Tuple[
        bool, float]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ —Å —Å—É–º–º–æ–π ${trade_amount:.2f}")

            current_amount = trade_amount
            step_results = []

            for i, (pair, direction, expected_price) in enumerate(zip(
                    opportunity.path, opportunity.directions, opportunity.prices
            ), 1):

                logger.info(f"üìä –®–∞–≥ {i}/3: {pair} - {direction.value.upper()}")

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
                if direction == TradeDirection.BUY:
                    # –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = —Å—É–º–º–∞ / —Ü–µ–Ω–∞
                    raw_qty = current_amount / expected_price
                    qty = self._format_quantity(raw_qty, pair)
                else:  # SELL
                    # –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: –ø—Ä–æ–¥–∞–µ–º –∏–º–µ—é—â–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    qty = self._format_quantity(current_amount, pair)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
                order_value = float(qty) * expected_price
                if order_value < 5.0:  # Bybit –º–∏–Ω–∏–º—É–º
                    logger.warning(f"‚ùå –û—Ä–¥–µ—Ä —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${order_value:.2f}")
                    return False, 0.0

                logger.info(f"üí± –û—Ä–¥–µ—Ä: {qty} {pair} (~${order_value:.2f})")

                # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                result = await self.api_client.place_order(
                    symbol=pair,
                    side=direction.value,
                    qty=str(qty)
                )

                if not result:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {pair}")
                    return False, 0.0

                order_id = result.get('orderId', 'N/A')
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)
                if direction == TradeDirection.BUY:
                    current_amount = float(qty)  # –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
                else:
                    current_amount = float(qty) * expected_price  # –ü–æ–ª—É—á–∏–ª–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É

                step_results.append({
                    'pair': pair,
                    'direction': direction.value,
                    'quantity': qty,
                    'expected_price': expected_price,
                    'order_id': order_id
                })

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                await asyncio.sleep(LIVE_TRADING_ORDER_GAP_SEC)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–∏–±—ã–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            actual_profit = current_amount - trade_amount
            profit_percent = (actual_profit / trade_amount) * 100

            logger.info(f"üéâ –ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${trade_amount:.2f}")
            logger.info(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${current_amount:.2f}")
            logger.info(f"üìà –ü—Ä–∏–±—ã–ª—å: ${actual_profit:.2f} ({profit_percent:.3f}%)")

            return True, actual_profit

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—É—Ç–∏: {e}")
            return False, 0.0

    def _format_quantity(self, quantity: float, pair: str) -> float:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–∏—Ä–∂–∏ - –£–õ–£–ß–®–ï–ù–û"""
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
            if any(pair.startswith(prefix) for prefix in ['BTC', 'ETH']):
                return round(quantity, 6)
            elif any(pair.startswith(prefix) for prefix in ['USDT', 'USDC', 'BUSD']):
                return round(quantity, 4)
            elif any(pair.endswith(suffix) for suffix in ['USDT', 'USDC', 'BUSD']):
                return round(quantity, 2)  # –î–ª—è –ø–∞—Ä —Ç–∏–ø–∞ XXX/USDT
            else:
                return round(quantity, 8)  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            return round(quantity, 6)

    def _log_trade_details(self, opportunity: ArbitrageOpportunity):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ - –£–õ–£–ß–®–ï–ù–û"""
        logger.info("=" * 70)
        logger.info("üìà –î–ï–¢–ê–õ–ò –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ô –°–î–ï–õ–ö–ò")
        logger.info("=" * 70)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        path_description = self._get_path_description(opportunity.path)

        logger.info(f"üîÑ –ú–∞—Ä—à—Ä—É—Ç: {path_description}")
        logger.info(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity.profit_percent:.4f}%")
        logger.info(f"üíµ –û–±—ä–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏: ${opportunity.min_volume_usdt:.2f}")
        logger.info(f"‚ö° –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {opportunity.execution_time * 1000:.1f}ms")
        logger.info(f"üìä –°–æ–≤–æ–∫—É–ø–Ω—ã–π —Å–ø—Ä–µ–¥: {opportunity.spread_cost:.3f}%")

        logger.info("üîÑ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        for i, (pair, direction, price) in enumerate(zip(
                opportunity.path, opportunity.directions, opportunity.prices
        ), 1):
            action = "–ü–û–ö–£–ü–ö–ê" if direction == TradeDirection.BUY else "–ü–†–û–î–ê–ñ–ê"
            logger.info(f"   {i}. {pair}: {action} –ø–æ ${price:.8f}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        if self.session_trades > 0:
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
            logger.info(f"   –°–¥–µ–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.session_trades}")
            logger.info(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.session_profit:.2f}")
            logger.info(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${self.session_profit / self.session_trades:.2f}")

        logger.info("=" * 70)

    def _get_path_description(self, path: list[str]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—É—Ç–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã –∏–∑ –ø—É—Ç–∏
            base_currency = "USDT"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞

            # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
            for currency in CROSS_CURRENCIES:
                if path[0].endswith(currency):
                    base_currency = currency
                    break

            currency_a = path[0].replace(base_currency, '')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É
            currency_b = None
            pair2 = path[1]
            if pair2.startswith(currency_a):
                currency_b = pair2[len(currency_a):]
            elif pair2.endswith(currency_a):
                currency_b = pair2[:-len(currency_a)]

            if currency_b:
                return f"{base_currency} ‚Üí {currency_a} ‚Üí {currency_b} ‚Üí {base_currency}"
            else:
                return f"{' ‚Üí '.join(path)}"

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—É—Ç–∏: {e}")
            return f"{' ‚Üí '.join(path)}"

    async def get_trading_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ - –†–ê–°–®–ò–†–ï–ù–û"""
        return {
            "total_trades": self.trade_count,
            "session_trades": self.session_trades,
            "session_profit": self.session_profit,
            "last_trade_time": self.last_trade_time,
            "trading_enabled": ENABLE_LIVE_TRADING,
            "dry_run_mode": LIVE_TRADING_DRY_RUN,
            "testnet_mode": API_TESTNET,
            "average_profit_per_trade": self.session_profit / max(1, self.session_trades),
            "min_trade_amount": LIVE_TRADING_MIN_TRADE_USDT,
            "max_trade_amount": LIVE_TRADING_MAX_TRADE_USDT
        }

    def reset_session_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        self.session_trades = 0
        self.session_profit = 0.0
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–±—Ä–æ—à–µ–Ω–∞")