import logging
import asyncio
from typing import Dict, Optional
from models import ArbitrageOpportunity, TradeDirection
from api_client import BybitAPIClient
from csv_manager import CSVManager
from config import *

logger = logging.getLogger(__name__)


class TradingManager:
    def __init__(self, api_client: BybitAPIClient, csv_manager: CSVManager):
        self.api_client = api_client
        self.csv_manager = csv_manager
        self.trade_count = 0
        self.last_trade_time = 0

    async def execute_trade(self, opportunity: ArbitrageOpportunity):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
        if not ENABLE_LIVE_TRADING:
            logger.debug("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫
        if not self._check_trade_limits():
            logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–æ–∫")
            return False

        if LIVE_TRADING_DRY_RUN:
            logger.info("üî¥ DRY RUN: –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏")
            self._log_trade_details(opportunity)
            self.csv_manager.save_executed_trade(opportunity)
            return True

        # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
            if REQUIRE_BALANCE_CHECK_BEFORE_LIVE:
                balance = await self.api_client.get_account_balance()
                if not balance:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞")
                    return False

                if not self._check_sufficient_balance(balance, opportunity):
                    logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏")
                    return False

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—É—Ç–∏
            success = await self._execute_arbitrage_path(opportunity)

            if success:
                self.csv_manager.save_executed_trade(opportunity)
                logger.info("‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                self._log_trade_details(opportunity)
                self.trade_count += 1
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏")
                return False

        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return False

    def _check_trade_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ—Ç—É —Å–¥–µ–ª–æ–∫"""
        import time
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if current_time - self.last_trade_time < LIVE_TRADING_ORDER_GAP_SEC:
            return False

        self.last_trade_time = current_time
        return True

    def _check_sufficient_balance(self, balance_data: Dict, opportunity: ArbitrageOpportunity) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            balances = {}
            if balance_data and 'list' in balance_data:
                for account in balance_data['list']:
                    if account.get('accountType') == 'SPOT':
                        for coin in account.get('coin', []):
                            symbol = coin.get('coin')
                            free_balance = float(coin.get('free', 0))
                            balances[symbol] = free_balance

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã –≤ –ø—É—Ç–∏
            first_pair = opportunity.path[0]
            if first_pair.endswith('USDT'):
                base_currency = 'USDT'
                required_amount = min(LIVE_TRADING_MAX_TRADE_USDT, opportunity.min_volume_usdt)
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
                for currency in CROSS_CURRENCIES:
                    if first_pair.endswith(currency):
                        base_currency = currency
                        break
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –¥–ª—è {first_pair}")
                    return False
                required_amount = opportunity.min_volume_usdt

            current_balance = balances.get(base_currency, 0)

            if current_balance < required_amount:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {base_currency}: {current_balance} < {required_amount}")
                return False

            logger.info(f"–ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: {base_currency} = {current_balance}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False

    async def _execute_arbitrage_path(self, opportunity: ArbitrageOpportunity) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        try:
            trade_amount = min(LIVE_TRADING_MAX_TRADE_USDT, opportunity.min_volume_usdt)
            current_amount = trade_amount

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ —Å —Å—É–º–º–æ–π {trade_amount} USDT")

            for i, (pair, direction, price) in enumerate(zip(
                    opportunity.path, opportunity.directions, opportunity.prices
            )):
                logger.info(f"–®–∞–≥ {i + 1}/3: {pair} - {direction.value.upper()} –ø–æ —Ü–µ–Ω–µ {price}")

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
                if direction == TradeDirection.BUY:
                    qty = str(round(current_amount / price, 6))
                    current_amount = current_amount / price
                else:  # SELL
                    qty = str(round(current_amount, 6))
                    current_amount = current_amount * price

                # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                result = await self.api_client.place_order(
                    symbol=pair,
                    side=direction.value,
                    qty=qty
                )

                if not result:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {pair}")
                    return False

                logger.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {result.get('orderId', 'N/A')}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                await asyncio.sleep(LIVE_TRADING_ORDER_GAP_SEC)

            logger.info(f"–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ~{current_amount:.2f} USDT")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—É—Ç–∏: {e}")
            return False

    def _log_trade_details(self, opportunity: ArbitrageOpportunity):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏"""
        logger.info(f"üìà –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—É—Ç—å: {' ‚Üí '.join(opportunity.path)}")
        logger.info(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity.profit_percent:.4f}%")
        logger.info(f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {opportunity.min_volume_usdt:.2f} USDT")
        logger.info(f"‚ö° –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {opportunity.execution_time * 1000:.1f}ms")
        logger.info(f"üìä –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø—Ä–µ–¥–æ–≤: {opportunity.spread_cost:.4f}%")

        for i, (pair, direction, price) in enumerate(zip(
                opportunity.path, opportunity.directions, opportunity.prices
        ), 1):
            action = "–ü–û–ö–£–ü–ö–ê" if direction == TradeDirection.BUY else "–ü–†–û–î–ê–ñ–ê"
            logger.info(f"   {i}. {pair}: {action} –ø–æ ${price:.8f}")

    async def get_trading_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return {
            "total_trades": self.trade_count,
            "last_trade_time": self.last_trade_time,
            "trading_enabled": ENABLE_LIVE_TRADING,
            "dry_run_mode": LIVE_TRADING_DRY_RUN,
            "testnet_mode": API_TESTNET
        }