"""
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List
from configs_continuous import LOGS_DIR, SAVE_OPPORTUNITIES_TO_FILE


class OpportunityLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""

    def __init__(self):
        self.logs_dir = LOGS_DIR
        self.logs_dir.mkdir(exist_ok=True)

        # –§–∞–π–ª—ã –ª–æ–≥–æ–≤
        self.opportunities_log = self.logs_dir / "opportunities.log"
        self.daily_summary_log = self.logs_dir / "daily_summary.log"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        self.session_opportunities = []
        self.session_start = datetime.now()

        # –°—á–µ—Ç—á–∏–∫–∏
        self.total_logged = 0
        self.best_spread = 0
        self.best_opportunity = None

    def log_opportunity(self, opportunity: Dict):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ —Ñ–∞–π–ª –∏ –ø–∞–º—è—Ç—å

        Args:
            opportunity: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        """
        if not SAVE_OPPORTUNITIES_TO_FILE:
            return

        try:
            timestamp = datetime.now()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            log_entry = {
                'timestamp': timestamp.isoformat(),
                'opportunity': opportunity
            }

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(self.opportunities_log, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.session_opportunities.append(log_entry)
            self.total_logged += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –Ω–∞—Ö–æ–¥–∫—É
            if opportunity['spread'] > self.best_spread:
                self.best_spread = opportunity['spread']
                self.best_opportunity = opportunity

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    def log_text(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not SAVE_OPPORTUNITIES_TO_FILE:
            return

        try:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            with open(self.opportunities_log, 'a', encoding='utf-8') as f:
                f.write(f"[{timestamp}] {message}\n")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

    def get_session_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        uptime = datetime.now() - self.session_start

        stats = {
            'session_start': self.session_start.isoformat(),
            'uptime_seconds': uptime.total_seconds(),
            'uptime_hours': uptime.total_seconds() / 3600,
            'total_opportunities': self.total_logged,
            'best_spread': self.best_spread,
            'best_opportunity': self.best_opportunity
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º
        if self.session_opportunities:
            exchangers = {}
            for entry in self.session_opportunities:
                opp = entry['opportunity']
                ex = opp.get('exchanger', 'Unknown')
                if ex not in exchangers:
                    exchangers[ex] = {'count': 0, 'total_profit': 0, 'max_spread': 0}
                exchangers[ex]['count'] += 1
                exchangers[ex]['total_profit'] += opp['profit']
                exchangers[ex]['max_spread'] = max(exchangers[ex]['max_spread'], opp['spread'])

            stats['top_exchangers'] = sorted(
                exchangers.items(),
                key=lambda x: x[1]['count'],
                reverse=True
            )[:5]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º
        if self.session_opportunities:
            coins = {}
            for entry in self.session_opportunities:
                opp = entry['opportunity']
                for coin in opp.get('coins', []):
                    if coin not in coins:
                        coins[coin] = 0
                    coins[coin] += 1

            stats['top_coins'] = sorted(
                coins.items(),
                key=lambda x: x[1],
                reverse=True
            )[:10]

        return stats

    def save_daily_summary(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = self.get_session_statistics()

            summary = {
                'date': datetime.now().strftime('%Y-%m-%d'),
                'statistics': stats
            }

            with open(self.daily_summary_log, 'a', encoding='utf-8') as f:
                f.write(json.dumps(summary, ensure_ascii=False, indent=2) + '\n')
                f.write('-' * 100 + '\n')

            print(f"\nüìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.daily_summary_log}")

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def print_session_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        stats = self.get_session_statistics()

        print(f"\n{'='*100}")
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò")
        print(f"{'='*100}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime_hours']:.1f} —á–∞—Å–æ–≤")
        print(f"üéØ –°–≤—è–∑–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {stats['total_opportunities']}")

        if stats['total_opportunities'] > 0:
            print(f"üèÜ –õ—É—á—à–∏–π —Å–ø—Ä–µ–¥: {stats['best_spread']:.4f}%")

            if stats['best_opportunity']:
                print(f"   –ü—É—Ç—å: {stats['best_opportunity']['path']}")
                print(f"   –ü—Ä–∏–±—ã–ª—å: ${stats['best_opportunity']['profit']:.4f}")
                print(f"   –û–±–º–µ–Ω–Ω–∏–∫: {stats['best_opportunity']['exchanger']}")

        if 'top_exchangers' in stats and stats['top_exchangers']:
            print(f"\nüè¶ –¢–û–ü-5 –û–ë–ú–ï–ù–ù–ò–ö–û–í:")
            for ex, ex_stats in stats['top_exchangers']:
                print(f"   {ex}: {ex_stats['count']} —Å–≤—è–∑–æ–∫, –º–∞–∫—Å. —Å–ø—Ä–µ–¥ {ex_stats['max_spread']:.4f}%")

        if 'top_coins' in stats and stats['top_coins']:
            print(f"\nüí∞ –¢–û–ü-10 –ú–û–ù–ï–¢:")
            for coin, count in stats['top_coins']:
                print(f"   {coin}: {count} –ø–æ—è–≤–ª–µ–Ω–∏–π")

        print(f"{'='*100}\n")

    def load_recent_opportunities(self, hours: int = 24) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –ª–æ–≥–∞

        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        """
        if not self.opportunities_log.exists():
            return []

        opportunities = []
        cutoff_time = datetime.now().timestamp() - (hours * 3600)

        try:
            with open(self.opportunities_log, 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        entry = json.loads(line.strip())
                        entry_time = datetime.fromisoformat(entry['timestamp']).timestamp()

                        if entry_time >= cutoff_time:
                            opportunities.append(entry)
                    except (json.JSONDecodeError, KeyError, ValueError):
                        continue

            return opportunities

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: {e}")
            return []

    def analyze_recent_trends(self, hours: int = 24):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        opportunities = self.load_recent_opportunities(hours)

        if not opportunities:
            print(f"\n‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
            return

        print(f"\n{'='*100}")
        print(f"üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï {hours} –ß–ê–°–û–í")
        print(f"{'='*100}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(opportunities)}")

        # –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥
        spreads = [opp['opportunity']['spread'] for opp in opportunities]
        avg_spread = sum(spreads) / len(spreads) if spreads else 0
        max_spread = max(spreads) if spreads else 0

        print(f"üí∞ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {avg_spread:.4f}%")
        print(f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {max_spread:.4f}%")

        # –¢–æ–ø –æ–±–º–µ–Ω–Ω–∏–∫–∏
        exchangers = {}
        for entry in opportunities:
            ex = entry['opportunity'].get('exchanger', 'Unknown')
            exchangers[ex] = exchangers.get(ex, 0) + 1

        print(f"\nüè¶ –°–ê–ú–´–ï –ê–ö–¢–ò–í–ù–´–ï –û–ë–ú–ï–ù–ù–ò–ö–ò:")
        for ex, count in sorted(exchangers.items(), key=lambda x: x[1], reverse=True)[:5]:
            percentage = (count / len(opportunities)) * 100
            print(f"   {ex}: {count} —Å–≤—è–∑–æ–∫ ({percentage:.1f}%)")

        # –¢–æ–ø –º–æ–Ω–µ—Ç—ã
        coins = {}
        for entry in opportunities:
            for coin in entry['opportunity'].get('coins', []):
                coins[coin] = coins.get(coin, 0) + 1

        print(f"\nüíé –°–ê–ú–´–ï –ü–û–ü–£–õ–Ø–†–ù–´–ï –ú–û–ù–ï–¢–´:")
        for coin, count in sorted(coins.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"   {coin}: {count} –ø–æ—è–≤–ª–µ–Ω–∏–π")

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–ø–æ —á–∞—Å–∞–º)
        hourly_distribution = {}
        for entry in opportunities:
            hour = datetime.fromisoformat(entry['timestamp']).hour
            hourly_distribution[hour] = hourly_distribution.get(hour, 0) + 1

        print(f"\n‚è∞ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ß–ê–°–ê–ú:")
        for hour in sorted(hourly_distribution.keys()):
            count = hourly_distribution[hour]
            bar = '‚ñà' * (count // 2)
            print(f"   {hour:02d}:00 - {count:3d} | {bar}")

        print(f"{'='*100}\n")

    def export_to_csv(self, output_file: Path = None, hours: int = 24):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV"""
        if output_file is None:
            output_file = self.logs_dir / f"opportunities_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

        opportunities = self.load_recent_opportunities(hours)

        if not opportunities:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        try:
            import csv

            with open(output_file, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writerow([
                    'Timestamp',
                    'Path',
                    'Spread %',
                    'Profit $',
                    'Initial $',
                    'Final $',
                    'Exchanger',
                    'Reserve $',
                    'Coins',
                    'Liquidity A',
                    'Liquidity B'
                ])

                # –î–∞–Ω–Ω—ã–µ
                for entry in opportunities:
                    opp = entry['opportunity']
                    writer.writerow([
                        entry['timestamp'],
                        opp['path'],
                        f"{opp['spread']:.4f}",
                        f"{opp['profit']:.4f}",
                        f"{opp['initial']:.2f}",
                        f"{opp['final']:.2f}",
                        opp.get('exchanger', 'N/A'),
                        f"{opp.get('reserve', 0):.0f}",
                        ' ‚Üí '.join(opp.get('coins', [])),
                        f"{opp.get('liquidity_a', 0):.1f}",
                        f"{opp.get('liquidity_b', 0):.1f}"
                    ])

            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")