import aiohttp
import asyncio
from typing import Dict, Set, Optional, List, Tuple
from dataclasses import dataclass
from configs import (
    BESTCHANGE_API_KEY,
    MAX_CONCURRENT_REQUESTS,
    REQUEST_DELAY,
    BATCH_SIZE,
    MAX_RETRIES,
    RETRY_DELAY,
    REQUEST_TIMEOUT
)


@dataclass
class RateInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –æ–±–º–µ–Ω–∞"""
    rate: float
    rankrate: float  # –ö—É—Ä—Å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è $300
    exchanger: str
    exchanger_id: int
    reserve: float
    give_min: float
    give_max: float
    marks: List[str]


class BestChangeClientAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è BestChange API v2.0 —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""

    def __init__(self):
        if not BESTCHANGE_API_KEY:
            raise ValueError("BESTCHANGE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ configs.py –∏–ª–∏ .env —Ñ–∞–π–ª–µ")

        self.api_key = BESTCHANGE_API_KEY
        self.base_url = "https://bestchange.app"
        self.lang = "en"

        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.currencies: Dict[int, Dict] = {}
        self.crypto_currencies: Dict[str, int] = {}
        self.changers: Dict[int, Dict] = {}
        self.rates: Dict[str, Dict[str, List[RateInfo]]] = {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        self.max_concurrent_requests = max(1, min(MAX_CONCURRENT_REQUESTS, 10))
        self.request_delay = max(0.1, REQUEST_DELAY)
        self.batch_size = max(1, min(BATCH_SIZE, 500))  # –ú–∞–∫—Å–∏–º—É–º 500 —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.max_retries = max(1, MAX_RETRIES)
        self.retry_delay = max(1, RETRY_DELAY)

        self.session: Optional[aiohttp.ClientSession] = None
        self.timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.request_count = 0
        self.error_count = 0
        self.rate_limit_count = 0

        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (rate limiting)
        self._last_request_time = 0
        self._min_request_interval = 0.05  # –ú–∏–Ω–∏–º—É–º 50ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    async def __aenter__(self):
        await self.create_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()

    async def create_session(self):
        """–°–æ–∑–¥–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        if self.session is None:
            connector = aiohttp.TCPConnector(
                limit=self.max_concurrent_requests,
                limit_per_host=self.max_concurrent_requests,
                ttl_dns_cache=300
            )
            self.session = aiohttp.ClientSession(
                connector=connector,
                headers={
                    'Accept': 'application/json',
                    'Accept-Encoding': 'gzip, deflate',
                    'User-Agent': 'Mozilla/5.0 (compatible; ArbitrageBot/2.0)',
                    'Connection': 'keep-alive'
                },
                timeout=self.timeout
            )

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None

    async def _rate_limit_wait(self):
        """–£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limit"""
        now = asyncio.get_event_loop().time()
        time_since_last = now - self._last_request_time

        if time_since_last < self._min_request_interval:
            await asyncio.sleep(self._min_request_interval - time_since_last)

        self._last_request_time = asyncio.get_event_loop().time()

    async def _make_request(self, endpoint: str, retries: int = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if self.session is None:
            await self.create_session()

        if retries is None:
            retries = self.max_retries

        url = f"{self.base_url}/v2/{self.api_key}/{endpoint}"

        for attempt in range(retries + 1):
            try:
                # –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
                await self._rate_limit_wait()

                self.request_count += 1

                async with self.session.get(url) as response:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit
                    if response.status == 429:
                        self.rate_limit_count += 1
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å jitter
                        wait_time = self.retry_delay * (2 ** attempt) * (0.5 + 0.5 * (attempt / retries))

                        if attempt < retries:
                            print(f"[BestChange] ‚ö†Ô∏è  Rate limit (429) –¥–ª—è {endpoint}")
                            print(f"[BestChange] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å ({attempt + 1}/{retries + 1})")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            self.error_count += 1
                            print(f"[BestChange] ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {endpoint}")
                            return None

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö HTTP –æ—à–∏–±–æ–∫
                    if response.status == 404:
                        return None  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ endpoint

                    if response.status >= 400:
                        if attempt < retries:
                            await asyncio.sleep(self.retry_delay)
                            continue
                        self.error_count += 1
                        print(f"[BestChange] ‚ùå HTTP {response.status} –¥–ª—è {endpoint}")
                        return None

                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                    try:
                        data = await response.json()
                        return data
                    except aiohttp.ContentTypeError:
                        self.error_count += 1
                        print(f"[BestChange] ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è {endpoint}")
                        return None

            except asyncio.TimeoutError:
                if attempt < retries:
                    await asyncio.sleep(self.retry_delay)
                    continue
                self.error_count += 1
                print(f"[BestChange] ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –¥–ª—è {endpoint}")
                return None

            except aiohttp.ClientError as e:
                if attempt < retries:
                    await asyncio.sleep(self.retry_delay)
                    continue
                self.error_count += 1
                print(f"[BestChange] ‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {endpoint}: {e}")
                return None

            except Exception as e:
                self.error_count += 1
                print(f"[BestChange] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {endpoint}: {e}")
                return None

        return None

    async def load_currencies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª—é—Ç"""
        print("[BestChange] üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç...")
        data = await self._make_request(f"currencies/{self.lang}")

        if not data or 'currencies' not in data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")

        self.currencies.clear()
        self.crypto_currencies.clear()

        for currency in data['currencies']:
            currency_id = currency['id']
            code = currency.get('code', '').upper()

            self.currencies[currency_id] = {
                'id': currency_id,
                'name': currency.get('name', ''),
                'code': code,
                'viewname': currency.get('viewname', ''),
                'crypto': currency.get('crypto', False),
                'cash': currency.get('cash', False),
                'group': currency.get('group', 0)
            }

            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É
            if currency.get('crypto', False) and code:
                self.crypto_currencies[code] = currency_id

        print(f"[BestChange] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞–ª—é—Ç: {len(self.currencies)} (–∫—Ä–∏–ø—Ç–æ: {len(self.crypto_currencies)})")

    async def load_exchangers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤"""
        print("[BestChange] üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤...")
        data = await self._make_request(f"changers/{self.lang}")

        if not data or 'changers' not in data:
            print("[BestChange] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫–∏")
            return

        self.changers.clear()
        active_count = 0

        for changer in data['changers']:
            changer_id = changer['id']
            is_active = changer.get('active', False)

            self.changers[changer_id] = {
                'id': changer_id,
                'name': changer.get('name', ''),
                'active': is_active,
                'rating': changer.get('rating', 0),
                'reserve': changer.get('reserve', 0)
            }

            if is_active:
                active_count += 1

        print(f"[BestChange] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤: {len(self.changers)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_count})")

    @property
    def exchangers(self) -> Dict[int, str]:
        """–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return {cid: data['name'] for cid, data in self.changers.items()}

    async def load_rates(self, common_tickers: List[str], use_rankrate: bool = True):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º

        Args:
            common_tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            use_rankrate: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rankrate –≤–º–µ—Å—Ç–æ rate (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏)
        """
        self.rates.clear()
        self.request_count = 0
        self.error_count = 0
        self.rate_limit_count = 0

        total_coins = len(common_tickers)
        print(f"\n[BestChange] üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¥–ª—è {total_coins} –º–æ–Ω–µ—Ç...")
        print(f"[BestChange] ‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"  ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.max_concurrent_requests}")
        print(f"  ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {self.request_delay}—Å")
        print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size} –ø–∞—Ä")
        print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rankrate: {'–î–∞' if use_rankrate else '–ù–µ—Ç'}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        valid_tickers = [
            ticker for ticker in common_tickers
            if ticker in self.crypto_currencies
        ]

        if len(valid_tickers) < len(common_tickers):
            print(f"[BestChange] ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(common_tickers) - len(valid_tickers)} –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        tasks = []
        for ticker in valid_tickers:
            currency_id = self.crypto_currencies[ticker]
            tasks.append(
                self._load_rates_for_currency(ticker, currency_id, valid_tickers, use_rankrate)
            )

        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        semaphore = asyncio.Semaphore(self.max_concurrent_requests)
        completed = 0
        successful = 0

        async def bounded_task(task):
            nonlocal completed, successful
            async with semaphore:
                result = await task
                completed += 1

                if result:
                    successful += 1

                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                if completed % 5 == 0 or completed == len(tasks):
                    progress = completed * 100 // len(tasks)
                    print(f"[BestChange] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{len(tasks)} ({progress}%) | –£—Å–ø–µ—à–Ω–æ: {successful}")

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await asyncio.sleep(self.request_delay)
                return result

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = await asyncio.gather(*[bounded_task(t) for t in tasks], return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, Exception):
                self.error_count += 1
                continue
            if result:
                from_ticker, pairs = result
                self.rates[from_ticker] = pairs

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n[BestChange] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.request_count}")
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –º–æ–Ω–µ—Ç: {successful}/{len(tasks)}")
        print(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {self.error_count}")
        print(f"  ‚Ä¢ Rate limit (429): {self.rate_limit_count}")
        print(f"  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä: {sum(len(pairs) for pairs in self.rates.values())}")

    async def _load_rates_for_currency(
            self,
            from_ticker: str,
            from_id: int,
            common_tickers: List[str],
            use_rankrate: bool
    ) -> Optional[Tuple[str, Dict[str, List[RateInfo]]]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã

        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü–æ–ª—É—á–∞–µ–º presences –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
        2. –ó–∞–≥—Ä—É–∂–∞–µ–º rates –±–∞—Ç—á–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
        3. –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º presences (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞)
            presences = await self._make_request(f"presences/{from_id}-0")
            if not presences or 'presences' not in presences:
                return None

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –Ω–∞–º –ø–∞—Ä—ã
            pair_list = []
            valid_targets = {}

            for presence in presences['presences']:
                pair_id = presence['pair']
                parts = pair_id.split('-')

                if len(parts) < 2:
                    continue

                try:
                    to_id = int(parts[1])
                except ValueError:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
                if to_id not in self.currencies:
                    continue

                to_code = self.currencies[to_id]['code']

                # –¢–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
                if to_code in common_tickers and from_ticker != to_code:
                    pair_list.append(pair_id)
                    valid_targets[to_id] = to_code

            if not pair_list:
                return None

            pairs: Dict[str, List[RateInfo]] = {}

            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(pair_list), self.batch_size):
                batch = pair_list[i:i + self.batch_size]
                pair_string = '+'.join(batch)

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
                if i > 0:
                    await asyncio.sleep(self.request_delay * 0.3)

                rates_data = await self._make_request(f"rates/{pair_string}")

                if not rates_data or 'rates' not in rates_data:
                    continue

                # –ü–∞—Ä—Å–∏–º –∫—É—Ä—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                for pair_id, rates_list in rates_data['rates'].items():
                    parts = pair_id.split('-')
                    if len(parts) < 2:
                        continue

                    try:
                        to_id = int(parts[1])
                    except ValueError:
                        continue

                    to_code = valid_targets.get(to_id)
                    if not to_code:
                        continue

                    if to_code not in pairs:
                        pairs[to_code] = []

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞
                    for rate_data in rates_list:
                        try:
                            rate = float(rate_data.get('rate', 0))
                            rankrate = float(rate_data.get('rankrate', rate))

                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º rankrate –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∫—É—Ä—Å)
                            effective_rate = rankrate if use_rankrate else rate

                            if effective_rate <= 0:
                                continue

                            exchanger_id = rate_data['changer']

                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–Ω–∏–∫–µ
                            exchanger_info = self.changers.get(exchanger_id, {})
                            if not exchanger_info.get('active', False):
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏

                            exchanger_name = exchanger_info.get('name', f"Exchanger #{exchanger_id}")

                            rate_info = RateInfo(
                                rate=rate,
                                rankrate=rankrate,
                                exchanger=exchanger_name,
                                exchanger_id=exchanger_id,
                                reserve=float(rate_data.get('reserve', 0)),
                                give_min=float(rate_data.get('inmin', 0)),
                                give_max=float(rate_data.get('inmax', 0)),
                                marks=rate_data.get('marks', [])
                            )

                            pairs[to_code].append(rate_info)

                        except (ValueError, TypeError, KeyError) as e:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                            continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∫—É—Ä—Å—É (rankrate –∏–ª–∏ rate)
            for to_code in pairs:
                pairs[to_code].sort(
                    key=lambda x: x.rankrate if use_rankrate else x.rate,
                    reverse=True
                )

            return (from_ticker, pairs) if pairs else None

        except Exception as e:
            print(f"[BestChange] ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {from_ticker}: {type(e).__name__}: {e}")
            return None

    async def get_rates_for_pairs(self, common_coins: Set[str], use_rankrate: bool = True) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –æ–±—â–∏—Ö –º–æ–Ω–µ—Ç

        Args:
            common_coins: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤ –º–æ–Ω–µ—Ç
            use_rankrate: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rankrate (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π)

        Returns:
            –°–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤ {from_ticker: {to_ticker: [RateInfo, ...]}}
        """
        if not self.rates:
            await self.load_rates(list(common_coins), use_rankrate)
        return self.rates

    def get_best_rate(self, from_ticker: str, to_ticker: str, min_reserve: float = 0) -> Optional[RateInfo]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–∏–π –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—ã —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞

        Args:
            from_ticker: –¢–∏–∫–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
            to_ticker: –¢–∏–∫–µ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
            min_reserve: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞

        Returns:
            –õ—É—á—à–∏–π RateInfo –∏–ª–∏ None
        """
        if from_ticker not in self.rates:
            return None

        if to_ticker not in self.rates[from_ticker]:
            return None

        rates = self.rates[from_ticker][to_ticker]

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∑–µ—Ä–≤—É
        if min_reserve > 0:
            rates = [r for r in rates if r.reserve >= min_reserve]

        return rates[0] if rates else None

    def get_top_rates(
            self,
            from_ticker: str,
            to_ticker: str,
            top_n: int = 5,
            min_reserve: float = 0
    ) -> List[RateInfo]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø N –ª—É—á—à–∏—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –ø–∞—Ä—ã

        Args:
            from_ticker: –¢–∏–∫–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
            to_ticker: –¢–∏–∫–µ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
            top_n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö –∫—É—Ä—Å–æ–≤
            min_reserve: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –æ–±–º–µ–Ω–Ω–∏–∫–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ —Ç–æ–ø N RateInfo
        """
        if from_ticker not in self.rates:
            return []

        if to_ticker not in self.rates[from_ticker]:
            return []

        rates = self.rates[from_ticker][to_ticker]

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∑–µ—Ä–≤—É
        if min_reserve > 0:
            rates = [r for r in rates if r.reserve >= min_reserve]

        return rates[:top_n]

    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê BESTCHANGE")
        print("=" * 60)
        print(f"–í–∞–ª—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.currencies)}")
        print(f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(self.crypto_currencies)}")
        print(f"–û–±–º–µ–Ω–Ω–∏–∫–æ–≤: {len(self.changers)}")
        print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±–º–µ–Ω–∞: {len(self.rates)}")

        total_pairs = sum(len(pairs) for pairs in self.rates.values())
        print(f"–í—Å–µ–≥–æ –ø–∞—Ä: {total_pairs}")

        if self.rates:
            avg_pairs = total_pairs / len(self.rates)
            print(f"–°—Ä–µ–¥–Ω–µ–µ –ø–∞—Ä –Ω–∞ –≤–∞–ª—é—Ç—É: {avg_pairs:.1f}")

        print("=" * 60 + "\n")