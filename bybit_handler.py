import aiohttp
from typing import Dict, Set
from configs import BYBIT_API_URL, REQUEST_TIMEOUT, ENABLE_COIN_FILTER, BLACKLIST_COINS, WHITELIST_COINS


class BybitClientAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bybit API"""

    def __init__(self):
        self.base_url = BYBIT_API_URL
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (compatible; ArbitrageBot/3.0)',
            'Accept': 'application/json'
        }
        self.timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        self.session = None
        self.usdt_pairs: Dict[str, float] = {}
        self.coins: Set[str] = set()
        self.trading_pairs: Set[tuple] = set()  # –†–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (base, quote)

    async def __aenter__(self):
        await self.create_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()

    async def create_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession(headers=self.headers, timeout=self.timeout)

    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None

    def _should_include_coin(self, coin: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ –º–æ–Ω–µ—Ç–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∞–Ω–∞–ª–∏–∑

        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á—ë–Ω - –≤–∫–ª—é—á–∞–µ–º –≤—Å—ë
        2. –ï—Å–ª–∏ –µ—Å—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ
        3. –ò–Ω–∞—á–µ –≤–∫–ª—é—á–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        """
        if not ENABLE_COIN_FILTER:
            return True

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if WHITELIST_COINS:
            return coin in WHITELIST_COINS

        # –ò–Ω–∞—á–µ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return coin not in BLACKLIST_COINS

    async def load_usdt_pairs(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ USDT-–ø–∞—Ä—ã —Å Bybit –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ usdt_pairs –∏ coins"""
        if self.session is None:
            await self.create_session()

        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {'category': 'spot'}
            async with self.session.get(url, params=params) as response:
                response.raise_for_status()
                data = await response.json()

            self.usdt_pairs.clear()
            self.coins.clear()

            result_list = data.get('result', {}).get('list', [])
            filtered_count = 0

            for ticker in result_list:
                symbol = ticker.get('symbol', '').replace('/', '').upper()
                if not symbol.endswith('USDT'):
                    continue

                base = symbol[:-4]

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–æ–Ω–µ—Ç
                if not self._should_include_coin(base):
                    filtered_count += 1
                    continue

                try:
                    price = float(ticker.get('lastPrice', 0))
                    if price > 0:
                        self.usdt_pairs[base] = price
                        self.coins.add(base)
                except (ValueError, TypeError):
                    continue

            print(f"[Bybit] ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.usdt_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT")
            if filtered_count > 0:
                print(f"[Bybit] üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {filtered_count}")

        except Exception as e:
            print(f"[Bybit] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä: {e}")

    async def get_usdt_tickers(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ USDT-–ø–∞—Ä—ã —Å Bybit (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
        if not self.usdt_pairs:
            await self.load_usdt_pairs()
        return self.usdt_pairs