import aiohttp
from typing import Dict, Set, Tuple, Optional
from configs import (
    BYBIT_API_URL, REQUEST_TIMEOUT, ENABLE_COIN_FILTER,
    BLACKLIST_COINS, WHITELIST_COINS, MIN_24H_VOLUME_USDT,
    MIN_LIQUIDITY_SCORE
)


class BybitClientAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bybit API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.base_url = BYBIT_API_URL
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (compatible; ArbitrageBot/6.0)',
            'Accept': 'application/json'
        }
        self.timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        self.session = None

        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä
        self.usdt_pairs: Dict[str, float] = {}  # USDT -> COIN
        self.coins: Set[str] = set()

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        self.trading_pairs: Dict[Tuple[str, str], float] = {}

        # –î–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        self.pair_volumes: Dict[Tuple[str, str], float] = {}  # 24h –æ–±—ä—ë–º –≤ USDT
        self.pair_liquidity: Dict[Tuple[str, str], float] = {}  # –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.filtered_by_volume = 0
        self.filtered_by_liquidity = 0

    async def __aenter__(self):
        await self.create_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()

    async def create_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession(headers=self.headers, timeout=self.timeout)

    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None

    def _should_include_coin(self, coin: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ –º–æ–Ω–µ—Ç–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∞–Ω–∞–ª–∏–∑"""
        if not ENABLE_COIN_FILTER:
            return True

        if WHITELIST_COINS:
            return coin in WHITELIST_COINS

        return coin not in BLACKLIST_COINS

    def _calculate_liquidity_score(
            self,
            volume_24h: float,
            turnover_24h: float,
            bid_ask_spread_pct: float = None
    ) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã

        –§–∞–∫—Ç–æ—Ä—ã:
        - –û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        - –û–±–æ—Ä–æ—Ç –∑–∞ 24—á (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        - –°–ø—Ä–µ–¥ bid/ask (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)

        Returns:
            –û—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 100
        """
        score = 0.0

        # –û—Ü–µ–Ω–∫–∞ –ø–æ –æ–±—ä—ë–º—É (0-50 –±–∞–ª–ª–æ–≤)
        if volume_24h >= 1000000:  # >1M USDT
            score += 50
        elif volume_24h >= 500000:  # 500K-1M
            score += 40
        elif volume_24h >= 100000:  # 100K-500K
            score += 30
        elif volume_24h >= 50000:  # 50K-100K
            score += 20
        elif volume_24h >= 10000:  # 10K-50K
            score += 10

        # –û—Ü–µ–Ω–∫–∞ –ø–æ –æ–±–æ—Ä–æ—Ç—É (0-30 –±–∞–ª–ª–æ–≤)
        if turnover_24h >= 10000000:  # >10M USDT
            score += 30
        elif turnover_24h >= 5000000:  # 5M-10M
            score += 25
        elif turnover_24h >= 1000000:  # 1M-5M
            score += 20
        elif turnover_24h >= 500000:  # 500K-1M
            score += 15
        elif turnover_24h >= 100000:  # 100K-500K
            score += 10

        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å–ø—Ä–µ–¥—É (0-20 –±–∞–ª–ª–æ–≤)
        if bid_ask_spread_pct is not None:
            if bid_ask_spread_pct <= 0.05:  # ‚â§0.05%
                score += 20
            elif bid_ask_spread_pct <= 0.1:  # 0.05-0.1%
                score += 15
            elif bid_ask_spread_pct <= 0.2:  # 0.1-0.2%
                score += 10
            elif bid_ask_spread_pct <= 0.5:  # 0.2-0.5%
                score += 5
        else:
            # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –¥–∞—ë–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
            score += 10

        return min(score, 100.0)

    async def load_usdt_pairs(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å Bybit —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        """
        if self.session is None:
            await self.create_session()

        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {'category': 'spot'}
            async with self.session.get(url, params=params) as response:
                response.raise_for_status()
                data = await response.json()

            self.usdt_pairs.clear()
            self.coins.clear()
            self.trading_pairs.clear()
            self.pair_volumes.clear()
            self.pair_liquidity.clear()

            filtered_count = 0
            self.filtered_by_volume = 0
            self.filtered_by_liquidity = 0

            result_list = data.get('result', {}).get('list', [])

            # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö quote –≤–∞–ª—é—Ç
            quote_currencies = ['USDT', 'USDC', 'BTC', 'ETH', 'BNB', 'BUSD', 'DAI', 'TRX', 'XRP', 'SOL', 'DOGE']

            for ticker in result_list:
                symbol = ticker.get('symbol', '').replace('/', '').upper()

                try:
                    price = float(ticker.get('lastPrice', 0))
                    if price <= 0:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    volume_24h = float(ticker.get('volume24h', 0))
                    turnover_24h = float(ticker.get('turnover24h', 0))

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å bid/ask –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–ø—Ä–µ–¥–∞
                    bid = float(ticker.get('bid1Price', 0))
                    ask = float(ticker.get('ask1Price', 0))

                    bid_ask_spread_pct = None
                    if bid > 0 and ask > 0:
                        bid_ask_spread_pct = ((ask - bid) / bid) * 100

                except (ValueError, TypeError):
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º base –∏ quote
                base = None
                quote = None

                for potential_quote in quote_currencies:
                    if symbol.endswith(potential_quote) and len(symbol) > len(potential_quote):
                        quote = potential_quote
                        base = symbol[:-len(potential_quote)]
                        break

                if not base or not quote:
                    continue

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–æ–Ω–µ—Ç
                if not self._should_include_coin(base):
                    filtered_count += 1
                    continue

                if not self._should_include_coin(quote):
                    filtered_count += 1
                    continue

                # –§–ò–õ–¨–¢–† 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∑–∞ 24—á
                # –î–ª—è USDT –ø–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—Ü–µ–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ —Ü–µ–Ω—É
                if quote == 'USDT':
                    volume_usdt = turnover_24h
                else:
                    # –û—Ü–µ–Ω–∫–∞ –æ–±—ä—ë–º–∞ –≤ USDT —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    volume_usdt = volume_24h * price

                if volume_usdt < MIN_24H_VOLUME_USDT:
                    self.filtered_by_volume += 1
                    continue

                # –§–ò–õ–¨–¢–† 2: –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                liquidity_score = self._calculate_liquidity_score(
                    volume_24h, turnover_24h, bid_ask_spread_pct
                )

                if liquidity_score < MIN_LIQUIDITY_SCORE:
                    self.filtered_by_liquidity += 1
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
                self.trading_pairs[(base, quote)] = price
                self.pair_volumes[(base, quote)] = volume_usdt
                self.pair_liquidity[(base, quote)] = liquidity_score

                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
                self.coins.add(base)
                self.coins.add(quote)

                # –û—Ç–¥–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º USDT –ø–∞—Ä—ã
                if quote == 'USDT':
                    self.usdt_pairs[base] = price

            print(f"[Bybit] ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.usdt_pairs)} USDT-–ø–∞—Ä")
            print(f"[Bybit] ‚úì –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç: {len(self.coins)}")
            print(f"[Bybit] ‚úì –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–ª–∏–∫–≤–∏–¥–Ω—ã—Ö): {len(self.trading_pairs)}")

            if filtered_count > 0:
                print(f"[Bybit] üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ white/blacklist: {filtered_count}")

            if self.filtered_by_volume > 0:
                print(
                    f"[Bybit] üìâ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –æ–±—ä—ë–º—É (<${MIN_24H_VOLUME_USDT:,.0f} –∑–∞ 24—á): {self.filtered_by_volume}")

            if self.filtered_by_liquidity > 0:
                print(
                    f"[Bybit] üíß –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (score <{MIN_LIQUIDITY_SCORE}): {self.filtered_by_liquidity}")

            # –¢–æ–ø-10 —Å–∞–º—ã—Ö –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä
            top_liquid = sorted(
                self.pair_liquidity.items(),
                key=lambda x: x[1],
                reverse=True
            )[:10]

            print(f"\n[Bybit] üèÜ –¢–æ–ø-10 —Å–∞–º—ã—Ö –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä:")
            for (base, quote), score in top_liquid:
                volume = self.pair_volumes.get((base, quote), 0)
                price = self.trading_pairs.get((base, quote), 0)
                print(f"        {base}/{quote}: –æ—Ü–µ–Ω–∫–∞ {score:.1f}, –æ–±—ä—ë–º ${volume:,.0f}, —Ü–µ–Ω–∞ {price:.8f}")

        except Exception as e:
            print(f"[Bybit] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä: {e}")

    def get_price(self, base: str, quote: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –ø–∞—Ä—ã BASE/QUOTE"""
        direct = self.trading_pairs.get((base, quote))
        if direct is not None:
            return direct

        reverse = self.trading_pairs.get((quote, base))
        if reverse is not None and reverse > 0:
            return 1.0 / reverse

        return None

    def get_liquidity_score(self, base: str, quote: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã"""
        score = self.pair_liquidity.get((base, quote))
        if score is not None:
            return score

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        score = self.pair_liquidity.get((quote, base))
        return score if score is not None else 0.0

    def get_volume_24h(self, base: str, quote: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á –≤ USDT"""
        volume = self.pair_volumes.get((base, quote))
        if volume is not None:
            return volume

        volume = self.pair_volumes.get((quote, base))
        return volume if volume is not None else 0.0

    def has_trading_pair(self, base: str, quote: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        return self.get_price(base, quote) is not None

    def is_liquid_pair(self, base: str, quote: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –ª–∏–∫–≤–∏–¥–Ω–æ–π"""
        return self.get_liquidity_score(base, quote) >= MIN_LIQUIDITY_SCORE

    async def get_usdt_tickers(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ USDT-–ø–∞—Ä—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        if not self.usdt_pairs:
            await self.load_usdt_pairs()
        return self.usdt_pairs

    def get_available_quotes_for(self, base: str) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–∞–ª—é—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è base"""
        quotes = set()
        for (b, q) in self.trading_pairs.keys():
            if b == base:
                quotes.add(q)
            elif q == base:
                quotes.add(b)
        return quotes

    def get_liquid_usdt_coins(self) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å USDT-–ø–∞—Ä–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        """
        coins_with_scores = []
        for coin in self.usdt_pairs.keys():
            score = self.get_liquidity_score(coin, 'USDT')
            volume = self.get_volume_24h(coin, 'USDT')
            coins_with_scores.append((coin, score, volume))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        coins_with_scores.sort(key=lambda x: x[1], reverse=True)

        return [coin for coin, score, volume in coins_with_scores]